Search.setIndex({"docnames": ["bibliography", "index", "installation", "reference/libcasm/_autosummary/libcasm.monte", "reference/libcasm/_autosummary/libcasm.monte.MethodLog", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_lap", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_always", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_debug", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_quiet", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_standard", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_verbose", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.decrease_indent", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.end_section", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.hide_clock", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.increase_indent", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.indent_str", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.lap_time", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.log_frequency", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.logfile_path", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.paragraph", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.paragraph_justification", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.paragraph_width", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.print", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.reset", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.reset_to_stdout", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.restart_clock", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.section", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_debug", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_indent_space", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_initial_indent_space", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_paragraph_justification", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_paragraph_width", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_quiet", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_standard", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_verbose", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.show_clock", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.time_s", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.verbatim", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.dump", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.load", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.seed", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.seed_seq", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator.engine", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator.random_int", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator.random_real", "reference/libcasm/_autosummary/libcasm.monte.ValueMap", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.boolean_values", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.from_dict", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.is_mismatched", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.make_incremented_values", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.matrix_values", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.scalar_values", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.vector_values", "reference/libcasm/_autosummary/libcasm.monte.events", "reference/libcasm/_autosummary/libcasm.monte.events.Atom", "reference/libcasm/_autosummary/libcasm.monte.events.Atom.n_jumps", "reference/libcasm/_autosummary/libcasm.monte.events.Atom.translation", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation.linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation.mol_comp", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation.mol_id", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj.delta_ijk", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj.from", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj.to", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.append", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.clear", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.extend", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.insert", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.pop", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.append", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.clear", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.extend", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.insert", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.pop", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.asym_size", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.asym_to_b", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.asym_to_unitl", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.bijk_to_asym", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.bijk_to_l", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.bijk_to_unitl", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_size", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_asym", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_b", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_basis_cart", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_basis_frac", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_bijk", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_cart", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_frac", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_ijk", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_unitl", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.lat_column_mat", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.make_with_custom_asym", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.make_with_custom_unitcell", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.occ_size", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.occ_to_species_index", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.site_index_converter", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_allowed", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_index_to_atoms_size", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_index_to_name", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_index_to_occupant", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_name_to_index", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_size", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_to_occ_index", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.transformation_matrix_to_super", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unit_site_index_converter", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unit_transformation_matrix_to_super", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitcell_index_converter", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_size", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_to_asym", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_to_b", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_to_bijk", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.append", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.clear", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.count", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.extend", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.insert", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.pop", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.remove", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.append", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.clear", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.count", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.extend", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.insert", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.pop", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.remove", "reference/libcasm/_autosummary/libcasm.monte.events.Mol", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.asymmetric_unit_index", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.component_id", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.id", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.mol_location_index", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.species_index", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.append", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.clear", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.extend", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.insert", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.pop", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.from_dict", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.reverse", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.sort", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.sorted", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.swaps", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.to_dict", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.total_count", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.asymmetric_unit_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.from_dict", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.is_valid", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.species_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.to_dict", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.from_dict", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.index", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.matching_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.to_dict", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.atom_traj", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.new_occ", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.occ_transform", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.apply", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_info_final", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_info_initial", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_positions_cart", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_positions_cart_within", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_size", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.cand_size", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.cand_size_by_candidate_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.candidate_list", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.choose_mol", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.choose_mol_by_candidate_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.clear_atom_info_final", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.convert", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_n_jumps", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_names", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_position_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_species_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.initial_atom_position_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.initial_atom_species_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.initialize", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.linear_site_index_to_mol_id", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol_id", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol_id_by_candidate_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol_size", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.unique_atom_id", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.first", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.from_dict", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.is_valid", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.reverse", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.second", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.sort", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.sorted", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.to_dict", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap.items", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap.keys", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap.values", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.asym", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.from_species", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.mol_id", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.to_species", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.append", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.clear", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.extend", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.insert", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.pop", "reference/libcasm/_autosummary/libcasm.monte.events.choose_canonical_swap", "reference/libcasm/_autosummary/libcasm.monte.events.choose_semigrand_canonical_multiswap", "reference/libcasm/_autosummary/libcasm.monte.events.choose_semigrand_canonical_swap", "reference/libcasm/_autosummary/libcasm.monte.events.is_allowed_canonical_swap", "reference/libcasm/_autosummary/libcasm.monte.events.make_canonical_swaps", "reference/libcasm/_autosummary/libcasm.monte.events.make_multiswaps", "reference/libcasm/_autosummary/libcasm.monte.events.make_semigrand_canonical_swaps", "reference/libcasm/_autosummary/libcasm.monte.events.propose_canonical_event", "reference/libcasm/_autosummary/libcasm.monte.events.propose_canonical_event_from_swap", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_event", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_event_from_multiswap", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_event_from_swap", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_multiswap_event", "reference/libcasm/_autosummary/libcasm.monte.events.swaps_allowed_per_unitcell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.from_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.from_linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.n_sites", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.n_unitcells", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.n_variable_sites", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.occ", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.occupation", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.set_occ", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.set_occupation", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.shape", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.to_linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.within", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.occ_delta_per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.per_unitcell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.n_independent_compositions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.occ_delta_per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.per_unitcell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.conditions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.configuration", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.from_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.properties", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingSystem", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingSystem.formation_energy_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingSystem.param_composition_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.conditions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.data", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.default_json_sampling_functions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.default_sampling_functions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.formation_energy_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.param_composition_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.potential", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.run", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.state", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.system", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.exchange_potential", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.from_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.from_values", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.temperature", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.to_values", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.acceptance_rate", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.completion_check", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.json_samplers", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.json_sampling_functions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_accept", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_pass", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_reject", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_steps_per_pass", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.rejection_rate", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.reset", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.sample_weight", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.samplers", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.sampling_functions", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.apply", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.propose", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.occ_delta_per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.occ_event_delta_per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.per_unitcell", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.default_write_status", "reference/libcasm/_autosummary/libcasm.monte.ising_py", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.from_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.from_linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.n_sites", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.n_unitcells", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.n_variable_sites", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.occ", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.occupation", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.set_occ", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.set_occupation", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.shape", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.to_linear_site_index", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.within", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.J", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.lattice_type", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.occ_delta_per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.per_unitcell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.n_independent_compositions", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.occ_delta_per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.per_unitcell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingState", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingSystem", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.conditions", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.data", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.formation_energy_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.param_composition_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.potential", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.run", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.system", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.exchange_potential", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.from_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.from_values", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.temperature", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.to_values", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.acceptance_rate", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.completion_check", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_accept", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_pass", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_reject", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_steps_per_pass", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.rejection_rate", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.reset", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.sample_weight", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.samplers", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.sampling_functions", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.to_dict", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.apply", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.occ_event", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.propose", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.conditions", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.formation_energy_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.occ_delta_per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.param_composition_calculator", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.per_supercell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.per_unitcell", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.set_state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.state", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.system", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.default_write_status", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.make_formation_energy_f", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.make_param_composition_f", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.make_potential_energy_f", "reference/libcasm/_autosummary/libcasm.monte.methods", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.acceptance_rate", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.completion_check", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.json_samplers", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.json_sampling_functions", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_accept", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_pass", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_reject", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_steps_per_pass", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.rejection_rate", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.sample_weight", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.samplers", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.sampling_functions", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.to_dict", "reference/libcasm/_autosummary/libcasm.monte.methods.basic_occupation_metropolis", "reference/libcasm/_autosummary/libcasm.monte.methods.metropolis_acceptance", "reference/libcasm/_autosummary/libcasm.monte.sampling", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.calculated_precision", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.mean", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.relative_precision", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.calculate", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.confidence", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.from_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.n_resamples", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.weighted_observations_method", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.check", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.count_and_time_check", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.count_check", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.params", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.reset", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.results", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.time_check", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.calc_statistics_f", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_base", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_begin", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_period", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_period_max", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_shift", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.cutoff_params", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.equilibration_check_f", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.from_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.log_spacing", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.requested_precision", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.clocktime", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.convergence_check_results", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.count", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.equilibration_check_results", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.full_reset", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.has_all_minimums_met", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.has_any_maximum_met", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.is_complete", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.n_samples", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.n_samples_at_convergence_check", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.params", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.partial_reset", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.time", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.N_samples_for_statistics", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.all_converged", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.individual_results", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.atom_positions_cart", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.indices_after_pass", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.indices_after_time", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.initialize", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.insert", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.jumps_per_position_sample", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.max_n_position_samples", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.n_complete_samples", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.n_position_samples", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.output_incomplete_samples", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.pass", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.step", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.stop_run_when_complete", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.time", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsDataParams", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsDataParams.copy", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsDataParams.from_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsDataParams.jumps_per_position_sample", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsDataParams.max_n_position_samples", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsDataParams.output_incomplete_samples", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsDataParams.stop_run_when_complete", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsDataParams.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.from_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_clocktime", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_count", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_sample", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_time", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_clocktime", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_count", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_sample", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_time", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.component_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.count", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.fraction", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.insert", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.max_size", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.max_size_exceeded", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.out_of_range_count", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.shape", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.size", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.sum", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.tol", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.component_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.count", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.fraction", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.insert", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.max_size", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.max_size_exceeded", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.out_of_range_count", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.shape", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.size", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.sum", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.N_samples_for_all_to_equilibrate", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.all_equilibrated", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.individual_results", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.GenericSelectedEventFunction", "reference/libcasm/_autosummary/libcasm.monte.sampling.GenericSelectedEventFunction.description", "reference/libcasm/_autosummary/libcasm.monte.sampling.GenericSelectedEventFunction.function", "reference/libcasm/_autosummary/libcasm.monte.sampling.GenericSelectedEventFunction.has_value_function", "reference/libcasm/_autosummary/libcasm.monte.sampling.GenericSelectedEventFunction.name", "reference/libcasm/_autosummary/libcasm.monte.sampling.GenericSelectedEventFunction.order", "reference/libcasm/_autosummary/libcasm.monte.sampling.GenericSelectedEventFunction.requires_event_state", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.begin", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.bin_coords", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.bin_width", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.count", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.density", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.insert", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.is_log", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.max_size", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.max_size_exceeded", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.merge", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.out_of_range_count", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.size", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.sum", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.is_converged", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.requested_precision", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.stats", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult.N_samples_for_equilibration", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult.is_equilibrated", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogram1D", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogram1D.combined_histogram", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogram1D.histograms", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogram1D.insert", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogram1D.partition_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogram1D.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.bin_width", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.description", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.function", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.get_partition_function", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.initial_begin", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.is_log", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.max_size", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.name", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.partition", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.partition_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.requires_event_state", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunctionMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunctionMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunctionMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunctionMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.abs_convergence_is_required", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.abs_precision", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.from_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.rel_convergence_is_required", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.rel_precision", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionConstructor", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionConstructor.set_precision", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.CUSTOM", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.LINEAR", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.LOG", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.name", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.value", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.BY_PASS", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.BY_STEP", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.BY_TIME", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.name", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.value", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.append", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.clear", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.component", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.component_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.n_components", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.n_samples", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.sample", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.sample_capacity", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.set_capacity_increment", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.set_sample_capacity", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.set_values", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.shape", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent.component_index", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent.component_name", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent.sampler_name", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.append_to_json_sampler_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.append_to_sampler_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.base", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.begin", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.do_sample_time", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.do_sample_trajectory", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.extend_json_sampler_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.extend_sampler_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.json_sampler_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.period", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.remove_from_json_sampler_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.remove_from_sampler_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.sample_method", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.sample_mode", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.sampler_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.shift", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.stochastic_sample_period", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventData", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventData.continuous_1d_histograms", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventData.correlations_data", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventData.discrete_vector_float_histograms", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventData.discrete_vector_int_histograms", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventData.reset", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventData.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.collect", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.collect_hop_correlations", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.copy", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.correlations_data_params", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.do_not_collect", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.do_not_collect_hop_correlations", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.evaluate", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.from_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.function_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.get_parameters", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.reset", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.to_dict", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctions", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctions.continuous_1d_functions", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctions.discrete_vector_float_functions", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctions.discrete_vector_int_functions", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctions.generic_functions", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.component_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.description", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.function", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.name", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.shape", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.component_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.description", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.function", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.has_value_function", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.max_size", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.name", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.requires_event_state", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.set_value_labels", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.shape", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.tol", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.value_labels", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunctionMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunctionMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunctionMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunctionMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction.component_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction.description", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction.function", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction.has_value_function", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction.max_size", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction.name", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction.requires_event_state", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction.set_value_labels", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction.shape", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction.value_labels", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunctionMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunctionMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunctionMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunctionMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.all_minimums_met", "reference/libcasm/_autosummary/libcasm.monte.sampling.any_maximum_met", "reference/libcasm/_autosummary/libcasm.monte.sampling.colmajor_component_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.component_convergence_check", "reference/libcasm/_autosummary/libcasm.monte.sampling.converge", "reference/libcasm/_autosummary/libcasm.monte.sampling.convergence_check", "reference/libcasm/_autosummary/libcasm.monte.sampling.default_component_names", "reference/libcasm/_autosummary/libcasm.monte.sampling.default_equilibration_check", "reference/libcasm/_autosummary/libcasm.monte.sampling.get_n_samples", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSampler", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSampler.append", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSampler.clear", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSampler.n_samples", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSampler.sample", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSampler.sample_capacity", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSampler.set_sample_capacity", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSampler.set_values", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSampler.to_list", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSampler.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSamplerMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSamplerMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSamplerMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSamplerMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction.description", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction.function", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction.name", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap.items", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap.keys", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap.values", "reference/libcasm/_autosummary/libcasm.monte.sampling.matrix_as_vector", "reference/libcasm/_autosummary/libcasm.monte.sampling.scalar_as_vector", "reference/libcasm/index", "usage", "usage/completion_check", "usage/overview"], "filenames": ["bibliography.rst", "index.rst", "installation.rst", "reference/libcasm/_autosummary/libcasm.monte.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_lap.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_always.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_debug.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_quiet.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_standard.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.begin_section_print_if_verbose.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.decrease_indent.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.end_section.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.hide_clock.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.increase_indent.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.indent_str.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.lap_time.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.log_frequency.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.logfile_path.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.paragraph.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.paragraph_justification.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.paragraph_width.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.print.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.reset.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.reset_to_stdout.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.restart_clock.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.section.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_debug.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_indent_space.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_initial_indent_space.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_paragraph_justification.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_paragraph_width.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_quiet.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_standard.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.set_verbose.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.show_clock.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.time_s.rst", "reference/libcasm/_autosummary/libcasm.monte.MethodLog.verbatim.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.dump.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.load.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.seed.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberEngine.seed_seq.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator.engine.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator.random_int.rst", "reference/libcasm/_autosummary/libcasm.monte.RandomNumberGenerator.random_real.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.boolean_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.is_mismatched.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.make_incremented_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.matrix_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.scalar_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ValueMap.vector_values.rst", "reference/libcasm/_autosummary/libcasm.monte.events.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Atom.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Atom.n_jumps.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Atom.translation.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation.linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation.mol_comp.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomLocation.mol_id.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj.delta_ijk.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj.from.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTraj.to.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.append.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.extend.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomTrajVector.pop.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.append.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.extend.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.events.AtomVector.pop.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.asym_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.asym_to_b.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.asym_to_unitl.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.bijk_to_asym.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.bijk_to_l.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.bijk_to_unitl.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_asym.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_b.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_basis_cart.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_basis_frac.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_bijk.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_cart.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_frac.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_ijk.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.l_to_unitl.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.lat_column_mat.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.make_with_custom_asym.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.make_with_custom_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.occ_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.occ_to_species_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.site_index_converter.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_allowed.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_index_to_atoms_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_index_to_name.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_index_to_occupant.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_name_to_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.species_to_occ_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.transformation_matrix_to_super.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unit_site_index_converter.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unit_transformation_matrix_to_super.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitcell_index_converter.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_to_asym.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_to_b.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Conversions.unitl_to_bijk.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.append.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.count.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.extend.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.pop.rst", "reference/libcasm/_autosummary/libcasm.monte.events.IntVector.remove.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.append.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.count.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.extend.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.pop.rst", "reference/libcasm/_autosummary/libcasm.monte.events.LongVector.remove.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.asymmetric_unit_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.component_id.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.id.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.mol_location_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.Mol.species_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.append.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.extend.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MolVector.pop.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.reverse.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.sort.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.sorted.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.swaps.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.MultiOccSwap.total_count.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.asymmetric_unit_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.is_valid.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.species_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidate.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.matching_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccCandidateList.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.atom_traj.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.new_occ.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccEvent.occ_transform.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.apply.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_info_final.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_info_initial.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_positions_cart.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_positions_cart_within.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.atom_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.cand_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.cand_size_by_candidate_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.candidate_list.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.choose_mol.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.choose_mol_by_candidate_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.clear_atom_info_final.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.convert.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_n_jumps.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_names.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_position_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.current_atom_species_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.initial_atom_position_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.initial_atom_species_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.initialize.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.linear_site_index_to_mol_id.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol_id.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol_id_by_candidate_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.mol_size.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccLocation.unique_atom_id.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.first.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.is_valid.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.reverse.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.second.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.sort.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.sorted.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwap.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccSwapCountMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.asym.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.from_species.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.mol_id.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransform.to_species.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.append.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.extend.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.events.OccTransformVector.pop.rst", "reference/libcasm/_autosummary/libcasm.monte.events.choose_canonical_swap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.choose_semigrand_canonical_multiswap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.choose_semigrand_canonical_swap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.is_allowed_canonical_swap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.make_canonical_swaps.rst", "reference/libcasm/_autosummary/libcasm.monte.events.make_multiswaps.rst", "reference/libcasm/_autosummary/libcasm.monte.events.make_semigrand_canonical_swaps.rst", "reference/libcasm/_autosummary/libcasm.monte.events.propose_canonical_event.rst", "reference/libcasm/_autosummary/libcasm.monte.events.propose_canonical_event_from_swap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_event.rst", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_event_from_multiswap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_event_from_swap.rst", "reference/libcasm/_autosummary/libcasm.monte.events.propose_semigrand_canonical_multiswap_event.rst", "reference/libcasm/_autosummary/libcasm.monte.events.swaps_allowed_per_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.from_linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.n_sites.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.n_unitcells.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.n_variable_sites.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.occ.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.occupation.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.set_occ.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.set_occupation.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.shape.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.to_linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingConfiguration.within.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.occ_delta_per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.per_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingFormationEnergy.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.n_independent_compositions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.occ_delta_per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.per_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingParamComposition.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.conditions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.configuration.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.properties.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingState.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingSystem.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingSystem.formation_energy_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.IsingSystem.param_composition_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.conditions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.data.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.default_json_sampling_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.default_sampling_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.formation_energy_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.param_composition_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.potential.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.run.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.system.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.exchange_potential.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.from_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.temperature.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.to_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.acceptance_rate.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.completion_check.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.json_samplers.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.json_sampling_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_accept.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_pass.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_reject.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_steps_per_pass.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.rejection_rate.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.reset.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.sample_weight.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.samplers.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.sampling_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.apply.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.propose.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.occ_delta_per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.occ_event_delta_per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.per_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_cpp.semigrand_canonical.default_write_status.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.from_linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.n_sites.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.n_unitcells.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.n_variable_sites.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.occ.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.occupation.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.set_occ.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.set_occupation.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.shape.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.to_linear_site_index.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingConfiguration.within.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.J.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.lattice_type.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.occ_delta_per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.per_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingFormationEnergy.state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.n_independent_compositions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.occ_delta_per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.per_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingParamComposition.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingState.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.IsingSystem.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.conditions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.data.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.formation_energy_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.param_composition_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.potential.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.run.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.system.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.exchange_potential.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.from_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.temperature.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.to_values.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.acceptance_rate.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.completion_check.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_accept.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_pass.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_reject.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_steps_per_pass.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.rejection_rate.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.reset.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.sample_weight.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.samplers.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.sampling_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.apply.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.occ_event.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.propose.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.conditions.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.formation_energy_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.occ_delta_per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.param_composition_calculator.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.per_supercell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.per_unitcell.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.set_state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.state.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.system.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.default_write_status.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.make_formation_energy_f.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.make_param_composition_f.rst", "reference/libcasm/_autosummary/libcasm.monte.ising_py.semigrand_canonical.make_potential_energy_f.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.acceptance_rate.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.completion_check.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.json_samplers.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.json_sampling_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_accept.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_pass.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_reject.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.n_steps_per_pass.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.rejection_rate.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.sample_weight.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.samplers.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.sampling_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.BasicOccupationMetropolisData.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.basic_occupation_metropolis.rst", "reference/libcasm/_autosummary/libcasm.monte.methods.metropolis_acceptance.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.calculated_precision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.mean.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.relative_precision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatistics.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.calculate.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.confidence.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.n_resamples.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.BasicStatisticsCalculator.weighted_observations_method.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.count_and_time_check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.count_check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.params.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.reset.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.results.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheck.time_check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.calc_statistics_f.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_base.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_begin.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_period.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_period_max.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.check_shift.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.cutoff_params.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.equilibration_check_f.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.log_spacing.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckParams.requested_precision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.clocktime.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.convergence_check_results.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.count.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.equilibration_check_results.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.full_reset.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.has_all_minimums_met.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.has_any_maximum_met.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.is_complete.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.n_samples.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.n_samples_at_convergence_check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.params.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.partial_reset.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.time.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CompletionCheckResults.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.N_samples_for_statistics.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.all_converged.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.individual_results.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceCheckResults.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.ConvergenceResultMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.atom_positions_cart.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.indices_after_pass.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.indices_after_time.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.initialize.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.jumps_per_position_sample.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.max_n_position_samples.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.n_complete_samples.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.n_position_samples.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.output_incomplete_samples.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.pass.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.step.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.stop_run_when_complete.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.time.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsData.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsDataParams.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsDataParams.copy.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsDataParams.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsDataParams.jumps_per_position_sample.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsDataParams.max_n_position_samples.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsDataParams.output_incomplete_samples.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsDataParams.stop_run_when_complete.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CorrelationsDataParams.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_clocktime.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_count.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_sample.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.max_time.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_clocktime.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_count.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_sample.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.min_time.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.CutoffCheckParams.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.component_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.count.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.fraction.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.max_size.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.max_size_exceeded.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.out_of_range_count.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.shape.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.size.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.sum.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.tol.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorFloatHistogram.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.component_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.count.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.fraction.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.max_size.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.max_size_exceeded.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.out_of_range_count.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.shape.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.size.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.sum.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.DiscreteVectorIntHistogram.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.N_samples_for_all_to_equilibrate.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.all_equilibrated.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.individual_results.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationCheckResults.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.EquilibrationResultMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.GenericSelectedEventFunction.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.GenericSelectedEventFunction.description.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.GenericSelectedEventFunction.function.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.GenericSelectedEventFunction.has_value_function.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.GenericSelectedEventFunction.name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.GenericSelectedEventFunction.order.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.GenericSelectedEventFunction.requires_event_state.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.begin.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.bin_coords.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.bin_width.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.count.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.density.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.is_log.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.max_size.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.max_size_exceeded.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.merge.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.out_of_range_count.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.size.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.sum.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Histogram1D.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.is_converged.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.requested_precision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.stats.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualConvergenceResult.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult.N_samples_for_equilibration.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult.is_equilibrated.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.IndividualEquilibrationResult.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogram1D.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogram1D.combined_histogram.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogram1D.histograms.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogram1D.insert.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogram1D.partition_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogram1D.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.bin_width.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.description.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.function.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.get_partition_function.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.initial_begin.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.is_log.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.max_size.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.partition.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.partition_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunction.requires_event_state.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunctionMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunctionMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunctionMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.PartitionedHistogramFunctionMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.abs_convergence_is_required.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.abs_precision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.rel_convergence_is_required.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.rel_precision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecision.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionConstructor.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionConstructor.set_precision.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.RequestedPrecisionMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.CUSTOM.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.LINEAR.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.LOG.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_METHOD.value.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.BY_PASS.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.BY_STEP.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.BY_TIME.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SAMPLE_MODE.value.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.append.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.component.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.component_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.n_components.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.n_samples.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.sample.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.sample_capacity.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.set_capacity_increment.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.set_sample_capacity.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.set_values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.shape.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.Sampler.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent.component_index.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent.component_name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerComponent.sampler_name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplerMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.append_to_json_sampler_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.append_to_sampler_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.base.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.begin.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.do_sample_time.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.do_sample_trajectory.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.extend_json_sampler_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.extend_sampler_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.json_sampler_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.period.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.remove_from_json_sampler_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.remove_from_sampler_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.sample_method.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.sample_mode.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.sampler_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.shift.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SamplingParams.stochastic_sample_period.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventData.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventData.continuous_1d_histograms.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventData.correlations_data.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventData.discrete_vector_float_histograms.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventData.discrete_vector_int_histograms.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventData.reset.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventData.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.collect.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.collect_hop_correlations.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.copy.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.correlations_data_params.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.do_not_collect.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.do_not_collect_hop_correlations.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.evaluate.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.from_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.function_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.get_parameters.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.reset.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctionParams.to_dict.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctions.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctions.continuous_1d_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctions.discrete_vector_float_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctions.discrete_vector_int_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.SelectedEventFunctions.generic_functions.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.component_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.description.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.function.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunction.shape.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.StateSamplingFunctionMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.component_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.description.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.function.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.has_value_function.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.max_size.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.requires_event_state.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.set_value_labels.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.shape.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.tol.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunction.value_labels.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunctionMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunctionMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunctionMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorFloatHistogramFunctionMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction.component_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction.description.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction.function.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction.has_value_function.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction.max_size.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction.name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction.requires_event_state.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction.set_value_labels.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction.shape.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunction.value_labels.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunctionMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunctionMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunctionMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.VectorIntHistogramFunctionMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.all_minimums_met.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.any_maximum_met.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.colmajor_component_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.component_convergence_check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.converge.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.convergence_check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.default_component_names.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.default_equilibration_check.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.get_n_samples.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSampler.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSampler.append.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSampler.clear.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSampler.n_samples.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSampler.sample.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSampler.sample_capacity.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSampler.set_sample_capacity.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSampler.set_values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSampler.to_list.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSampler.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSamplerMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSamplerMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSamplerMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonSamplerMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction.description.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction.function.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunction.name.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap.items.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap.keys.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.jsonStateSamplingFunctionMap.values.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.matrix_as_vector.rst", "reference/libcasm/_autosummary/libcasm.monte.sampling.scalar_as_vector.rst", "reference/libcasm/index.rst", "usage.rst", "usage/completion_check.rst", "usage/overview.rst"], "titles": ["Bibliography", "libcasm-monte", "Installation", "libcasm.monte", "MethodLog", "begin_lap", "begin_section_print_always", "begin_section_print_if_debug", "begin_section_print_if_quiet", "begin_section_print_if_standard", "begin_section_print_if_verbose", "decrease_indent", "end_section", "hide_clock", "increase_indent", "indent_str", "lap_time", "log_frequency", "logfile_path", "paragraph", "paragraph_justification", "paragraph_width", "print", "reset", "reset_to_stdout", "restart_clock", "section", "set_debug", "set_indent_space", "set_initial_indent_space", "set_paragraph_justification", "set_paragraph_width", "set_quiet", "set_standard", "set_verbose", "show_clock", "time_s", "verbatim", "RandomNumberEngine", "dump", "load", "seed", "seed_seq", "RandomNumberGenerator", "engine", "random_int", "random_real", "ValueMap", "boolean_values", "from_dict", "is_mismatched", "make_incremented_values", "matrix_values", "scalar_values", "to_dict", "vector_values", "libcasm.monte.events", "Atom", "n_jumps", "translation", "AtomLocation", "linear_site_index", "mol_comp", "mol_id", "AtomTraj", "delta_ijk", "from", "to", "AtomTrajVector", "append", "clear", "extend", "insert", "pop", "AtomVector", "append", "clear", "extend", "insert", "pop", "Conversions", "asym_size", "asym_to_b", "asym_to_unitl", "bijk_to_asym", "bijk_to_l", "bijk_to_unitl", "l_size", "l_to_asym", "l_to_b", "l_to_basis_cart", "l_to_basis_frac", "l_to_bijk", "l_to_cart", "l_to_frac", "l_to_ijk", "l_to_unitl", "lat_column_mat", "make_with_custom_asym", "make_with_custom_unitcell", "occ_size", "occ_to_species_index", "site_index_converter", "species_allowed", "species_index_to_atoms_size", "species_index_to_name", "species_index_to_occupant", "species_name_to_index", "species_size", "species_to_occ_index", "transformation_matrix_to_super", "unit_site_index_converter", "unit_transformation_matrix_to_super", "unitcell_index_converter", "unitl_size", "unitl_to_asym", "unitl_to_b", "unitl_to_bijk", "IntVector", "append", "clear", "count", "extend", "insert", "pop", "remove", "LongVector", "append", "clear", "count", "extend", "insert", "pop", "remove", "Mol", "asymmetric_unit_index", "component_id", "id", "linear_site_index", "mol_location_index", "species_index", "MolVector", "append", "clear", "extend", "insert", "pop", "MultiOccSwap", "from_dict", "reverse", "sort", "sorted", "swaps", "to_dict", "total_count", "OccCandidate", "asymmetric_unit_index", "from_dict", "is_valid", "species_index", "to_dict", "OccCandidateList", "from_dict", "index", "matching_index", "to_dict", "OccEvent", "atom_traj", "linear_site_index", "new_occ", "occ_transform", "OccLocation", "apply", "atom", "atom_info_final", "atom_info_initial", "atom_positions_cart", "atom_positions_cart_within", "atom_size", "cand_size", "cand_size_by_candidate_index", "candidate_list", "choose_mol", "choose_mol_by_candidate_index", "clear_atom_info_final", "convert", "current_atom_n_jumps", "current_atom_names", "current_atom_position_index", "current_atom_species_index", "initial_atom_position_index", "initial_atom_species_index", "initialize", "linear_site_index_to_mol_id", "mol", "mol_id", "mol_id_by_candidate_index", "mol_size", "unique_atom_id", "OccSwap", "first", "from_dict", "is_valid", "reverse", "second", "sort", "sorted", "to_dict", "OccSwapCountMap", "items", "keys", "values", "OccTransform", "asym", "from_species", "linear_site_index", "mol_id", "to_species", "OccTransformVector", "append", "clear", "extend", "insert", "pop", "choose_canonical_swap", "choose_semigrand_canonical_multiswap", "choose_semigrand_canonical_swap", "is_allowed_canonical_swap", "make_canonical_swaps", "make_multiswaps", "make_semigrand_canonical_swaps", "propose_canonical_event", "propose_canonical_event_from_swap", "propose_semigrand_canonical_event", "propose_semigrand_canonical_event_from_multiswap", "propose_semigrand_canonical_event_from_swap", "propose_semigrand_canonical_multiswap_event", "swaps_allowed_per_unitcell", "libcasm.monte.ising_cpp", "IsingConfiguration", "from_dict", "from_linear_site_index", "n_sites", "n_unitcells", "n_variable_sites", "occ", "occupation", "set_occ", "set_occupation", "shape", "to_dict", "to_linear_site_index", "within", "IsingFormationEnergy", "occ_delta_per_supercell", "per_supercell", "per_unitcell", "set_state", "IsingParamComposition", "n_independent_compositions", "occ_delta_per_supercell", "per_supercell", "per_unitcell", "set_state", "IsingState", "conditions", "configuration", "from_dict", "properties", "to_dict", "IsingSystem", "formation_energy_calculator", "param_composition_calculator", "libcasm.monte.ising_cpp.semigrand_canonical", "SemiGrandCanonicalCalculator", "conditions", "data", "default_json_sampling_functions", "default_sampling_functions", "formation_energy_calculator", "param_composition_calculator", "potential", "run", "state", "system", "SemiGrandCanonicalConditions", "exchange_potential", "from_dict", "from_values", "temperature", "to_dict", "to_values", "SemiGrandCanonicalData", "acceptance_rate", "completion_check", "json_samplers", "json_sampling_functions", "n_accept", "n_pass", "n_reject", "n_steps_per_pass", "rejection_rate", "reset", "sample_weight", "samplers", "sampling_functions", "to_dict", "SemiGrandCanonicalEventGenerator", "apply", "propose", "set_state", "SemiGrandCanonicalPotential", "occ_delta_per_supercell", "occ_event_delta_per_supercell", "per_supercell", "per_unitcell", "set_state", "default_write_status", "libcasm.monte.ising_py", "IsingConfiguration", "from_dict", "from_linear_site_index", "n_sites", "n_unitcells", "n_variable_sites", "occ", "occupation", "set_occ", "set_occupation", "shape", "to_dict", "to_linear_site_index", "within", "IsingFormationEnergy", "J", "lattice_type", "occ_delta_per_supercell", "per_supercell", "per_unitcell", "set_state", "state", "IsingParamComposition", "n_independent_compositions", "occ_delta_per_supercell", "per_supercell", "per_unitcell", "set_state", "IsingState", "IsingSystem", "libcasm.monte.ising_py.semigrand_canonical", "SemiGrandCanonicalCalculator", "conditions", "data", "formation_energy_calculator", "param_composition_calculator", "potential", "run", "state", "system", "SemiGrandCanonicalConditions", "exchange_potential", "from_dict", "from_values", "temperature", "to_dict", "to_values", "SemiGrandCanonicalData", "acceptance_rate", "completion_check", "n_accept", "n_pass", "n_reject", "n_steps_per_pass", "rejection_rate", "reset", "sample_weight", "samplers", "sampling_functions", "to_dict", "SemiGrandCanonicalEventGenerator", "apply", "occ_event", "propose", "set_state", "state", "SemiGrandCanonicalPotential", "conditions", "formation_energy_calculator", "occ_delta_per_supercell", "param_composition_calculator", "per_supercell", "per_unitcell", "set_state", "state", "system", "default_write_status", "make_formation_energy_f", "make_param_composition_f", "make_potential_energy_f", "libcasm.monte.methods", "BasicOccupationMetropolisData", "acceptance_rate", "completion_check", "json_samplers", "json_sampling_functions", "n_accept", "n_pass", "n_reject", "n_steps_per_pass", "rejection_rate", "sample_weight", "samplers", "sampling_functions", "to_dict", "basic_occupation_metropolis", "metropolis_acceptance", "libcasm.monte.sampling", "BasicStatistics", "calculated_precision", "mean", "relative_precision", "to_dict", "BasicStatisticsCalculator", "calculate", "confidence", "from_dict", "n_resamples", "to_dict", "weighted_observations_method", "CompletionCheck", "check", "count_and_time_check", "count_check", "params", "reset", "results", "time_check", "CompletionCheckParams", "calc_statistics_f", "check_base", "check_begin", "check_period", "check_period_max", "check_shift", "cutoff_params", "equilibration_check_f", "from_dict", "log_spacing", "requested_precision", "CompletionCheckResults", "clocktime", "convergence_check_results", "count", "equilibration_check_results", "full_reset", "has_all_minimums_met", "has_any_maximum_met", "is_complete", "n_samples", "n_samples_at_convergence_check", "params", "partial_reset", "time", "to_dict", "ConvergenceCheckResults", "N_samples_for_statistics", "all_converged", "individual_results", "to_dict", "ConvergenceResultMap", "items", "keys", "values", "CorrelationsData", "atom_positions_cart", "indices_after_pass", "indices_after_time", "initialize", "insert", "jumps_per_position_sample", "max_n_position_samples", "n_complete_samples", "n_position_samples", "output_incomplete_samples", "pass", "step", "stop_run_when_complete", "time", "to_dict", "CorrelationsDataParams", "copy", "from_dict", "jumps_per_position_sample", "max_n_position_samples", "output_incomplete_samples", "stop_run_when_complete", "to_dict", "CutoffCheckParams", "from_dict", "max_clocktime", "max_count", "max_sample", "max_time", "min_clocktime", "min_count", "min_sample", "min_time", "to_dict", "DiscreteVectorFloatHistogram", "component_names", "count", "fraction", "insert", "max_size", "max_size_exceeded", "out_of_range_count", "shape", "size", "sum", "to_dict", "tol", "values", "DiscreteVectorIntHistogram", "component_names", "count", "fraction", "insert", "max_size", "max_size_exceeded", "out_of_range_count", "shape", "size", "sum", "to_dict", "values", "EquilibrationCheckResults", "N_samples_for_all_to_equilibrate", "all_equilibrated", "individual_results", "to_dict", "EquilibrationResultMap", "items", "keys", "values", "GenericSelectedEventFunction", "description", "function", "has_value_function", "name", "order", "requires_event_state", "Histogram1D", "begin", "bin_coords", "bin_width", "count", "density", "insert", "is_log", "max_size", "max_size_exceeded", "merge", "out_of_range_count", "size", "sum", "to_dict", "IndividualConvergenceResult", "is_converged", "requested_precision", "stats", "to_dict", "IndividualEquilibrationResult", "N_samples_for_equilibration", "is_equilibrated", "to_dict", "PartitionedHistogram1D", "combined_histogram", "histograms", "insert", "partition_names", "to_dict", "PartitionedHistogramFunction", "bin_width", "description", "function", "get_partition_function", "initial_begin", "is_log", "max_size", "name", "partition", "partition_names", "requires_event_state", "PartitionedHistogramFunctionMap", "items", "keys", "values", "RequestedPrecision", "abs_convergence_is_required", "abs_precision", "from_dict", "rel_convergence_is_required", "rel_precision", "to_dict", "RequestedPrecisionConstructor", "set_precision", "RequestedPrecisionMap", "items", "keys", "values", "SAMPLE_METHOD", "CUSTOM", "LINEAR", "LOG", "name", "value", "SAMPLE_MODE", "BY_PASS", "BY_STEP", "BY_TIME", "name", "value", "Sampler", "append", "clear", "component", "component_names", "n_components", "n_samples", "sample", "sample_capacity", "set_capacity_increment", "set_sample_capacity", "set_values", "shape", "values", "SamplerComponent", "component_index", "component_name", "sampler_name", "SamplerMap", "items", "keys", "values", "SamplingParams", "append_to_json_sampler_names", "append_to_sampler_names", "base", "begin", "do_sample_time", "do_sample_trajectory", "extend_json_sampler_names", "extend_sampler_names", "json_sampler_names", "period", "remove_from_json_sampler_names", "remove_from_sampler_names", "sample_method", "sample_mode", "sampler_names", "shift", "stochastic_sample_period", "SelectedEventData", "continuous_1d_histograms", "correlations_data", "discrete_vector_float_histograms", "discrete_vector_int_histograms", "reset", "to_dict", "SelectedEventFunctionParams", "collect", "collect_hop_correlations", "copy", "correlations_data_params", "do_not_collect", "do_not_collect_hop_correlations", "evaluate", "from_dict", "function_names", "get_parameters", "reset", "to_dict", "SelectedEventFunctions", "continuous_1d_functions", "discrete_vector_float_functions", "discrete_vector_int_functions", "generic_functions", "StateSamplingFunction", "component_names", "description", "function", "name", "shape", "StateSamplingFunctionMap", "items", "keys", "values", "VectorFloatHistogramFunction", "component_names", "description", "function", "has_value_function", "max_size", "name", "requires_event_state", "set_value_labels", "shape", "tol", "value_labels", "VectorFloatHistogramFunctionMap", "items", "keys", "values", "VectorIntHistogramFunction", "component_names", "description", "function", "has_value_function", "max_size", "name", "requires_event_state", "set_value_labels", "shape", "value_labels", "VectorIntHistogramFunctionMap", "items", "keys", "values", "all_minimums_met", "any_maximum_met", "colmajor_component_names", "component_convergence_check", "converge", "convergence_check", "default_component_names", "default_equilibration_check", "get_n_samples", "jsonSampler", "append", "clear", "n_samples", "sample", "sample_capacity", "set_sample_capacity", "set_values", "to_list", "values", "jsonSamplerMap", "items", "keys", "values", "jsonStateSamplingFunction", "description", "function", "name", "jsonStateSamplingFunctionMap", "items", "keys", "values", "matrix_as_vector", "scalar_as_vector", "Reference (libcasm)", "Usage", "Completion Checks", "Overview"], "terms": {"ptdv23": [0, 1, 258, 341], "brian": 0, "puchala": [0, 1, 258, 341], "john": 0, "c": [0, 238, 273, 763, 764], "thoma": 0, "anton": 0, "van": [0, 1, 735, 763], "der": [0, 1], "ven": [0, 1], "casm": [0, 2, 3, 153, 160, 165, 207, 416, 763, 764], "mont": [0, 2, 4, 38, 43, 47, 57, 60, 64, 68, 71, 73, 74, 77, 79, 80, 118, 122, 124, 126, 130, 132, 134, 141, 144, 146, 147, 155, 161, 166, 167, 171, 172, 174, 175, 199, 208, 209, 210, 211, 212, 218, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 253, 254, 258, 260, 264, 266, 268, 270, 274, 276, 278, 282, 283, 285, 292, 293, 294, 297, 298, 299, 301, 307, 308, 309, 310, 311, 317, 319, 333, 340, 341, 347, 348, 350, 352, 356, 359, 366, 370, 378, 379, 382, 385, 390, 392, 395, 396, 397, 398, 400, 401, 402, 405, 406, 407, 408, 409, 414, 415, 417, 422, 429, 437, 449, 464, 469, 470, 471, 472, 473, 475, 478, 489, 497, 508, 522, 535, 540, 541, 542, 543, 544, 546, 547, 551, 566, 571, 575, 577, 580, 581, 584, 585, 593, 594, 595, 596, 597, 604, 606, 607, 608, 609, 610, 616, 622, 636, 640, 641, 642, 643, 644, 662, 669, 682, 687, 690, 693, 694, 695, 696, 697, 700, 701, 709, 710, 711, 712, 713, 716, 717, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 747, 748, 749, 750, 751, 753, 755, 756, 757, 758, 759, 760, 762, 763], "carlo": [0, 1, 3, 4, 47, 56, 147, 155, 161, 166, 167, 171, 172, 199, 224, 225, 226, 227, 228, 230, 231, 233, 236, 237, 253, 258, 264, 266, 268, 270, 273, 274, 276, 278, 282, 283, 292, 293, 294, 297, 298, 299, 301, 308, 309, 310, 317, 333, 340, 347, 349, 350, 352, 356, 366, 370, 378, 382, 390, 392, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 408, 409, 414, 415, 416, 437, 497, 544, 546, 547, 581, 584, 585, 616, 644, 687, 690, 697, 700, 701, 713, 716, 717, 751, 753, 762, 763], "calcul": [0, 1, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 270, 271, 272, 274, 278, 279, 280, 281, 282, 284, 285, 303, 311, 312, 313, 314, 315, 316, 317, 333, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 350, 353, 354, 355, 356, 357, 358, 359, 360, 375, 385, 387, 389, 393, 394, 395, 396, 397, 398, 414, 417, 418, 420, 422, 424, 428, 437, 438, 473, 544, 546, 547, 550, 551, 569, 575, 581, 584, 585, 586, 592, 598, 601, 644, 687, 690, 697, 700, 701, 704, 713, 716, 717, 720, 731, 733, 735, 751, 753, 762], "thermodynam": [0, 264, 265, 275, 282, 285, 347, 359, 764], "kinet": [0, 167, 171, 172, 644, 764], "properti": [0, 48, 50, 51, 52, 53, 55, 58, 59, 61, 62, 63, 65, 66, 67, 135, 136, 137, 138, 139, 140, 152, 154, 156, 159, 167, 168, 169, 170, 200, 204, 213, 214, 215, 216, 217, 242, 243, 244, 249, 264, 265, 266, 270, 271, 272, 275, 276, 279, 280, 281, 283, 284, 286, 289, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 347, 348, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 418, 419, 424, 426, 428, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 462, 465, 466, 467, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 492, 493, 494, 495, 499, 500, 501, 502, 503, 504, 505, 506, 536, 537, 538, 545, 546, 547, 548, 549, 550, 567, 568, 569, 572, 573, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 598, 599, 601, 602, 614, 615, 620, 621, 637, 638, 639, 647, 648, 649, 650, 653, 654, 657, 658, 659, 660, 661, 663, 664, 665, 666, 673, 678, 683, 684, 685, 686, 688, 689, 690, 691, 692, 698, 699, 700, 701, 702, 703, 704, 706, 707, 714, 715, 716, 717, 718, 719, 720, 722, 735, 752, 753, 754, 763, 764], "complex": 0, "multicompon": 0, "crystal": 0, "2023": 0, "arxiv": 0, "2309": 0, "11761": 0, "The": [1, 2, 15, 32, 33, 47, 49, 80, 98, 99, 108, 147, 148, 152, 153, 154, 157, 158, 160, 161, 162, 165, 171, 172, 192, 199, 200, 201, 202, 204, 207, 227, 228, 229, 230, 239, 249, 253, 254, 257, 258, 260, 275, 281, 282, 285, 286, 289, 292, 293, 294, 296, 301, 305, 308, 309, 312, 313, 316, 317, 333, 334, 335, 336, 339, 340, 341, 346, 351, 353, 354, 355, 356, 357, 359, 360, 363, 366, 368, 369, 371, 377, 379, 380, 381, 382, 383, 384, 386, 387, 389, 393, 395, 396, 397, 398, 400, 402, 404, 412, 414, 415, 422, 423, 430, 431, 432, 436, 437, 439, 441, 442, 443, 447, 473, 474, 475, 476, 477, 480, 484, 485, 487, 489, 493, 509, 512, 513, 515, 517, 518, 523, 526, 527, 529, 531, 532, 546, 551, 552, 554, 555, 557, 559, 561, 562, 563, 575, 576, 578, 579, 581, 584, 585, 586, 605, 622, 644, 657, 658, 670, 671, 676, 678, 679, 687, 690, 697, 700, 713, 716, 731, 733, 734, 735, 745, 753, 763, 764], "packag": [1, 764], "provid": [1, 42, 43, 148, 153, 157, 158, 160, 161, 162, 165, 171, 201, 202, 207, 227, 228, 230, 237, 354, 356, 389, 597, 644, 764], "us": [1, 38, 41, 42, 43, 80, 167, 170, 171, 212, 237, 239, 253, 278, 281, 282, 292, 309, 310, 319, 333, 335, 341, 346, 353, 354, 355, 356, 366, 368, 377, 382, 387, 389, 400, 402, 404, 412, 414, 422, 423, 424, 428, 437, 447, 465, 473, 544, 558, 581, 610, 622, 631, 636, 644, 653, 659, 670, 673, 678, 687, 697, 707, 713, 731, 733, 735, 737, 751, 763, 764], "build": [1, 764], "block": [1, 764], "simul": [1, 399, 414, 431, 436, 437, 454, 461, 462, 476, 477, 478, 487, 497, 502, 506, 546, 644, 678, 687, 690, 728, 729, 735, 751, 753, 763, 764], "thi": [1, 98, 99, 113, 147, 171, 172, 184, 224, 225, 226, 228, 229, 230, 231, 233, 236, 237, 258, 278, 312, 313, 333, 341, 354, 356, 357, 358, 382, 389, 393, 394, 422, 477, 479, 482, 492, 544, 546, 547, 561, 572, 576, 577, 581, 584, 585, 622, 636, 653, 659, 671, 673, 678, 687, 690, 697, 700, 701, 713, 716, 717, 735, 751, 753, 763, 764], "includ": [1, 99, 108, 147, 152, 155, 165, 224, 225, 226, 228, 229, 230, 231, 233, 236, 237, 264, 277, 278, 282, 303, 347, 356, 375, 378, 413, 423, 466, 537, 558, 731, 735, 764], "sampl": [1, 277, 278, 282, 292, 295, 296, 303, 304, 305, 356, 366, 375, 376, 377, 396, 397, 398, 400, 403, 404, 410, 411, 412, 413, 414, 417, 422, 423, 428, 429, 430, 431, 432, 436, 437, 440, 447, 449, 454, 458, 459, 461, 464, 465, 469, 473, 475, 476, 477, 478, 481, 483, 486, 489, 494, 495, 497, 501, 505, 508, 522, 535, 536, 540, 544, 551, 566, 571, 572, 575, 577, 581, 593, 597, 604, 605, 606, 610, 616, 622, 623, 625, 626, 627, 628, 630, 632, 634, 635, 636, 637, 639, 640, 644, 647, 648, 649, 650, 653, 654, 657, 658, 659, 660, 661, 662, 669, 671, 682, 687, 688, 690, 691, 693, 697, 698, 709, 713, 714, 724, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 746, 747, 751, 753, 754, 755, 759, 760, 763, 764], "class": [1, 3, 4, 38, 43, 47, 56, 57, 60, 64, 68, 74, 80, 118, 126, 134, 141, 147, 155, 161, 166, 171, 199, 208, 212, 218, 238, 239, 253, 258, 264, 270, 273, 274, 285, 292, 307, 308, 309, 311, 318, 319, 333, 341, 347, 348, 349, 350, 359, 366, 379, 385, 399, 400, 416, 417, 422, 429, 437, 449, 464, 469, 473, 489, 497, 508, 522, 535, 540, 544, 551, 566, 571, 575, 581, 593, 597, 604, 606, 610, 616, 622, 636, 640, 644, 662, 669, 682, 687, 693, 697, 709, 713, 724, 737, 747, 751, 755, 763, 764], "function": [1, 56, 68, 71, 73, 74, 77, 79, 80, 118, 122, 124, 126, 130, 132, 141, 144, 146, 218, 221, 223, 273, 277, 278, 282, 292, 296, 305, 349, 356, 366, 377, 396, 397, 398, 399, 400, 404, 412, 414, 416, 437, 438, 445, 473, 489, 544, 545, 547, 548, 549, 550, 581, 583, 585, 592, 604, 605, 610, 622, 644, 653, 659, 670, 676, 678, 679, 682, 683, 684, 685, 686, 687, 689, 697, 699, 701, 704, 705, 713, 715, 717, 720, 721, 731, 732, 733, 751, 752, 763], "equilibr": [1, 423, 437, 445, 453, 473, 535, 536, 537, 538, 571, 572, 573, 604, 605, 735, 762], "converg": [1, 416, 437, 448, 451, 464, 465, 466, 467, 468, 536, 537, 566, 567, 570, 572, 597, 598, 601, 604, 605, 622, 636, 731, 733, 735, 737, 763, 764], "check": [1, 49, 158, 202, 227, 282, 292, 356, 414, 416, 429, 431, 432, 435, 436, 437, 439, 440, 441, 442, 444, 445, 447, 449, 451, 453, 455, 456, 457, 459, 460, 464, 465, 466, 467, 468, 486, 489, 495, 497, 535, 536, 537, 538, 566, 570, 571, 573, 604, 622, 728, 729, 731, 732, 733, 735, 737, 762, 764], "statist": [1, 303, 375, 417, 422, 423, 428, 437, 438, 465, 569, 572, 644, 731, 733, 763], "gener": [1, 43, 165, 224, 225, 226, 231, 232, 233, 234, 235, 236, 282, 309, 356, 382, 414, 415, 544, 549, 644, 676, 763, 764], "result": [1, 49, 158, 202, 237, 282, 292, 352, 356, 366, 400, 414, 449, 451, 453, 464, 467, 468, 535, 538, 566, 570, 571, 636, 687, 688, 697, 698, 713, 714, 728, 729, 735, 763, 764], "io": 1, "supercel": [1, 80, 87, 99, 102, 113, 174, 175, 184, 239, 242, 243, 244, 249, 254, 255, 260, 261, 314, 319, 322, 323, 324, 328, 329, 336, 337, 343, 477, 616, 644], "index": [1, 73, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 106, 109, 115, 116, 117, 124, 132, 135, 140, 146, 148, 153, 155, 156, 157, 159, 160, 162, 164, 165, 169, 180, 188, 189, 190, 191, 193, 196, 201, 207, 213, 214, 217, 223, 227, 228, 230, 237, 252, 321, 331, 332, 478, 578, 581, 636, 637, 644], "convers": [1, 47, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 140, 148, 153, 157, 158, 160, 161, 162, 165, 171, 185, 201, 202, 207, 214, 217, 227, 228, 230, 237], "event": [1, 57, 60, 64, 68, 71, 73, 74, 77, 79, 80, 118, 122, 124, 126, 130, 132, 134, 141, 144, 146, 147, 155, 161, 165, 166, 171, 172, 174, 175, 199, 208, 209, 210, 211, 212, 218, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 282, 307, 308, 309, 310, 313, 356, 379, 380, 381, 382, 383, 384, 414, 415, 470, 471, 472, 541, 542, 543, 544, 546, 547, 550, 575, 581, 584, 585, 592, 594, 595, 596, 607, 608, 609, 616, 641, 642, 643, 644, 662, 663, 665, 666, 669, 670, 676, 678, 679, 682, 683, 684, 685, 686, 694, 695, 696, 697, 700, 701, 704, 710, 711, 712, 713, 716, 717, 720, 725, 726, 727, 748, 749, 750, 756, 757, 758, 764], "definit": [1, 258, 341, 764], "construct": [1, 36, 38, 43, 49, 80, 98, 99, 148, 157, 161, 162, 201, 229, 240, 267, 276, 282, 287, 288, 320, 330, 356, 361, 362, 364, 365, 414, 425, 446, 491, 498, 576, 577, 600, 677, 730, 734, 763], "select": [1, 544, 546, 547, 550, 581, 584, 585, 592, 662, 663, 665, 666, 669, 670, 676, 678, 679, 682, 683, 684, 685, 686, 697, 700, 701, 704, 713, 716, 717, 720], "method": [1, 4, 17, 38, 43, 47, 57, 60, 64, 68, 74, 80, 118, 126, 134, 141, 147, 155, 161, 166, 171, 199, 208, 212, 218, 239, 253, 258, 264, 270, 274, 275, 276, 281, 282, 285, 292, 307, 311, 317, 319, 333, 341, 347, 348, 350, 356, 359, 366, 379, 385, 395, 400, 414, 415, 416, 417, 422, 423, 428, 429, 430, 431, 432, 436, 437, 449, 464, 469, 473, 489, 497, 508, 522, 535, 540, 544, 551, 566, 571, 575, 581, 593, 597, 604, 606, 610, 616, 622, 636, 640, 644, 662, 669, 682, 687, 693, 697, 709, 713, 724, 737, 747, 751, 755, 763, 764], "ar": [1, 47, 49, 54, 80, 98, 99, 149, 158, 161, 174, 175, 202, 203, 227, 239, 250, 254, 258, 260, 269, 290, 291, 306, 312, 336, 341, 379, 383, 384, 422, 423, 426, 428, 430, 431, 432, 436, 437, 447, 466, 473, 497, 537, 544, 549, 551, 572, 575, 581, 586, 605, 622, 644, 670, 676, 687, 688, 697, 698, 705, 713, 714, 721, 732, 733, 734, 735, 737, 763, 764], "describ": [1, 166], "et": [1, 258, 341], "al": [1, 258, 341], "i": [1, 2, 47, 49, 68, 72, 73, 74, 78, 79, 80, 84, 85, 86, 92, 95, 99, 101, 103, 109, 117, 123, 124, 125, 131, 132, 133, 140, 141, 145, 146, 172, 192, 208, 218, 222, 223, 239, 241, 243, 249, 251, 257, 263, 282, 298, 316, 323, 329, 339, 341, 346, 354, 356, 357, 358, 370, 380, 382, 389, 393, 394, 397, 400, 406, 408, 414, 422, 423, 437, 447, 469, 484, 485, 486, 487, 489, 495, 497, 540, 544, 546, 547, 551, 552, 558, 567, 573, 575, 576, 577, 581, 584, 585, 586, 587, 588, 593, 598, 601, 605, 606, 616, 622, 636, 640, 644, 650, 653, 657, 658, 659, 661, 670, 671, 673, 675, 676, 678, 686, 687, 688, 690, 693, 697, 698, 700, 701, 709, 713, 714, 716, 717, 724, 733, 735, 747, 751, 753, 755, 763, 764], "part": [1, 13, 35, 764], "open": 1, "sourc": [1, 319, 320, 321, 325, 326, 327, 328, 330, 331, 332, 333, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 350, 356, 359, 361, 362, 364, 365, 366, 367, 373, 374, 378, 379, 380, 382, 383, 385, 388, 390, 391, 392, 395, 396, 397, 398, 415, 604, 605, 732], "softwar": 1, "which": [1, 6, 7, 8, 9, 10, 43, 80, 99, 168, 243, 257, 282, 323, 339, 341, 356, 379, 380, 383, 384, 414, 422, 423, 430, 431, 432, 436, 473, 477, 544, 549, 581, 604, 644, 671, 673, 676, 678, 735, 763, 764], "design": 1, "perform": [1, 147, 208, 423, 430, 431, 432, 436, 437, 445, 459, 544, 573, 644, 735, 762], "first": [1, 125, 133, 199, 202, 203, 205, 227, 282, 356, 544, 551, 552, 575, 581, 586, 670, 676, 735, 763], "principl": 1, "mechan": 1, "studi": 1, "multi": [1, 147, 151, 152, 225, 229, 234, 236], "compon": [1, 62, 104, 136, 319, 397, 437, 448, 508, 509, 522, 523, 572, 605, 622, 626, 627, 636, 638, 687, 688, 697, 698, 713, 714, 731, 732, 733, 734], "crystallin": 1, "solid": 1, "develop": 1, "group": [1, 98], "origin": [1, 763], "univers": 1, "michigan": 1, "current": [1, 12, 15, 26, 39, 58, 59, 135, 176, 177, 187, 188, 189, 192, 224, 225, 226, 231, 232, 233, 234, 235, 236, 239, 245, 246, 247, 248, 253, 275, 277, 278, 281, 282, 283, 308, 310, 325, 326, 327, 328, 347, 351, 353, 354, 356, 357, 379, 380, 381, 382, 384, 386, 387, 389, 390, 392, 393, 414, 544, 546, 547, 628, 630, 644, 649, 687, 690, 697, 701, 713, 717, 740, 742, 751, 753, 763, 764], "california": 1, "santa": 1, "barbara": 1, "For": [1, 237, 258, 341, 437, 447, 473, 482, 622, 644, 687, 697, 713, 731, 733, 763, 764], "more": [1, 147, 254, 260, 312, 336, 343, 486, 489, 495, 575, 631, 632, 743], "inform": [1, 167, 170, 171, 184, 212, 544], "see": [1, 2, 110, 112, 258, 341], "homepag": 1, "gnu": 1, "lesser": 1, "public": 1, "lgpl": 1, "pleas": 1, "file": [1, 4, 18, 23, 282, 317, 395, 763], "avail": 1, "github": 1, "instal": 1, "from": [1, 47, 49, 54, 64, 82, 83, 84, 85, 86, 88, 89, 92, 93, 94, 95, 96, 101, 105, 106, 107, 109, 110, 115, 116, 117, 125, 133, 148, 157, 162, 165, 174, 184, 193, 201, 224, 225, 226, 229, 231, 233, 236, 240, 250, 251, 267, 269, 282, 287, 288, 290, 291, 306, 312, 313, 320, 356, 357, 361, 362, 393, 396, 397, 398, 417, 422, 425, 428, 437, 446, 467, 491, 498, 538, 600, 610, 616, 655, 656, 663, 665, 666, 677, 683, 684, 685, 687, 731, 733, 751, 763], "pypi": 1, "contributor": 1, "usag": [1, 687, 732, 751, 763], "overview": [1, 762], "complet": [1, 282, 292, 294, 356, 368, 370, 402, 414, 429, 430, 431, 432, 436, 437, 439, 440, 441, 447, 449, 457, 460, 478, 481, 484, 485, 486, 489, 495, 497, 537, 604, 732, 762], "refer": [1, 246, 279, 280, 283, 544, 546, 547, 581, 584, 585, 687, 690, 697, 700, 701, 713, 716, 717, 741, 746, 751, 753], "bibliographi": 1, "built": [2, 764], "maco": 2, "x86_64": 2, "intel": 2, "arm64": 2, "appl": 2, "silicon": 2, "linux": 2, "aarch64": 2, "latest": 2, "releas": 2, "libcasm": [2, 4, 38, 43, 47, 57, 60, 64, 68, 71, 73, 74, 77, 79, 80, 118, 122, 124, 126, 130, 132, 134, 141, 144, 146, 147, 155, 161, 166, 171, 174, 175, 199, 208, 209, 210, 211, 212, 218, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 253, 254, 258, 260, 264, 270, 274, 285, 292, 307, 308, 309, 311, 317, 319, 333, 341, 347, 348, 350, 359, 366, 379, 385, 395, 396, 397, 398, 400, 414, 415, 417, 422, 429, 437, 449, 464, 469, 470, 471, 472, 473, 475, 478, 489, 497, 508, 522, 535, 540, 541, 542, 543, 544, 551, 566, 571, 575, 577, 581, 593, 594, 595, 596, 597, 604, 606, 607, 608, 609, 610, 616, 622, 636, 640, 641, 642, 643, 644, 662, 669, 670, 671, 675, 676, 682, 687, 693, 694, 695, 696, 697, 709, 710, 711, 712, 713, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 747, 748, 749, 750, 751, 755, 756, 757, 758, 759, 760, 763, 764], "can": [2, 165, 171, 282, 356, 473, 508, 513, 522, 527, 544, 546, 547, 559, 581, 584, 585, 622, 644, 687, 688, 690, 697, 698, 700, 701, 713, 714, 716, 717, 737, 751, 753, 763, 764], "pip": 2, "contribut": 2, "guid": 2, "tool": 3, "modul": [3, 238, 318], "self": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 54, 57, 60, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 155, 158, 160, 161, 163, 164, 165, 166, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 218, 219, 220, 221, 222, 223, 239, 241, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 269, 270, 274, 277, 278, 282, 285, 290, 291, 292, 293, 301, 302, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 356, 364, 382, 400, 401, 409, 413, 417, 420, 421, 422, 423, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 449, 454, 461, 463, 464, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 488, 489, 490, 496, 497, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 539, 540, 541, 542, 543, 544, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 570, 571, 574, 575, 576, 577, 578, 579, 580, 581, 590, 593, 594, 595, 596, 597, 603, 605, 606, 607, 608, 609, 610, 616, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 641, 642, 643, 644, 645, 646, 651, 652, 655, 656, 662, 667, 668, 669, 670, 671, 672, 674, 675, 676, 679, 680, 681, 682, 687, 693, 694, 695, 696, 697, 705, 708, 709, 710, 711, 712, 713, 721, 723, 724, 725, 726, 727, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 755, 756, 757, 758], "logfile_path": [4, 282, 356, 414], "str": [4, 18, 19, 20, 22, 26, 30, 37, 39, 40, 47, 48, 49, 52, 53, 55, 104, 105, 107, 187, 400, 508, 509, 522, 523, 544, 545, 548, 575, 579, 581, 583, 589, 591, 593, 605, 622, 626, 636, 638, 639, 640, 644, 645, 646, 651, 652, 653, 655, 656, 659, 670, 674, 676, 678, 679, 687, 688, 689, 691, 693, 697, 698, 699, 703, 705, 708, 709, 713, 714, 715, 719, 721, 723, 724, 730, 734, 747, 751, 752, 754, 755], "log_frequ": [4, 282, 356, 414], "floatnone": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 40, 41, 42, 43, 47, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 118, 119, 120, 122, 123, 125, 126, 127, 128, 130, 131, 133, 141, 142, 143, 144, 145, 149, 161, 172, 184, 192, 203, 218, 219, 220, 221, 222, 247, 248, 253, 257, 258, 263, 264, 282, 302, 308, 310, 316, 317, 327, 328, 333, 340, 341, 348, 356, 379, 384, 386, 393, 395, 414, 434, 437, 454, 461, 477, 478, 497, 512, 526, 544, 557, 561, 578, 597, 605, 622, 623, 624, 631, 632, 633, 644, 645, 646, 651, 652, 655, 656, 667, 670, 673, 676, 680, 687, 697, 705, 708, 713, 721, 723, 728, 729, 738, 739, 740, 742, 743, 744], "base": [4, 38, 43, 47, 57, 60, 64, 68, 74, 80, 118, 126, 134, 141, 147, 155, 161, 166, 171, 199, 208, 212, 218, 231, 232, 233, 234, 235, 236, 239, 253, 258, 264, 270, 274, 285, 292, 307, 311, 319, 333, 341, 347, 348, 350, 359, 366, 379, 385, 400, 414, 417, 422, 429, 430, 431, 432, 436, 437, 439, 449, 464, 469, 473, 489, 497, 508, 522, 535, 540, 544, 551, 558, 566, 571, 575, 581, 593, 597, 604, 606, 610, 616, 622, 636, 640, 644, 661, 662, 669, 682, 687, 693, 697, 709, 713, 724, 734, 735, 737, 747, 751, 755], "pybind11_object": [4, 38, 43, 47, 57, 60, 64, 68, 74, 80, 118, 126, 134, 141, 147, 155, 161, 166, 171, 199, 208, 212, 218, 239, 253, 258, 264, 270, 274, 285, 292, 307, 311, 400, 417, 422, 429, 437, 449, 464, 469, 473, 489, 497, 508, 522, 535, 540, 544, 551, 566, 571, 575, 581, 593, 597, 606, 610, 616, 622, 636, 640, 644, 662, 669, 682, 687, 693, 697, 709, 713, 724, 737, 747, 751, 755], "logger": 4, "statu": [4, 17, 282, 317, 356, 395, 414, 430, 431, 432, 436, 763], "constructor": [4, 38, 43, 47, 57, 60, 64, 68, 74, 80, 118, 126, 134, 141, 147, 155, 161, 166, 171, 199, 212, 218, 239, 253, 258, 264, 270, 274, 285, 292, 307, 311, 333, 341, 350, 356, 366, 379, 385, 400, 417, 422, 429, 437, 449, 464, 473, 489, 497, 508, 522, 535, 544, 551, 566, 571, 575, 581, 597, 622, 636, 644, 662, 669, 682, 687, 697, 713, 737, 751], "paramet": [4, 43, 47, 80, 98, 99, 147, 148, 153, 155, 157, 158, 160, 161, 162, 165, 171, 172, 192, 199, 201, 202, 207, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 253, 254, 257, 258, 260, 264, 270, 274, 282, 285, 292, 308, 309, 311, 312, 313, 316, 317, 333, 336, 339, 341, 346, 350, 356, 357, 359, 366, 379, 380, 382, 383, 385, 393, 395, 396, 397, 398, 400, 414, 415, 422, 423, 429, 430, 431, 432, 436, 437, 444, 454, 460, 461, 475, 476, 477, 478, 489, 497, 508, 512, 522, 526, 544, 551, 557, 561, 575, 578, 581, 597, 604, 605, 622, 636, 644, 647, 648, 654, 660, 669, 670, 671, 673, 676, 678, 679, 687, 697, 705, 713, 721, 728, 729, 730, 731, 732, 733, 734, 735, 751, 763, 764], "locat": [4, 18, 60, 61, 62, 63, 136, 137, 138, 139, 167, 171, 173, 194, 215, 216, 224, 225, 226, 231, 232, 233, 234, 235, 236], "log": [4, 17, 18, 23, 282, 317, 356, 395, 414, 430, 431, 432, 436, 437, 447, 551, 558, 575, 581, 587, 610, 644, 670, 763, 764], "output": [4, 18, 47, 477, 483, 489, 494, 581, 671, 737, 764], "option": [4, 26, 43, 47, 98, 99, 161, 172, 192, 253, 258, 264, 282, 333, 341, 356, 379, 414, 422, 428, 437, 452, 454, 459, 461, 462, 497, 499, 500, 501, 502, 503, 504, 505, 506, 512, 526, 544, 557, 578, 597, 605, 622, 644, 670, 673, 676, 687, 697, 705, 708, 713, 721, 723, 728, 729, 731, 733, 763], "how": [4, 17, 147, 152, 465, 536, 622, 764], "often": [4, 17], "second": [4, 16, 17, 36, 199, 202, 203, 205, 227, 735, 763], "methodlog": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 282, 317, 356, 395, 414, 430, 431, 432, 436, 763], "begin": [5, 6, 7, 8, 9, 10, 437, 440, 551, 553, 558, 575, 581, 586, 644, 670], "new": [5, 43, 169, 254, 260, 282, 312, 336, 356, 414, 477, 478, 623, 738], "lap": 5, "section": [6, 7, 8, 9, 10, 12, 13, 27, 32, 33, 34, 35], "alwai": [6, 544, 697, 713], "print": [6, 7, 8, 9, 10, 19, 24, 26, 27, 32, 33, 34, 37, 282, 356, 414, 544], "everi": [6, 282, 356, 414, 437, 447, 473, 477, 479, 485, 489, 492, 644, 671, 763], "verbosity_level": [6, 7, 8, 9, 10], "onli": [7, 8, 9, 10, 34, 38, 57, 60, 64, 134, 166, 212, 239, 307, 312, 313, 326, 417, 422, 423, 428, 449, 464, 473, 477, 483, 489, 494, 535, 544, 566, 571, 572, 605, 647, 660, 662, 669, 671, 673, 678, 682, 732, 737, 763], "debug": [7, 27, 32, 33, 34], "quiet": [8, 32], "standard": [9, 32, 33, 486, 489, 495, 622, 687, 697, 713, 764], "verbos": [10, 32, 33, 34], "decreas": [11, 644], "indent": [11, 14, 15, 19, 22, 28, 29, 37], "level": [11, 14, 28, 29, 422, 424, 597, 604, 605, 731, 732, 733, 735, 763], "end": [12, 69, 75, 119, 127, 142, 219], "do": [13, 50, 486, 489, 495, 653, 659, 737, 763], "show": [13, 35], "time": [13, 16, 36, 121, 129, 171, 172, 174, 175, 192, 253, 430, 431, 432, 436, 437, 450, 454, 461, 473, 476, 477, 478, 483, 484, 485, 489, 494, 497, 502, 506, 616, 644, 649, 658, 671, 728, 729, 763], "head": [13, 35], "increas": [14, 632, 743], "string": [15, 687, 688, 697, 698, 713, 714], "sinc": [16, 36, 576, 577], "begin_lap": 16, "text": [19, 22, 37], "line": [19, 37], "wrap": [19, 37], "justif": [19, 20, 30, 37], "return": [20, 21, 44, 45, 46, 50, 51, 73, 79, 103, 121, 124, 129, 132, 146, 148, 151, 153, 157, 158, 160, 162, 163, 164, 165, 174, 175, 176, 177, 186, 187, 188, 189, 198, 201, 202, 206, 207, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 241, 251, 254, 255, 256, 259, 260, 261, 262, 308, 309, 312, 313, 336, 337, 338, 342, 343, 344, 345, 378, 382, 396, 397, 398, 415, 423, 430, 431, 432, 436, 437, 475, 476, 490, 510, 511, 514, 520, 521, 524, 525, 528, 534, 544, 546, 547, 553, 556, 560, 564, 581, 584, 585, 605, 626, 634, 644, 670, 671, 672, 675, 676, 679, 682, 687, 690, 697, 700, 701, 713, 716, 717, 728, 729, 730, 732, 734, 735, 736, 745, 751, 753, 759, 760], "paragraph": [20, 21, 30, 31], "type": [20, 30, 47, 48, 49, 52, 53, 55, 58, 59, 61, 62, 63, 65, 66, 67, 135, 136, 137, 138, 139, 140, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 167, 168, 169, 170, 171, 174, 175, 179, 180, 182, 183, 195, 196, 200, 201, 202, 204, 207, 213, 214, 215, 216, 217, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 249, 253, 254, 260, 265, 266, 268, 271, 272, 286, 289, 298, 308, 309, 312, 313, 329, 333, 335, 336, 347, 356, 357, 378, 382, 396, 397, 398, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 423, 424, 426, 428, 430, 431, 432, 436, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 462, 474, 475, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 492, 493, 494, 495, 499, 500, 501, 502, 503, 504, 505, 506, 544, 545, 546, 547, 548, 549, 550, 575, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 598, 599, 601, 602, 605, 637, 638, 639, 647, 648, 649, 650, 653, 654, 657, 658, 659, 660, 661, 663, 664, 665, 666, 670, 671, 673, 675, 676, 678, 679, 683, 684, 685, 686, 688, 689, 690, 691, 692, 698, 699, 700, 701, 702, 703, 704, 706, 707, 714, 715, 716, 717, 718, 719, 720, 722, 728, 729, 730, 732, 734, 735, 745, 752, 753, 754, 763], "One": [20, 30, 253, 282, 298, 333, 335, 356, 370, 400, 406, 408, 414], "left": [20, 30, 423, 644, 763], "right": [20, 30, 423, 644, 763], "center": [20, 30], "full": [20, 30], "width": [21, 31, 551, 554, 558, 575, 581, 582, 670], "creat": [23, 253, 551, 575, 581, 588, 687, 697, 713, 751], "parent": 23, "directori": [23, 282], "necessari": [23, 477, 478, 483, 489, 494, 551, 575, 581, 586, 671, 764], "restart": 25, "intern": [25, 44, 430, 431, 432, 436, 763], "timer": [25, 26], "what": 26, "show_clock": 26, "bool": [26, 37, 48, 50, 103, 158, 171, 202, 227, 253, 415, 430, 431, 432, 436, 437, 447, 455, 456, 457, 477, 483, 486, 489, 494, 495, 514, 528, 544, 547, 550, 551, 558, 560, 575, 581, 587, 592, 598, 601, 644, 649, 650, 661, 671, 697, 701, 704, 713, 717, 720, 728, 729], "fals": [26, 171, 415, 430, 431, 432, 436, 437, 447, 466, 477, 483, 486, 489, 494, 495, 514, 528, 537, 551, 560, 567, 573, 575, 581, 587, 644, 671, 728, 729, 735, 763], "nice": 26, "format": [26, 253, 254, 255, 256, 257, 258, 270, 271, 274, 278, 279, 284, 311, 333, 336, 337, 338, 339, 340, 350, 353, 357, 385, 387, 393, 396], "header": 26, "valu": [26, 41, 42, 43, 46, 47, 49, 51, 80, 125, 133, 172, 174, 175, 192, 239, 246, 248, 254, 258, 260, 288, 312, 336, 341, 362, 420, 437, 447, 454, 461, 477, 483, 484, 485, 487, 489, 494, 497, 508, 512, 513, 514, 515, 517, 520, 522, 526, 527, 528, 529, 531, 536, 544, 547, 551, 555, 557, 558, 562, 572, 573, 575, 576, 577, 578, 581, 586, 599, 602, 610, 616, 622, 624, 625, 629, 633, 644, 657, 658, 670, 671, 687, 697, 700, 701, 705, 708, 713, 716, 717, 721, 723, 735, 736, 739, 741, 744, 745, 751, 763], "set": [27, 28, 29, 30, 31, 32, 33, 34, 82, 83, 247, 248, 257, 263, 275, 281, 302, 310, 316, 327, 328, 339, 341, 346, 351, 353, 354, 355, 357, 374, 383, 386, 387, 389, 390, 392, 393, 437, 465, 536, 576, 577, 604, 605, 624, 631, 633, 644, 653, 659, 670, 673, 674, 678, 679, 680, 732, 744, 763, 764], "mode": [27, 32, 33, 34, 616, 644], "all": [27, 54, 71, 77, 80, 99, 122, 130, 144, 149, 161, 221, 228, 230, 250, 258, 269, 290, 291, 306, 341, 422, 428, 437, 454, 455, 466, 475, 476, 477, 481, 483, 486, 489, 494, 495, 497, 536, 537, 572, 605, 625, 633, 667, 670, 671, 674, 680, 728, 732, 733, 735, 736, 744, 763], "indent_spac": 28, "int": [28, 29, 31, 41, 42, 45, 58, 61, 62, 63, 72, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 117, 119, 121, 123, 124, 125, 127, 129, 131, 132, 133, 135, 137, 138, 139, 140, 145, 146, 154, 155, 156, 159, 163, 164, 172, 173, 174, 175, 178, 179, 180, 183, 192, 193, 194, 195, 196, 197, 208, 213, 214, 215, 216, 217, 222, 223, 229, 237, 239, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 253, 254, 259, 260, 282, 292, 298, 312, 319, 321, 322, 323, 324, 325, 327, 332, 333, 335, 356, 366, 369, 370, 371, 372, 378, 400, 405, 406, 407, 408, 413, 414, 422, 426, 428, 431, 432, 436, 437, 440, 441, 452, 454, 458, 459, 461, 462, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 489, 492, 493, 497, 500, 501, 504, 505, 508, 513, 516, 517, 522, 527, 530, 531, 544, 549, 551, 554, 559, 563, 575, 578, 581, 585, 588, 590, 605, 610, 616, 622, 625, 627, 628, 629, 630, 631, 632, 634, 636, 637, 644, 670, 671, 676, 687, 692, 697, 702, 706, 713, 718, 722, 728, 729, 730, 731, 733, 734, 736, 741, 743], "number": [28, 29, 38, 39, 40, 41, 42, 43, 58, 81, 87, 100, 104, 108, 114, 121, 129, 154, 158, 161, 171, 178, 179, 180, 186, 197, 202, 208, 224, 225, 226, 229, 231, 232, 233, 234, 235, 236, 237, 242, 243, 244, 259, 282, 292, 297, 298, 299, 300, 309, 322, 323, 324, 342, 356, 366, 369, 370, 371, 372, 382, 397, 400, 405, 406, 407, 408, 414, 415, 422, 426, 430, 431, 432, 436, 437, 440, 452, 454, 458, 459, 461, 465, 473, 475, 477, 478, 480, 481, 482, 483, 484, 485, 486, 489, 493, 494, 495, 497, 500, 501, 504, 505, 508, 513, 514, 515, 517, 522, 527, 528, 529, 531, 549, 551, 555, 559, 560, 562, 563, 572, 575, 576, 577, 581, 586, 588, 627, 628, 644, 670, 671, 697, 702, 713, 718, 728, 729, 730, 731, 733, 735, 736, 740, 763, 764], "space": [28, 29, 437, 442, 443, 447, 551, 575, 581, 587, 610, 622, 644, 647, 648, 654, 657, 660, 670], "per": [28, 237, 254, 255, 256, 260, 261, 262, 278, 282, 292, 298, 300, 314, 315, 336, 337, 338, 343, 356, 366, 370, 372, 396, 398, 400, 406, 408, 414, 616, 644, 687], "initial_indent_spac": 29, "an": [29, 49, 69, 72, 75, 78, 99, 101, 104, 109, 119, 123, 125, 127, 131, 133, 142, 145, 157, 162, 182, 183, 201, 219, 222, 227, 258, 282, 308, 313, 333, 341, 356, 382, 414, 438, 477, 478, 479, 489, 492, 512, 526, 544, 551, 557, 575, 576, 577, 578, 581, 585, 588, 622, 671, 686, 687, 688, 690, 697, 698, 713, 714, 731, 733, 737, 753, 763, 764], "initi": [29, 42, 66, 171, 172, 175, 184, 190, 191, 282, 356, 551, 575, 576, 577, 581, 586, 670, 733, 763, 764], "befor": [29, 214, 497, 544, 581, 584, 585, 634, 697, 700, 713, 716, 763], "appli": [29, 282, 307, 310, 356, 379, 383, 384, 414, 437, 735, 763, 764], "justification_typ": 30, "arg0": [31, 40, 41, 42, 68, 74, 118, 126, 141, 148, 153, 157, 160, 162, 165, 173, 194, 201, 207, 218, 263, 316, 423, 429, 491, 498, 561, 674, 677, 735], "time_": 35, "restart_clock": 36, "indent_first_lin": 37, "true": [37, 50, 103, 158, 171, 172, 192, 202, 227, 253, 415, 430, 431, 432, 436, 437, 447, 455, 456, 466, 477, 483, 486, 489, 494, 495, 514, 528, 537, 544, 550, 551, 558, 560, 567, 573, 575, 581, 587, 592, 598, 601, 644, 649, 650, 661, 671, 697, 704, 713, 720, 728, 729, 735, 763], "without": [37, 274, 284, 311, 319, 328, 350, 358, 385, 394, 430, 473], "A": [38, 43, 47, 48, 52, 53, 55, 80, 98, 99, 155, 161, 171, 224, 225, 226, 228, 229, 230, 231, 233, 236, 237, 274, 279, 280, 283, 350, 396, 397, 398, 414, 423, 437, 438, 445, 448, 475, 476, 497, 544, 546, 547, 575, 577, 581, 584, 585, 591, 644, 679, 687, 688, 690, 697, 698, 700, 701, 705, 708, 713, 714, 716, 717, 721, 723, 730, 732, 735, 751, 753, 763, 764], "pseudo": [38, 41, 42, 43], "random": [38, 39, 40, 41, 42, 43, 224, 225, 226, 231, 232, 233, 234, 235, 236, 282, 309, 356, 382, 414, 415, 644, 763, 764], "engin": [38, 39, 40, 41, 42, 43, 282, 356, 414, 763], "std": [38, 42, 43, 254, 260, 735], "mt19937_64": 38, "default": [38, 57, 60, 64, 134, 166, 212, 239, 277, 282, 307, 356, 414, 417, 419, 437, 439, 440, 441, 442, 443, 447, 449, 464, 473, 535, 544, 566, 567, 571, 572, 573, 605, 622, 657, 658, 662, 669, 670, 682, 697, 713, 732, 734, 737, 763], "random_devic": [38, 43], "seed": [38, 42, 43], "randomnumberengin": [39, 40, 41, 42, 43, 44, 282, 356, 414, 763], "state": [39, 40, 253, 257, 258, 263, 264, 274, 281, 282, 284, 308, 310, 311, 316, 333, 339, 341, 346, 347, 350, 351, 353, 354, 356, 358, 379, 380, 383, 385, 386, 387, 389, 390, 392, 394, 414, 544, 546, 550, 581, 584, 585, 592, 604, 605, 687, 690, 697, 700, 704, 713, 716, 720, 732, 751, 753, 764], "psueudo": [39, 40], "save": [40, 171, 644, 649, 650], "singl": [41, 47, 54, 229, 250, 269, 282, 290, 291, 306, 319, 566, 571], "list": [42, 61, 62, 63, 68, 69, 71, 74, 75, 77, 80, 98, 99, 119, 121, 122, 125, 127, 129, 130, 133, 136, 137, 139, 141, 142, 144, 161, 163, 164, 171, 173, 187, 194, 215, 216, 218, 219, 221, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 253, 312, 474, 475, 476, 482, 508, 509, 510, 511, 516, 521, 522, 523, 524, 525, 530, 534, 553, 555, 556, 575, 577, 579, 581, 591, 605, 622, 626, 634, 644, 651, 652, 653, 659, 678, 687, 688, 692, 697, 698, 705, 706, 708, 713, 714, 721, 722, 723, 730, 734, 744, 745, 746, 764], "share": [43, 44, 358, 394], "uniformli": [43, 45, 46], "distribut": [43, 45, 46, 763], "integ": [43, 45, 49, 80, 99, 522, 666, 685, 713, 716], "real": 43, "If": [4, 43, 80, 161, 171, 172, 192, 282, 356, 414, 415, 437, 447, 477, 483, 486, 489, 494, 495, 544, 550, 551, 558, 575, 581, 588, 592, 597, 598, 601, 605, 622, 644, 649, 650, 661, 670, 671, 676, 687, 688, 697, 698, 704, 705, 713, 714, 720, 721, 728, 729, 732, 735, 763], "randomnumbergener": [44, 45, 46, 182, 183, 224, 225, 226, 231, 232, 233, 234, 235, 236, 309, 382, 414, 415], "maximum_valu": [45, 46], "uint64": 45, "0": [45, 46, 98, 99, 253, 258, 333, 341, 415, 419, 422, 423, 430, 431, 432, 436, 437, 454, 461, 477, 483, 485, 489, 494, 512, 526, 536, 544, 546, 551, 557, 572, 575, 578, 581, 584, 585, 612, 618, 622, 624, 644, 671, 687, 688, 690, 697, 698, 700, 713, 714, 716, 730, 732, 734, 735, 751, 753, 763], "doubl": 46, "point": [46, 49, 508, 520, 551, 575, 581, 588, 663, 665, 670, 683, 684, 697, 707, 713], "data": [47, 49, 80, 148, 153, 157, 160, 162, 165, 201, 207, 240, 267, 270, 282, 287, 292, 295, 304, 320, 348, 356, 361, 366, 376, 378, 400, 403, 411, 414, 425, 429, 430, 431, 432, 436, 437, 446, 473, 477, 483, 489, 494, 508, 522, 544, 546, 551, 575, 581, 586, 588, 600, 622, 636, 662, 663, 664, 665, 666, 667, 669, 670, 671, 673, 675, 676, 678, 679, 682, 683, 684, 685, 687, 697, 713, 731, 733, 737, 738, 745, 751, 763, 764], "structur": [47, 80, 429, 508, 522, 544, 551, 575, 636, 664, 667, 763, 764], "hold": [47, 190, 191, 270, 274, 284, 292, 295, 304, 311, 348, 350, 352, 358, 366, 376, 385, 394, 400, 403, 411, 414, 429, 508, 522, 551, 575, 581, 622, 662, 664, 682, 687, 697, 713, 751, 763], "note": [47, 51, 80, 208, 258, 282, 312, 313, 333, 341, 356, 437, 465, 466, 469, 497, 537, 540, 544, 581, 593, 597, 606, 622, 636, 640, 653, 659, 687, 693, 697, 709, 713, 724, 735, 737, 747, 751, 755], "should": [47, 80, 224, 225, 226, 229, 231, 233, 236, 239, 423, 544, 547, 581, 636, 639, 644, 670, 676, 678, 697, 701, 713, 717, 735, 763], "have": [47, 50, 80, 98, 99, 184, 423, 430, 431, 432, 436, 455, 456, 477, 483, 486, 489, 494, 495, 544, 644, 671, 676, 728, 735, 763], "same": [47, 50, 80, 98, 99, 423, 544, 605, 676, 732, 735, 736, 763], "kei": [47, 174, 175, 606, 636, 639, 670, 676, 731, 763], "even": 47, "differ": [47, 227, 312, 313, 473], "input": [47, 357, 393, 763, 764], "made": [47, 186, 229, 430, 431, 432, 436, 437, 576, 577, 735], "combin": [47, 54, 250, 269, 290, 291, 306, 576, 577], "dict": [47, 48, 49, 52, 53, 54, 55, 148, 153, 157, 160, 162, 165, 174, 175, 201, 207, 208, 240, 250, 267, 269, 287, 290, 291, 306, 320, 330, 361, 364, 378, 400, 413, 421, 425, 427, 446, 448, 463, 468, 469, 477, 488, 491, 496, 498, 507, 519, 533, 539, 540, 565, 570, 574, 580, 593, 600, 603, 606, 640, 663, 665, 666, 668, 671, 677, 679, 681, 683, 684, 685, 686, 693, 709, 724, 737, 745, 747, 755, 763], "attribut": [47, 49, 54, 57, 60, 64, 134, 147, 155, 166, 199, 212, 239, 250, 264, 269, 270, 274, 282, 285, 290, 291, 292, 302, 306, 319, 333, 350, 356, 357, 359, 366, 374, 379, 385, 393, 400, 417, 422, 437, 449, 464, 473, 489, 497, 535, 544, 566, 571, 581, 597, 610, 616, 636, 644, 662, 669, 682, 687, 697, 713, 751, 763], "valuemap": [48, 49, 50, 51, 52, 53, 54, 55, 264, 265, 268, 288, 291, 347, 362, 365, 764], "like": [48, 52, 53, 55, 68, 74, 141, 208, 218, 448, 469, 540, 577, 593, 606, 640, 663, 665, 666, 683, 684, 685, 686, 693, 709, 724, 737, 747, 755, 763], "object": [48, 52, 53, 55, 68, 74, 98, 99, 141, 185, 208, 218, 319, 333, 341, 347, 348, 350, 358, 359, 366, 379, 385, 394, 448, 469, 477, 479, 482, 492, 540, 544, 546, 547, 581, 584, 585, 593, 604, 606, 640, 653, 659, 670, 671, 676, 687, 690, 693, 697, 700, 701, 709, 713, 716, 717, 724, 747, 751, 753, 755], "booleanvaluemap": 48, "static": [49, 98, 99, 148, 157, 162, 201, 240, 267, 287, 288, 320, 361, 362, 364, 425, 446, 491, 498, 600, 677], "json": [47, 49, 54, 148, 157, 162, 201, 240, 250, 267, 269, 277, 282, 287, 290, 292, 295, 296, 306, 356, 400, 403, 404, 413, 414, 421, 425, 427, 446, 463, 468, 488, 491, 496, 498, 507, 519, 533, 539, 565, 570, 574, 580, 600, 603, 644, 653, 668, 677, 679, 681, 737, 738, 741, 744, 745, 746, 751], "python": [49, 54, 148, 153, 157, 160, 162, 165, 201, 207, 238, 240, 250, 267, 269, 287, 290, 291, 306, 318, 349, 413, 421, 425, 427, 446, 463, 468, 477, 488, 491, 496, 498, 507, 519, 533, 539, 565, 570, 574, 580, 600, 603, 668, 671, 677, 681, 751, 763, 764], "automat": [49, 622, 763], "item": [49, 54, 69, 71, 72, 73, 75, 77, 78, 79, 119, 122, 123, 124, 125, 127, 130, 131, 132, 133, 142, 144, 145, 146, 219, 221, 222, 223, 250, 269, 290, 291, 306, 687, 751, 763], "ad": [49, 175, 551, 575, 581, 588, 670, 676, 697, 713], "correspond": [49, 80, 98, 99, 241, 478, 636], "convert": [49, 148, 153, 157, 158, 160, 161, 162, 165, 171, 193, 201, 202, 207, 227, 228, 230, 237, 356, 378, 393, 751], "presenc": 49, "other": [49, 50, 98, 99, 253, 333, 544, 561, 764], "e": [49, 99, 239, 241, 249, 251, 329, 414, 422, 423, 575, 581, 616, 653, 659, 687, 688, 697, 698, 713, 714], "except": [47, 49, 454], "increment": [51, 65, 631, 735, 763], "n_increment": 51, "each": [51, 98, 99, 155, 159, 186, 187, 190, 191, 198, 237, 253, 254, 260, 312, 336, 430, 431, 432, 436, 473, 474, 477, 480, 482, 489, 493, 553, 554, 555, 575, 576, 577, 581, 591, 622, 644, 670, 671, 676, 687, 688, 697, 698, 713, 714, 731, 733, 763], "doe": [51, 99, 147, 228, 229, 230, 237, 413, 497, 764], "chang": [51, 254, 260, 311, 312, 313, 328, 336, 343, 385, 414, 415, 735, 763, 764], "boolean": [47, 51], "numpi": [52, 55, 80, 90, 91, 93, 94, 95, 97, 98, 99, 110, 112, 172, 176, 177, 192, 239, 241, 246, 248, 251, 260, 261, 262, 285, 423, 437, 474, 478, 484, 485, 487, 512, 521, 526, 534, 557, 623, 625, 629, 633, 635, 687, 697, 705, 708, 713, 721, 723, 731, 733, 735, 759, 760], "ndarrai": [52, 55, 59, 65, 80, 90, 91, 93, 94, 95, 97, 98, 99, 110, 112, 172, 176, 177, 192, 239, 241, 246, 248, 249, 251, 260, 261, 262, 285, 286, 319, 321, 326, 328, 331, 343, 344, 345, 359, 360, 423, 437, 474, 478, 484, 485, 487, 512, 521, 526, 534, 557, 623, 625, 629, 633, 635, 687, 697, 705, 708, 713, 721, 723, 731, 733, 735, 759, 760], "float64": [52, 55, 90, 91, 93, 94, 97, 176, 177, 260, 261, 262, 285, 343, 344, 345, 423, 437, 478, 512, 521, 623, 625, 629, 633, 635, 687, 697, 705, 708, 731, 733, 735, 759, 760], "m": [52, 55, 172, 176, 177, 192, 239, 241, 246, 248, 251, 260, 261, 262, 285, 423, 437, 478, 508, 512, 516, 521, 522, 526, 530, 534, 622, 623, 625, 633, 635, 687, 688, 692, 697, 698, 705, 706, 708, 713, 714, 721, 722, 723, 731, 733, 734, 735, 759, 760], "n": [52, 176, 177, 260, 261, 422, 423, 437, 447, 508, 516, 522, 530, 622, 629, 633, 635, 644, 687, 688, 692, 697, 698, 706, 713, 714, 722, 734, 735, 759, 763, 764], "matrixvaluemap": 52, "scalarvaluemap": 53, "repres": [54, 134, 140, 147, 153, 160, 165, 199, 207, 250, 269, 290, 291, 306, 413, 421, 427, 463, 468, 477, 488, 496, 507, 519, 533, 539, 565, 570, 574, 580, 603, 668, 671, 681, 687, 688, 697, 698, 713, 714, 737, 745, 764], "1": [55, 59, 65, 90, 91, 93, 94, 95, 98, 99, 147, 172, 192, 239, 241, 246, 248, 251, 253, 254, 258, 260, 261, 262, 282, 285, 309, 312, 319, 333, 335, 336, 341, 343, 356, 414, 415, 422, 423, 428, 437, 447, 478, 489, 512, 521, 526, 534, 551, 556, 557, 575, 578, 581, 613, 616, 617, 622, 623, 625, 629, 644, 671, 687, 688, 697, 698, 705, 708, 713, 714, 721, 723, 730, 731, 732, 733, 734, 735, 759, 760, 763], "vectorvaluemap": 55, "applic": [56, 108, 155, 159, 264, 268, 497, 502, 506, 644, 649, 670], "occup": [56, 61, 80, 98, 99, 100, 101, 104, 106, 109, 134, 138, 140, 147, 152, 155, 159, 161, 166, 167, 168, 169, 170, 171, 172, 182, 183, 192, 199, 200, 204, 215, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 239, 245, 247, 248, 258, 282, 325, 327, 328, 341, 380, 382, 400, 414, 764], "track": [56, 57, 167, 170, 430, 431, 432, 436, 763], "posit": [57, 72, 78, 123, 131, 145, 171, 174, 175, 176, 177, 187, 188, 189, 190, 191, 198, 222, 473, 475, 476, 477, 478, 479, 480, 481, 482, 486, 489, 492, 493, 495, 671], "individu": [57, 149, 154, 413, 477, 479, 489, 492, 570, 576, 577, 581, 671, 731], "period": [57, 59, 98, 252, 332, 437, 441, 473, 474, 477, 644, 661, 671, 763], "boundari": [57, 59, 473, 474, 477, 671], "atom": [58, 59, 60, 65, 74, 75, 78, 79, 104, 136, 171, 172, 174, 175, 176, 177, 178, 184, 186, 187, 188, 189, 190, 191, 192, 198, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 492, 493, 494, 495, 671], "jump": [58, 186, 473, 474, 477, 478, 483, 484, 485, 487, 489, 494, 671], "fraction": [59, 65, 80, 91, 94, 293, 301, 420], "coordin": [59, 65, 80, 84, 85, 86, 90, 91, 92, 93, 94, 117, 176, 177, 473, 474, 477, 478, 551, 553, 558, 575, 581, 586, 587, 671], "np": [59, 65, 172, 192, 241, 246, 249, 260, 285, 286, 319, 321, 331, 359, 437, 705, 708, 721, 723, 759, 760, 763], "shape": [59, 65, 80, 98, 99, 176, 177, 239, 319, 328, 508, 522, 622, 623, 635, 687, 697, 713, 734, 763], "3": [59, 65, 80, 90, 91, 93, 94, 95, 97, 98, 99, 110, 112, 176, 177, 474, 478, 732, 763], "dtype": [59, 65, 80, 98, 99, 239, 241, 246, 249, 260, 326, 328, 343, 344, 345], "int_": [59, 65], "specifi": [60, 64, 98, 99, 103, 140, 171, 180, 196, 274, 284, 311, 350, 358, 385, 394, 430, 431, 432, 436, 448, 544, 551, 575, 581, 586, 597, 598, 601, 604, 605, 610, 616, 636, 638, 731, 732, 763, 764], "specif": [60, 171, 763], "site": [60, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 109, 114, 117, 134, 135, 155, 158, 159, 161, 168, 169, 171, 179, 180, 193, 197, 202, 213, 227, 237, 242, 244, 245, 246, 247, 248, 253, 254, 258, 260, 282, 298, 309, 312, 319, 322, 324, 325, 327, 336, 341, 343, 356, 370, 400, 406, 408, 414, 616, 644], "molecul": [60, 80, 137, 171, 194], "atomloc": [61, 62, 63, 64, 66, 67], "configur": [61, 138, 193, 215, 239, 249, 258, 264, 268, 277, 282, 298, 319, 320, 330, 341, 347, 356, 357, 370, 393, 400, 406, 408, 644, 650, 751, 763, 764], "mol": [62, 63, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 173, 182, 183, 195, 196, 216, 687], "occloc": [63, 136, 137, 139, 167, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 212, 216, 224, 225, 226, 231, 232, 233, 234, 235, 236], "trajectori": [64, 167], "one": [64, 245, 247, 282, 298, 325, 327, 356, 370, 400, 406, 408, 414, 561, 575, 577, 581, 616, 670, 676, 763], "anoth": [64, 561, 575], "atomtraj": [65, 66, 67, 68, 69, 72, 73], "amount": [65, 437, 476, 763], "translat": 65, "final": [67, 171, 172, 174, 576, 577], "arg": [68, 71, 73, 74, 77, 79, 118, 122, 124, 126, 130, 132, 141, 144, 146, 218, 221, 223], "kwarg": [68, 71, 73, 74, 77, 79, 118, 122, 124, 126, 130, 132, 141, 144, 146, 218, 221, 223], "overload": [68, 71, 73, 74, 77, 79, 118, 122, 124, 126, 130, 132, 141, 144, 146, 218, 221, 223], "__init__": [68, 74, 118, 126, 141, 218], "_monte_ev": [68, 71, 73, 74, 77, 79, 118, 122, 124, 126, 130, 132, 141, 144, 146, 174, 175, 209, 210, 211, 218, 221, 223, 470, 471, 472, 541, 542, 543, 594, 595, 596, 607, 608, 609, 641, 642, 643, 694, 695, 696, 710, 711, 712, 725, 726, 727, 748, 749, 750, 756, 757, 758], "copi": [68, 74, 118, 126, 141, 218, 653, 659], "iter": [68, 71, 74, 77, 118, 122, 126, 130, 141, 144, 218, 221], "atomtrajvector": [69, 70, 71, 72, 73], "x": [69, 72, 75, 78, 119, 121, 123, 125, 127, 129, 131, 133, 142, 145, 219, 222, 258, 259, 260, 261, 262, 278, 341, 423, 653, 659, 763], "add": [69, 75, 119, 127, 142, 219, 253, 333, 581, 623, 670, 676, 697, 705, 713, 721, 738], "content": [70, 76, 120, 128, 143, 220], "l": [71, 77, 80, 83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 115, 116, 117, 122, 130, 144, 221, 763], "append": [71, 77, 122, 130, 144, 221, 645, 646, 651, 652, 653, 659, 687, 751, 763], "given": [71, 72, 77, 78, 122, 123, 130, 131, 144, 145, 172, 192, 221, 222, 251, 252, 544, 546, 547, 581, 584, 585, 622, 687, 690, 697, 700, 701, 713, 716, 717, 751, 753, 763, 764], "remov": [73, 79, 124, 132, 146, 174, 184, 223, 655, 656, 674], "last": [73, 79, 124, 132, 146, 223, 435, 544, 576, 577, 581, 584, 585, 697, 700, 713, 716], "atomvector": [75, 76, 77, 78, 79], "xtal_prim": [80, 98, 99], "prim": [80, 94, 97, 98, 99, 110, 763], "transformation_matrix_to_sup": [80, 98, 99], "int64": [80, 95, 98, 99, 110, 112, 526, 534, 713, 721, 723], "follow": [80, 735, 763], "shorthand": 80, "member": [80, 610, 616, 667], "name": [80, 105, 107, 187, 508, 509, 522, 523, 544, 549, 575, 579, 581, 591, 593, 605, 622, 626, 636, 638, 639, 640, 645, 646, 651, 652, 653, 655, 656, 659, 670, 674, 676, 678, 679, 687, 688, 693, 697, 698, 709, 713, 714, 724, 730, 734, 747, 751, 755, 763], "linear": [80, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 168, 193, 246, 248, 254, 260, 312, 336, 437, 441, 447, 610, 644, 657, 670], "particular": [80, 182, 183, 195, 196, 231, 232, 233, 234, 235, 236, 274, 284, 311, 350, 358, 385, 394, 544, 551, 575, 581, 586, 622, 625, 764], "b": [80, 82, 84, 85, 86, 89, 92, 116, 117, 575, 644], "sublattic": [80, 82, 83, 86, 89, 90, 91, 96, 98, 115, 116, 117], "unitl": [80, 115, 116, 117], "non": [80, 83, 86, 96, 111, 112, 115, 116, 117, 644], "primit": [80, 83, 86, 90, 91, 96, 99, 111, 112, 115, 116, 117], "unit": [80, 81, 82, 83, 84, 86, 88, 90, 91, 95, 96, 98, 99, 100, 101, 103, 109, 111, 112, 114, 115, 116, 117, 135, 155, 156, 158, 161, 171, 202, 213, 227, 237, 319, 323, 687], "cell": [80, 83, 86, 90, 91, 95, 96, 99, 111, 112, 114, 115, 116, 117, 237, 319, 323, 687], "when": [80, 171, 174, 175, 282, 356, 366, 400, 414, 422, 423, 426, 428, 437, 447, 459, 473, 477, 478, 483, 484, 485, 486, 487, 489, 494, 495, 497, 572, 576, 577, 631, 644, 649, 650, 671, 686, 697, 707, 763], "determin": [80, 98, 437, 473, 544, 547, 581, 697, 701, 707, 713, 717, 763], "appropri": 80, "symmetri": [80, 98, 99], "problem": 80, "between": [80, 447, 763], "mai": [80, 155, 303, 341, 346, 423, 430, 431, 432, 436, 544, 572, 597, 604, 673, 735, 763], "ijk": 80, "j": [80, 84, 85, 86, 92, 95, 117, 253, 333, 475, 476, 763], "k": [80, 84, 85, 86, 92, 95, 117, 423, 763], "indic": [80, 95, 98, 99, 155, 158, 168, 169, 241, 254, 260, 312, 321, 331, 336, 437, 475, 476, 544, 547, 605, 644, 687, 688, 697, 698, 701, 713, 714, 717, 735, 763], "respect": [80, 576, 577, 763], "lattic": [80, 94, 97, 98, 99, 238, 253, 318, 333, 335], "vector": [47, 80, 94, 97, 98, 99, 110, 138, 172, 192, 254, 259, 260, 508, 516, 522, 530, 622, 623, 626, 627, 636, 637, 665, 666, 684, 685, 687, 688, 692, 697, 698, 706, 713, 714, 722, 730, 734, 751, 759, 760], "bijk": [80, 84, 85, 86], "integr": [80, 84, 85, 86, 92, 117, 556], "asym": [80, 82, 83, 100, 101, 103, 109], "asymmetr": [80, 81, 82, 83, 84, 88, 98, 99, 100, 101, 103, 109, 115, 135, 155, 156, 158, 161, 171, 202, 213, 227, 237], "orbit": [80, 98, 99], "symmetr": 80, "equival": [47, 80, 252, 332, 415, 422, 590], "occ_index": [80, 101, 109], "": [80, 98, 99, 278, 351, 386, 581, 644, 670, 697, 713], "species_index": [80, 101, 103, 104, 105, 106, 107, 109, 155, 158, 164, 227], "orient": [80, 99, 108, 155, 159], "variant": [80, 108], "orientation_index": 80, "array_lik": [80, 98, 99, 239, 423, 438, 445, 735], "transform": [80, 98, 99, 110, 112, 149, 203, 213, 214, 215, 216, 217, 319], "matrix": [47, 80, 97, 98, 99, 110, 112, 319, 508, 516, 522, 530, 622, 635, 687, 688, 692, 697, 698, 706, 713, 714, 722, 734, 751, 759], "t": [80, 98, 99, 285, 289, 359, 363, 415, 497], "relat": [80, 98, 99, 575, 764], "superstructur": [80, 98, 99], "p": [80, 94, 97, 98, 99, 644, 763], "accord": [80, 98, 99, 282, 356, 414, 622, 763], "where": [80, 98, 99, 174, 175, 430, 431, 432, 436, 644, 735, 763], "matric": [80, 98, 99, 187, 188, 189, 190, 191, 198, 477, 483, 489, 494, 622, 671, 687, 697, 713], "column": [80, 97, 98, 99, 321, 331, 474, 478, 508, 516, 522, 530, 622, 625, 687, 688, 692, 697, 698, 706, 713, 714, 722, 730, 759], "get": [82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 117, 185, 237, 245, 246, 252, 271, 272, 277, 278, 325, 326, 332, 396, 397, 398, 433, 435, 465, 625, 629, 635, 653, 659, 679, 741, 746], "integralsitecoordin": [84, 85, 86, 92], "cartesian": [90, 93, 176, 177, 473, 474, 477, 478, 671], "r_": [90, 91, 93, 94], "cart": [90, 93], "belong": [90, 91], "frac": [91, 94, 423, 763], "rel": [94, 597, 601, 602, 605, 732, 763], "b_to_asym": 98, "longvector": [98, 99, 127, 128, 129, 130, 131, 132, 133, 136, 168, 186, 188, 189, 190, 191, 198, 254, 260, 312, 336, 343, 388], "lower": [98, 544, 676], "than": [98, 150, 644, 763], "distinct": [98, 99, 155], "map": [98, 99], "onto": [98, 99], "via": [98, 99], "oper": [98, 99, 422, 581, 687, 697, 713, 751], "allow": [98, 99, 100, 103, 147, 155, 159, 161, 163, 164, 224, 225, 226, 227, 228, 229, 230, 231, 233, 236, 237, 437, 605, 622, 670, 671, 675, 676, 732, 763, 764], "factor": [98, 422, 428, 473], "species_list": 99, "unit_transformation_matrix_to_sup": 99, "unitl_to_asym": 99, "system": [99, 270, 274, 278, 285, 311, 348, 350, 356, 359, 360, 385, 397, 473, 644, 687, 733, 763, 764], "fit": [99, 551, 575, 581, 586], "defin": [99, 140, 214, 217, 258, 341, 644], "sub": 99, "u": 99, "t_": 99, "must": [99, 135, 356, 357, 393, 430, 431, 432, 436, 473, 605, 644], "tile": 99, "tild": 99, "its": [100, 150, 477, 479, 489, 492, 671], "occupi": [101, 109], "siteindexconvert": [102, 111], "speci": [103, 105, 106, 107, 108, 109, 140, 155, 158, 159, 161, 167, 171, 189, 191, 202, 214, 217], "species_nam": 107, "superlattic": 110, "possibli": [111, 112], "make_with_custom_unitcel": 112, "unitcellindexconvert": 113, "intvector": [119, 120, 121, 122, 123, 124, 125, 169, 254, 260, 312, 336, 343, 388], "appear": [121, 129], "whose": [125, 133], "It": [125, 133, 147, 544, 644, 763, 764], "error": [125, 133, 424, 763], "consist": 135, "linear_site_index": [135, 193, 241, 245, 247, 251, 254, 260, 312, 321, 325, 327, 336, 343, 388], "molvector": [142, 143, 144, 145, 146], "swap": [147, 149, 151, 154, 199, 201, 206, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237], "occswapcountmap": [147, 152, 209, 210, 211], "multipl": [147, 237, 551, 572, 575, 581, 586, 605, 651, 652, 670, 671, 675, 676], "occswap": [147, 200, 201, 202, 203, 204, 205, 206, 207, 208, 224, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237], "cycl": 147, "occ": [147, 151, 152, 225, 229, 234, 236], "mani": [147, 152, 465, 536, 764], "multioccswap": [148, 149, 150, 151, 152, 153, 154, 225, 229, 234, 236], "arg1": [148, 157, 162, 201, 316, 423, 735], "represent": [148, 157, 162, 201], "multiswap": [148, 225, 229, 234], "so": [149, 150, 203, 205, 544, 546, 547, 551, 572, 575, 581, 584, 585, 586, 687, 690, 697, 700, 701, 713, 716, 717, 751, 753], "mutat": [150, 179, 180, 197, 205, 356], "compar": [150, 520, 549, 670], "less": [150, 644], "revers": [150, 224, 225, 226, 228, 229, 230, 231, 233, 236, 237], "jsonpars": [153, 160, 165, 207], "total": [154, 178, 179, 180, 197, 237, 242, 322, 370, 465, 510, 515, 524, 529, 555, 562, 735], "asymmetric_unit_index": [155, 158, 164], "pair": 155, "chosen": [155, 224, 225, 226, 231, 232, 233, 234, 235, 236, 644, 661], "distinguish": [155, 159], "molecular": [155, 159], "occcandid": [156, 157, 158, 159, 160, 161, 163, 179, 180, 182, 183, 195, 196, 199, 200, 204, 227], "candid": [157, 161, 163, 164, 165, 171, 179, 182, 195, 199, 200, 204, 227, 228, 230], "valid": [158, 202, 227], "instanc": [158, 161, 171, 202, 393, 438, 644, 731, 733, 763], "includingdistinct": 159, "store": [161, 167, 170, 172, 174, 175, 192, 208, 382, 464, 469, 473, 477, 479, 480, 482, 489, 492, 493, 508, 513, 522, 527, 535, 540, 559, 581, 593, 606, 622, 640, 670, 671, 687, 693, 697, 709, 713, 724, 737, 747, 751, 755, 763, 764], "custom": [161, 437, 544, 610, 644, 657, 670, 674, 679, 680, 763], "possibl": [161, 165, 237, 644], "occcandidatelist": [162, 163, 164, 165, 171, 181, 228, 230], "candidate_list": 162, "len": [163, 164, 687, 763], "match": [164, 430, 431, 432, 436, 605, 636, 639], "canon": [165, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 270, 273, 274, 278, 281, 282, 285, 286, 292, 307, 309, 311, 312, 313, 314, 315, 349, 350, 352, 355, 356, 359, 360, 366, 379, 385, 764], "semi": [165, 225, 226, 230, 233, 234, 235, 236, 237, 270, 273, 274, 278, 281, 282, 285, 286, 292, 307, 309, 311, 312, 313, 314, 315, 349, 350, 352, 355, 356, 359, 360, 366, 379, 385, 764], "grand": [165, 225, 226, 230, 233, 234, 235, 236, 237, 270, 273, 274, 278, 281, 282, 285, 286, 292, 307, 309, 311, 312, 313, 314, 315, 349, 350, 352, 355, 356, 359, 360, 366, 379, 385, 764], "modifi": [166, 168, 169, 282, 544, 653, 659], "occev": [167, 168, 169, 170, 172, 231, 232, 233, 234, 235, 236, 308, 309, 313, 380, 381, 382, 414], "updat": [167, 170, 171, 172, 212, 231, 232, 233, 234, 235, 236, 282, 317, 356, 380, 395, 414, 430, 431, 432, 436, 461, 671, 673, 675, 678, 764], "occtransformvector": [167, 170, 219, 220, 221, 222, 223], "being": [169, 213, 215, 216, 423, 430, 431, 432, 436, 731, 735], "occ_candidate_list": [171, 228, 230, 237], "update_speci": 171, "int32": [172, 192, 239, 241, 246, 248, 251, 325, 326, 328], "reflect": 172, "occur": [172, 475, 476, 544, 581, 584, 585, 697, 700, 713, 716], "access": [173, 181, 194, 544, 546, 547, 576, 577, 581, 584, 585, 622, 687, 690, 697, 700, 701, 713, 716, 717, 751, 753, 763], "id": [173, 174, 175, 194, 195, 196, 198], "atom_s": [176, 177], "candidate_index": [180, 183, 196], "random_number_gener": [182, 183, 224, 225, 226, 231, 232, 233, 234, 235, 236, 309, 382, 415], "stochast": [182, 183, 644, 661], "choos": [182, 183, 224, 225, 226], "fill": 192, "tabl": 192, "info": [172, 192], "variabl": [193, 244, 282, 298, 324, 342, 370, 400, 406, 408, 414, 764], "mol_id": 193, "location_index": [195, 196], "occswapcountmapp": [], "itemsview": [209, 470, 541, 594, 607, 641, 694, 710, 725, 748, 756], "keysview": [210, 471, 542, 595, 608, 642, 695, 711, 726, 749, 757], "valuesview": [211, 472, 543, 596, 609, 643, 696, 712, 727, 750, 758], "occtransform": [213, 214, 215, 216, 217, 218, 219, 222, 223], "after": [217, 282, 356, 414, 423, 437, 447, 473, 474, 475, 476, 478, 544, 763], "occ_loc": [224, 225, 226, 231, 232, 233, 234, 235, 236], "canonical_swap": [224, 228, 231], "both": [224, 225, 226, 227, 228, 229, 230, 231, 233, 236, 237, 597], "forward": [224, 225, 226, 228, 229, 230, 231, 233, 236, 237], "semigrand_canonical_multiswap": [225, 236], "semigrand_canonical_swap": [226, 230, 233, 237], "form": [227, 764], "is_allow": 227, "make": [228, 229, 230, 422, 426, 763, 764], "single_swap": 229, "max_total_count": 229, "uniqu": [174, 175, 198, 229, 508, 513, 514, 517, 522, 527, 528, 531], "maximum": [229, 437, 442, 456, 477, 480, 486, 489, 493, 495, 497, 499, 500, 501, 502, 508, 513, 514, 522, 527, 528, 551, 559, 560, 575, 576, 577, 581, 588, 670, 671, 697, 702, 713, 718, 729, 763], "up": 229, "propos": [231, 232, 233, 234, 235, 236, 282, 307, 308, 310, 313, 356, 379, 381, 383, 384, 414, 415, 616, 764], "interfac": [238, 764], "2d": [238, 239, 318, 329], "squar": [238, 253, 318, 333, 335], "Ising": [238, 239, 253, 254, 255, 256, 264, 270, 273, 307, 318, 319, 333, 334, 335, 336, 337, 338, 347, 348, 349, 379, 764], "model": [238, 239, 253, 254, 255, 256, 264, 270, 273, 307, 318, 319, 333, 334, 335, 336, 337, 338, 347, 349, 379, 735, 762], "ising_cpp": [239, 253, 254, 258, 260, 264, 270, 274, 285, 292, 307, 311, 317, 764], "fill_valu": [239, 319], "eigen": 239, "vectorxi": 239, "row": [239, 241, 249, 251, 629, 730], "col": [239, 241, 249, 251, 730], "support": [239, 319, 356], "isingconfigur": [240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 264, 266, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 347], "multi_index": [241, 251, 331], "unrol": [241, 251, 321, 331, 508, 516, 522, 530, 622, 623, 634, 636, 637, 687, 688, 692, 697, 698, 706, 713, 714, 722], "unitcel": [243, 256, 262, 278, 315, 338, 396, 398], "equal": [243, 298, 323, 370, 400, 406, 408, 423, 430, 431, 432, 436, 576, 577, 644, 735, 763], "n_site": [172, 192, 243], "arrai": [246, 248, 252, 332, 423, 474, 478, 687, 690, 697, 700, 713, 716, 735, 737, 753, 763], "const": [246, 741, 746], "new_occ": [247, 254, 260, 312, 327, 336, 343, 388], "2": [249, 253, 333, 335, 423, 437, 443, 611, 619, 644, 687, 688, 697, 698, 713, 714, 732, 735, 763], "dim": [252, 332], "multi_indexvalu": 252, "along": [252, 473, 670, 676, 763], "dimens": [252, 329, 622, 687, 697, 713], "lattice_typ": [253, 333], "use_nlist": 253, "isingst": [253, 257, 258, 263, 265, 266, 267, 268, 269, 282, 310, 316, 333, 339, 340, 341, 346, 356, 357, 379, 383, 384, 392, 393], "energi": [253, 254, 255, 256, 257, 258, 270, 271, 274, 278, 279, 281, 284, 311, 312, 313, 314, 315, 333, 334, 336, 337, 338, 339, 340, 350, 353, 355, 357, 385, 387, 393, 396, 398, 415, 575, 764], "implement": [253, 273, 333, 349, 385, 429, 763, 764], "could": [253, 333], "anisotrop": [253, 333], "bond": [253, 333], "interact": [253, 333, 334], "dimension": [253, 333, 335], "neighbor": [253, 764], "ahead": 253, "isingformationenergi": [254, 255, 256, 257, 270, 271, 272, 278, 334, 335, 336, 337, 338, 339, 340, 348, 353, 387], "_monte_ising_cpp": [254, 260], "__1": [254, 260], "long": [254, 260, 437, 536], "alloc": [254, 260], "due": [254, 260, 282, 312, 313, 336, 343, 356, 414, 415, 764], "flip": [254, 260, 309, 312, 336], "de": [254, 312, 313, 336, 735, 763], "per_supercel": [254, 312, 313, 336, 385, 415], "parametr": [258, 259, 260, 261, 262, 263, 270, 272, 274, 278, 280, 284, 285, 311, 341, 343, 344, 345, 346, 350, 354, 357, 359, 360, 385, 389, 393, 397, 764], "composit": [258, 259, 260, 261, 262, 263, 270, 272, 274, 278, 280, 284, 285, 311, 341, 342, 343, 344, 345, 346, 350, 354, 357, 359, 360, 385, 389, 393, 397, 687, 763, 764], "assum": [258, 341, 736], "ha": [172, 192, 258, 282, 341, 356, 414, 423, 473, 478, 514, 528, 544, 546, 547, 560, 576, 577, 581, 584, 585, 687, 690, 697, 700, 701, 713, 716, 717, 729, 735, 751, 753, 763], "detail": [258, 341, 435, 763], "isingparamcomposit": [259, 260, 261, 262, 263, 270, 278, 342, 343, 344, 345, 346, 348, 354, 389], "independ": [259, 342], "size": [259, 328, 423, 622, 627, 687, 690, 697, 713, 735, 753, 760], "vec": [259, 260, 261, 262], "cdot": 260, "d": 260, "ndx": 260, "condit": [264, 282, 285, 316, 347, 354, 356, 359, 361, 362, 364, 365, 389, 392, 393, 735, 763, 764], "formation_energy_calcul": [270, 348, 355, 396], "param_composition_calcul": [270, 285, 348, 355, 359, 360, 397], "isingsystem": [271, 272, 274, 311, 350, 358, 385, 394], "parameter": [271, 272, 274, 284, 311, 350, 358, 385, 394], "semigrand_canon": [274, 285, 292, 307, 311, 317, 350, 359, 366, 379, 385, 395, 396, 397, 398, 764], "semigrandcanonicalcalcul": [275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 317, 351, 352, 353, 354, 355, 356, 357, 358, 764], "run": [275, 276, 281, 292, 294, 302, 351, 352, 353, 354, 355, 357, 366, 368, 369, 371, 374, 386, 387, 389, 393, 400, 402, 414, 434, 437, 454, 477, 486, 489, 495, 622, 671, 763, 764], "sampler": [276, 375, 378, 410, 430, 431, 432, 436, 437, 448, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 640, 687, 731, 733, 736, 737, 751, 763], "completion_check": [276, 763], "n_pass": [276, 378, 413], "etc": [276, 437, 447, 508, 516, 522, 530, 544, 622, 687, 688, 692, 697, 698, 706, 713, 714, 722, 751, 763], "jsonstatesamplingfunctionmap": [277, 282, 292, 400, 404, 751, 756, 757, 758], "statesamplingfunctionmap": [278, 282, 292, 356, 366, 377, 400, 412, 446, 604, 687, 694, 695, 696, 732, 763], "param_composit": [278, 385, 397], "formation_energi": [278, 396, 732, 763], "potential_energi": [278, 398, 763], "semigrandcanonicalpotenti": [278, 312, 313, 314, 315, 316, 355, 386, 387, 388, 389, 390, 391, 392, 393, 394, 764], "sampling_funct": [282, 292, 356, 366, 400, 446, 604, 687, 732, 751, 763], "json_sampling_funct": [282, 292, 400, 751], "completion_check_param": [282, 292, 356, 366, 400, 604, 732], "completioncheckparam": [282, 292, 356, 366, 400, 429, 433, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 460, 604, 732, 763], "event_gener": [282, 356], "semigrandcanonicaleventgener": [282, 308, 309, 310, 356, 380, 381, 382, 383, 384, 764], "sample_period": [282, 356, 414, 763], "method_log": [282, 317, 356, 395, 414, 430, 431, 432, 436, 763], "random_engin": [282, 356, 414], "write_status_f": [282, 356, 414], "callabl": [282, 356, 414, 422, 437, 544, 581, 644, 687, 697, 713, 731, 733, 751], "On": [282, 356], "obtain": [282, 356, 397], "control": [282, 356, 366, 400, 437, 483, 486, 494, 495, 644, 669, 763, 764], "finish": [282, 356, 366, 400, 414], "accept": [47, 282, 293, 297, 356, 369, 401, 405, 414, 415], "pass": [282, 292, 298, 300, 356, 366, 370, 372, 400, 406, 408, 414, 431, 432, 437, 452, 454, 461, 473, 475, 478, 485, 497, 500, 504, 616, 644, 658, 728, 729, 763], "step": [282, 292, 293, 297, 298, 299, 300, 301, 356, 366, 370, 372, 400, 401, 405, 406, 407, 408, 409, 414, 431, 432, 437, 452, 454, 461, 473, 477, 478, 479, 489, 492, 497, 500, 504, 616, 644, 658, 671, 728, 729, 763], "write": [282, 317, 356, 395, 414, 430, 431, 432, 436, 763], "work": [282, 764], "10": [282, 319, 329, 356, 414, 437, 439, 558, 644, 735], "minut": [282, 356, 414], "signatur": [282, 356, 414, 437, 438, 445, 644], "def": [282, 356, 414, 437, 644, 687, 751], "f": [282, 356, 414, 438, 445, 644, 687, 751, 763], "mc_calcul": [282, 317, 356, 395, 396, 397, 398, 687, 763], "argument": [282, 312, 313, 356, 544, 546, 581, 584, 585, 687, 690, 697, 700, 713, 716, 751, 753], "been": [184, 282, 356, 414, 455, 456, 486, 489, 495, 514, 528, 544, 546, 547, 560, 576, 577, 581, 584, 585, 687, 690, 697, 700, 701, 713, 716, 717, 728, 729, 751, 753], "taken": [282, 356, 414, 437, 447, 458, 473, 475, 476, 572, 628, 644, 650, 728, 729, 736, 740], "default_write_statu": [282, 356], "summari": [282, 356, 413, 414], "stdout": [4, 24, 282, 356, 414], "temperatur": [285, 359, 414, 415], "exchange_potenti": [285, 354, 359, 385, 389], "ensembl": [285, 359, 763, 764], "exchang": [285, 286, 354, 359, 360, 389], "potenti": [285, 286, 316, 354, 357, 359, 360, 389, 393, 398, 414, 415, 764], "conjug": [285, 354, 359, 360, 389], "under": [285, 359, 360, 556, 764], "consider": [285, 359, 360], "semigrandcanonicalcondit": [286, 287, 288, 289, 290, 291, 306, 316, 351, 356, 360, 361, 362, 363, 364, 365, 386, 392, 393, 764], "n_steps_per_pass": [292, 366, 378, 400, 413], "metropoli": [292, 352, 366, 400, 414, 415, 616, 763, 764], "semigrandcanonicaldata": [293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 352, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378], "checker": [294, 368, 402], "reject": [299, 301, 371, 407, 409, 415], "dure": [302, 351, 353, 354, 355, 356, 357, 368, 369, 371, 374, 386, 387, 389, 393, 402, 678], "weight": [303, 375, 410, 413, 422, 423, 426, 428, 430, 431, 432, 436, 510, 512, 515, 524, 526, 529, 551, 555, 557, 562, 575, 578, 581, 588, 697, 713, 731, 733, 735, 763], "remain": [303, 375, 410, 763], "empti": [303, 375, 410], "unweight": [303, 375, 410, 763], "compat": [303, 375], "occ_ev": [308, 309, 313, 380, 382], "sign": 309, "occ_event_delta_per_supercel": 312, "occ_delta_per_supercel": 313, "screen": [317, 395], "ani": [317, 326, 328, 343, 344, 345, 395, 396, 397, 398, 456, 486, 489, 495, 497, 622, 623, 680, 687, 697, 713, 729, 764], "pure": 318, "ising_pi": [319, 333, 341, 347, 348, 350, 359, 366, 379, 385, 395, 396, 397, 398, 764], "tupl": [319, 321, 329, 331, 705, 708, 721, 723], "simpl": 319, "off": 319, "diagon": 319, "major": [321, 331, 508, 516, 522, 530, 622, 687, 688, 692, 697, 698, 706, 713, 714, 722, 759], "n_variable_sit": 323, "read": [326, 673, 678, 763], "view": 326, "10x10": 329, "isotrop": 333, "extend": 333, "also": [47, 184, 341, 346, 382, 644, 763, 764], "set_stat": 341, "expect": [354, 389, 622, 687, 697, 713, 764], "vector_valu": [354, 389], "usabl": [357, 393], "completioncheck": [368, 402, 430, 431, 432, 433, 434, 435, 436, 763], "samplermap": [376, 411, 430, 431, 432, 436, 636, 639, 641, 642, 643, 687, 733, 736, 747, 763], "exclud": [378, 733], "completion_check_result": [378, 413], "completioncheckresult": [378, 413, 435, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463], "n_accept": [378, 413], "n_reject": [378, 413], "acceptance_r": [378, 413], "rejection_r": [378, 413], "mcevent": [380, 382], "e_sgc": 385, "e_form": 385, "n_unitcel": 385, "per_unitcel": [396, 397, 398], "formation_energy_f": 396, "statesamplingfunct": [396, 397, 398, 688, 689, 690, 691, 692, 693], "n_independent_composit": 397, "param_composition_f": 397, "potential_energy_f": 398, "jsonstatesamplingfunct": [400, 752, 753, 754, 755], "basic": [400, 414, 417, 422], "basicoccupationmetropolisdata": [401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414], "rate": [401, 409, 575, 581, 644, 661], "jsonsamplermap": [403, 748, 749, 750, 751], "potential_occ_delta_per_supercell_f": 414, "propose_event_f": 414, "apply_event_f": 414, "algorithm": [414, 735, 763, 764], "rng": 414, "delta_potential_energi": 415, "beta": 415, "criteria": [415, 448, 467, 538, 636], "els": [415, 437, 447, 728, 729], "random_r": 415, "math": [415, 644], "exp": 415, "reciproc": 415, "eta": 415, "k_b": 415, "basicstatist": [418, 419, 420, 421, 422, 423, 427, 437, 438, 731, 733], "absolut": [418, 420, 597, 598, 599, 601, 605, 732, 763], "precis": [418, 420, 422, 423, 428, 437, 448, 466, 537, 567, 568, 597, 598, 599, 601, 602, 604, 605, 731, 732, 733, 735, 762], "mean": [418, 420, 422, 423, 428, 567, 568, 598, 599, 601, 644, 661, 735, 763], "confid": [422, 763], "95": 422, "weighted_observations_method": [422, 423], "n_resampl": 422, "10000": [422, 437, 442, 447, 508, 551, 575, 581, 697, 713], "seri": [422, 644, 763], "observ": [422, 423, 426, 428, 430, 431, 432, 436, 437, 438, 445, 622, 731, 733, 735, 763], "special": [422, 764], "call": [422, 576, 577, 581, 590, 605, 644, 670, 671, 675, 676, 687, 697, 713, 751, 763], "estim": [422, 423, 426, 428, 763], "fold": [422, 423, 763, 764], "wai": [422, 423, 763, 764], "varianc": [422, 428, 763], "directli": [422, 428, 633, 737, 744, 763], "autocorrel": [422, 428], "rho": [422, 423, 428, 763], "resampl": [422, 423, 426, 428, 735, 763], "autocovari": [422, 426, 763], "basicstatisticscalcul": [423, 424, 425, 426, 427, 428, 437, 438, 731, 763], "rang": [423, 518, 532, 551, 552, 553, 556, 564, 575, 581, 586, 735, 763], "depend": [423, 497, 763], "case": [423, 430, 431, 432, 436, 581, 735], "No": 423, "hat": [423, 763], "gamma": [423, 763], "_k": [423, 763], "sum": [423, 511, 525, 763], "_i": 423, "x_i": 423, "bar": [423, 763], "x_": [423, 763], "gamma_k": [423, 763], "gamma_0": [423, 763], "sigma": [423, 763], "1d": [423, 551, 575, 663, 683, 735], "sample_weight": [423, 430, 431, 432, 436, 437, 438, 445, 731, 733, 735, 763], "associ": [423, 430, 431, 432, 436, 735, 763], "treat": [423, 430, 431, 432, 436, 735], "stat": 423, "interv": [424, 644, 763], "param": [429, 454, 461, 763], "count": [430, 431, 432, 454, 461, 511, 518, 525, 532, 551, 556, 564, 575, 581, 588, 644, 697, 707, 713, 728, 729, 763], "cutoff": [430, 431, 436, 437, 444, 455, 456, 728, 729, 763], "contain": [430, 431, 432, 436, 474, 577, 663, 665, 666, 683, 684, 685, 686, 731, 733, 735, 763], "obsserv": [430, 431, 432], "otherwis": [430, 431, 432, 436, 466, 514, 528, 537, 551, 560, 575, 581, 587], "elaps": [430, 431, 432, 436, 437, 450, 454, 461, 497, 499, 503, 728, 729, 763], "clock": [430, 431, 432, 436, 450, 728, 729, 763], "is_complet": [430, 431, 432, 436], "next": [434, 454, 644], "requested_precis": [437, 445, 604, 731, 732, 733, 735], "requestedprecisionmap": [437, 448, 607, 608, 609, 731, 733], "cutoff_param": [437, 728, 729, 763], "cutoffcheckparam": [437, 444, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 728, 729], "calc_statistics_f": [437, 731, 733, 763], "equilibration_check_f": [437, 763], "requestedprecis": [437, 445, 448, 598, 599, 600, 601, 602, 603, 606, 731, 735], "individualequilibrationresult": [437, 445, 540, 572, 573, 574, 735, 763], "log_spac": 437, "check_begin": [437, 447], "check_period": [437, 447], "check_bas": [437, 447], "check_shift": [437, 447], "check_period_max": [437, 447], "request": [437, 448, 465, 466, 536, 537, 544, 567, 568, 572, 597, 598, 601, 604, 605, 644, 731, 732, 733, 735, 763], "forc": [437, 763], "keep": [437, 763], "meet": 437, "certain": [437, 475, 476], "minimum": [437, 455, 497, 503, 504, 505, 506, 728, 763], "clocktim": [437, 454, 461, 497, 499, 503, 728, 729, 763], "stop": [437, 486, 489, 495, 497, 671, 763], "met": [437, 455, 456, 486, 489, 495, 497, 728, 729, 735, 763], "reach": [437, 514, 528, 560, 763], "limit": [437, 576, 577, 763], "prevent": 437, "too": 437, "soon": 437, "default_equilibration_check": [437, 445, 763], "logarithm": [437, 439, 442, 443, 610, 644, 647, 657, 660], "th": [437, 447, 474, 484, 485, 487, 644, 763], "round": [437, 447, 644], "howev": [437, 447], "subsequ": [437, 447], "100": [437, 440, 441, 447, 489, 671, 763], "200": [437, 447], "300": [437, 447], "1000": [437, 447, 622, 763], "20000": [437, 447], "30000": [437, 447], "effect": 437, "earliest": [437, 440], "shift": [437, 443, 644], "expon": [437, 443], "logirithm": 447, "completiong": 447, "samplercompon": [448, 469, 540, 566, 571, 606, 637, 638, 639, 731, 733], "convergencecheckresult": [451, 465, 466, 467, 468, 733], "equilibrationcheckresult": [453, 473, 536, 537, 538, 539], "n_sampl": [454, 461, 624, 635, 728, 729], "reset": [24, 454, 461, 485], "outcom": 457, "conver": 459, "wa": [459, 473, 515, 529, 562], "most": [461, 764], "n_samples_at_convergence_check": 461, "equilibration_check_result": 461, "convergence_check_result": 461, "were": [465, 466, 536, 537], "requir": [466, 537, 544, 550, 581, 592, 598, 599, 601, 631, 697, 704, 713, 720, 763, 764], "find": [466, 537], "individualconvergenceresult": [469, 567, 568, 569, 570, 731], "convergenceresultmap": [470, 471, 472], "_monte_sampl": [475, 478, 577, 644], "individualconvergencecheckresult": [], "min_count": 497, "max_count": [497, 763], "min_tim": 497, "max_tim": 497, "min_sampl": 497, "max_sampl": 497, "min_clocktim": 497, "max_clocktim": 497, "don": 497, "took": 536, "equilibrationresultmap": [541, 542, 543], "individualequilibrationcheckresult": [], "involv": 572, "quantiti": [508, 509, 516, 522, 523, 530, 544, 572, 581, 589, 593, 604, 605, 622, 634, 636, 637, 639, 640, 653, 659, 670, 674, 678, 679, 680, 687, 688, 691, 692, 693, 697, 698, 703, 706, 709, 713, 714, 719, 722, 724, 732, 734, 737, 747, 751, 754, 755, 763], "ab": [597, 598, 599, 601, 605, 732, 735, 763], "p_": [597, 598, 599, 601, 602], "calc": [598, 601], "requst": 602, "_sampl": [604, 732], "dictionari": [174, 175, 604, 670, 676, 679, 732], "requestedprecisionconstructor": [605, 732], "component_nam": [508, 522, 605, 622, 636, 687, 697, 713, 730, 732, 734, 763], "component_index": [605, 625, 636, 638, 732], "By": [473, 605, 732], "To": [605, 670, 671, 675, 676], "chain": [605, 670, 671, 675, 676], "enum": [610, 616], "linearli": 610, "import": [610, 616, 687, 751, 763], "sample_method": [611, 612, 613, 614, 615, 644], "by_pass": [616, 644, 658], "degre": [616, 644], "freedom": [616, 644], "by_step": 616, "kmc": 616, "by_tim": 616, "sample_mod": [617, 618, 619, 620, 621, 644], "capacity_incr": [622, 631], "help": [622, 764], "re": [576, 577, 622, 763, 764], "underli": 622, "scalar": [47, 508, 516, 522, 530, 581, 622, 687, 692, 697, 706, 713, 722, 734, 751, 760], "approach": [622, 687, 697, 713, 763, 764], "order": [80, 98, 99, 544, 622, 676, 687, 688, 697, 698, 713, 714, 764], "done": [622, 687, 697, 713], "scalar_as_vector": [622, 687, 697, 713], "matrix_as_vector": [622, 687, 697, 713], "length": 622, "give": [174, 175, 622, 731, 733, 763], "element": [622, 735, 763], "much": [622, 735, 763], "resiz": [622, 632, 743], "whenev": 622, "out": [518, 532, 556, 564, 622, 733], "preserv": 624, "n_compon": [624, 635], "sample_index": [629, 741], "capac": [630, 631, 632, 742, 743], "push_back": 631, "sample_capac": [632, 743], "conserv": [632, 743], "flag": [172, 635], "f_contigu": 635, "sampler_nam": [636, 644, 646, 652, 656], "shared_ptr": [], "2589254117941673": 644, "custom_sample_at": 644, "stochastic_sample_period": 644, "do_sample_trajectori": 644, "do_sample_tim": 644, "fixtur": 644, "three": [644, 735, 763], "either": [644, 653, 659, 735, 763], "understand": 644, "dynam": 644, "especi": 644, "occasion": 644, "take": [644, 649, 763], "instead": [551, 575, 581, 588, 644, 653, 659, 697, 713], "determinist": 644, "highli": 644, "correl": [473, 489, 644, 664, 671, 673, 675], "probabilist": 644, "ln": 644, "greater": 644, "probabl": [556, 644], "until": [486, 489, 495, 644, 763], "poisson": 644, "process": 644, "r": 644, "pow": 644, "samplingparam": [645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661], "descript": [544, 581, 687, 688, 697, 698, 713, 714, 751], "exampl": [687, 731, 732, 733, 751, 762, 764], "clexmont": [670, 671, 675, 676, 687, 751, 764], "semigrandcanon": [687, 751], "setup": [687, 751], "composition_calcul": 687, "get_composition_calcul": 687, "mol_composition_f": 687, "mean_num_each_compon": 687, "get_occup": 687, "mol_composit": 687, "typic": [544, 546, 547, 581, 584, 585, 687, 688, 690, 697, 698, 700, 701, 713, 714, 716, 717, 751, 753], "lambda": [544, 546, 547, 581, 584, 585, 687, 690, 697, 700, 701, 713, 716, 717, 751, 753], "pointer": [544, 546, 547, 581, 584, 585, 687, 690, 697, 700, 701, 713, 716, 717, 751, 753], "exist": [474, 477, 581, 671, 687, 697, 713, 751], "__call__": [581, 687, 697, 713, 751], "held": [687, 697, 713, 751], "proper": [687, 690, 753], "mg": [687, 688, 697, 698, 713, 714], "va": [575, 687, 688, 697, 698, 713, 714], "o": [687, 688, 697, 698, 713, 714], "evalu": [544, 546, 547, 549, 581, 584, 585, 590, 678, 686, 690, 700, 716, 753, 763], "n_row": 730, "n_col": 730, "n_samples_for_statist": 731, "tail": 731, "fucntion": [731, 733], "helper": 732, "set_precis": 732, "001": 732, "parametric_composit": [732, 763], "corr": 732, "rpc": 732, "n_samples_for_equilibr": [733, 735, 763], "becaus": [515, 529, 562, 733, 763], "equilibrium": 733, "arg2": 735, "wall": [735, 763], "asta": [735, 763], "mater": 735, "sci": 735, "eng": 735, "2002": 735, "521": 735, "538": 735, "partit": [575, 576, 577, 578, 579, 581, 591, 735, 763], "equilibri": [735, 763], "stage": [735, 763], "start1": [735, 763], "start2": [735, 763], "start": [549, 551, 575, 581, 586, 735], "within": [735, 763], "consid": [735, 763], "approxim": [735, 763], "desir": [735, 763], "precsion": [735, 763], "mean1": [735, 763], "mean2": [735, 763], "prec": [735, 763], "addition": [735, 763], "need": [735, 737, 763, 764], "ensur": [735, 763], "side": [735, 763], "is_equilibr": [735, 763], "undefin": [735, 763], "weighted_observ": [735, 763], "w": [735, 763], "sum_i": 735, "weight_factor": [735, 763], "configuration_f": 751, "to_dict": 751, "configuration_json_f": 751, "json_sampl": 751, "easili": 751, "minimium": 763, "pars": 763, "random_number_engin": 763, "user": [473, 544, 763], "cluster": [763, 764], "expans": [763, 764], "ax": [763, 764], "composition_ax": 763, "formation_energy_clexul": 763, "formation_energy_coeff": 763, "systemtyp": 763, "formation_energy_clex_clexul": 763, "formation_energy_clex_coeff": 763, "would": [551, 575, 581, 588, 697, 713, 763], "montecarlocalculatortyp": 763, "abl": 763, "_function": 763, "make_formation_energy_f": 763, "make_potential_energy_f": 763, "make_parametric_composition_f": 763, "_f": 763, "quantity_nam": 763, "messag": 763, "path_to_logfil": 763, "n_step": 763, "i_sample_period": 763, "while": 763, "count_check": 763, "slow": 763, "down": 763, "excess": 763, "actual": 763, "longer": 763, "6e2": 763, "least": 763, "hr": 763, "averag": 763, "langl": 763, "rangl": 763, "approx": 763, "sum_l": 763, "x_l": 763, "normal": 763, "zero": 763, "larg": 763, "central": 763, "theorem": 763, "mathcal": 763, "stationari": 763, "lag": 763, "x_j": 763, "infty_": 763, "mathrm": 763, "cov": 763, "drawn": 763, "therefor": 763, "decai": 763, "infinit": 763, "introduc": 763, "discard": 763, "These": [544, 670, 676, 763], "altern": 763, "through": 763, "overal": 763, "two": [473, 544, 676, 763, 764], "search": 763, "smallest": 763, "_0": 763, "le": 763, "Then": 763, "regular": 763, "w_l": 763, "var": 763, "pm": 763, "sqrt": 763, "erf": 763, "analysi": 764, "test": 764, "effici": 764, "extens": 764, "written": 764, "frequent": 764, "primarili": 764, "namespac": 764, "throughout": 764, "discret": [508, 522, 665, 666, 670, 684, 685, 764], "roughli": 764, "divid": 764, "microst": 764, "tutori": 764, "purpos": 764, "handl": 764, "basi": [473, 489, 764], "coeffici": 764, "manag": 764, "clusterexpans": 764, "compositioncalcul": 764, "compositionconvert": 764, "orderparamet": 764, "samplingfixtur": 764, "runmanag": 764, "semigrand": 764, "nfold": 764, "flex": 764, "flexibl": 764, "addit": [551, 575, 581, 588, 697, 713, 764], "term": 764, "enabl": 764, "umbrella": 764, "quasi": 764, "sq": 764, "from_dict": 47, "update_atom": 171, "measur": 171, "diffus": 171, "save_atom_info": [171, 172, 192], "record": 171, "exact": 171, "deposit": 171, "dissolut": 171, "writeabl": 172, "atominfomap": [174, 175], "atom_info_initi": 174, "atominfo": [174, 175], "clear": [184, 680, 705, 721], "about": [184, 544, 662], "hop": [473, 489, 575, 664, 671, 673, 675], "jumps_per_position_sampl": [473, 474, 477, 484, 485, 487, 489, 671], "displac": 473, "subtract": 473, "restrict": 473, "correlationsdata": [474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 664], "i_sampl": [474, 484, 485, 487], "did": [474, 477, 671], "n_atom": [474, 477, 484, 485, 487], "had": [475, 476], "i_atom": [475, 476, 484, 485, 487], "max_n_position_sampl": [477, 484, 485, 487, 489, 671], "output_incomplete_sampl": [477, 489, 671], "enough": [477, 483, 489, 494, 671], "atom_id": 478, "n_jump": 478, "position_cart": 478, "whether": [483, 486, 494, 495], "incomplet": [483, 494], "continu": [486, 489, 495, 663, 670, 683], "collect": [486, 489, 495, 544, 547, 581, 662, 663, 665, 666, 669, 671, 673, 674, 675, 678, 679, 680, 683, 684, 685, 697, 701, 713, 717], "stop_run_when_complet": [489, 671], "correlationsdataparam": [490, 491, 492, 493, 494, 495, 496, 673], "tol": [508, 670, 697], "1e": [508, 697], "05": [508, 697], "max_siz": [508, 515, 522, 529, 551, 562, 575, 581, 670, 697, 713], "histogram": [508, 512, 517, 522, 526, 531, 551, 554, 556, 557, 558, 561, 563, 575, 576, 578, 581, 663, 665, 666, 697, 702, 707, 708, 713, 718, 723], "toler": [508, 520, 670, 697, 707], "comparison": [508, 697, 707], "discretevectorfloathistogram": [509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 665, 697], "bin": [515, 518, 529, 532, 551, 552, 553, 554, 555, 558, 559, 560, 562, 563, 564, 575, 576, 577, 581, 582, 586, 587, 588, 670, 697, 702, 713, 718], "exceed": [515, 529, 562], "discretevectorinthistogram": [523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 666, 697, 713], "requires_event_st": [544, 581, 697, 713], "has_value_funct": [544, 697, 713], "noth": [544, 546], "thei": [544, 676], "lexicograph": [544, 549, 676], "genericselectedeventfunct": [545, 546, 547, 548, 549, 550, 686], "lowest": 549, "break": 549, "ti": 549, "initial_begin": [551, 575, 581, 670], "bin_width": [551, 552, 575, 581, 586, 670], "is_log": [551, 575, 581], "adjust": [551, 575, 581, 586], "encount": [551, 575, 581, 586], "scale": [551, 575, 581, 587], "caus": [551, 575, 581, 588, 697, 713], "exce": [551, 575, 581, 588, 697, 713], "out_of_range_count": [551, 575, 581, 588, 697, 713], "partitionedhistogram1d": [551, 576, 577, 578, 579, 580, 581, 588, 663], "histogram1d": [552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 576, 577], "area": 556, "partition_nam": [575, 578, 581], "partiion_nam": 575, "separ": 575, "activ": 575, "merg": 576, "insert": [576, 577], "attempt": [576, 577], "histogram1dvector": 577, "get_partition_funct": [581, 590], "mutual": 581, "exclus": 581, "common": 581, "partitionedhistogramfunct": [582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 683], "py": 590, "partitionedhistogramfunctionmap": [594, 595, 596, 683], "json_sampler_nam": [644, 645, 651, 655], "ii": [653, 659], "entir": [653, 659], "y": [653, 659], "z": [653, 659], "append_to_json_sampler_nam": 653, "remove_from_json_sampler_nam": 653, "extend_json_sampler_nam": 653, "append_to_sampler_nam": 659, "remove_from_sampler_nam": 659, "extend_sampler_nam": 659, "selectedeventdata": [663, 664, 665, 666, 667, 668], "partitionedhistogram1dmap": 663, "discretevectorfloathistogrammap": 665, "discretevectorinthistogrammap": 666, "selectedeventfunctionparam": [668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681], "selected_event_data_param": [670, 676], "function_nam": [670, 676], "selectedeventfunct": [670, 676, 683, 684, 685, 686], "collect_hop_correl": 673, "do_not_collect_hop_correl": 673, "do_not_collect": 678, "vectorfloathistogramfunct": [684, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709], "vectorfloathistogramfunctionmap": [684, 710, 711, 712], "vectorinthistogramfunct": [685, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724], "vectorinthistogramfunctionmap": [685, 725, 726, 727], "genericselectedeventfunctionmap": 686, "value_label": [705, 721], "label": [705, 708, 721, 723], "well": 737, "jsonsampl": [738, 739, 740, 741, 742, 743, 744, 745, 746, 747]}, "objects": {"libcasm": [[3, 0, 0, "-", "monte"]], "libcasm.monte": [[4, 1, 1, "", "MethodLog"], [38, 1, 1, "", "RandomNumberEngine"], [43, 1, 1, "", "RandomNumberGenerator"], [47, 1, 1, "", "ValueMap"], [56, 0, 0, "-", "events"], [238, 0, 0, "-", "ising_cpp"], [318, 0, 0, "-", "ising_py"], [399, 0, 0, "-", "methods"], [416, 0, 0, "-", "sampling"]], "libcasm.monte.MethodLog": [[5, 2, 1, "", "begin_lap"], [6, 2, 1, "", "begin_section_print_always"], [7, 2, 1, "", "begin_section_print_if_debug"], [8, 2, 1, "", "begin_section_print_if_quiet"], [9, 2, 1, "", "begin_section_print_if_standard"], [10, 2, 1, "", "begin_section_print_if_verbose"], [11, 2, 1, "", "decrease_indent"], [12, 2, 1, "", "end_section"], [13, 2, 1, "", "hide_clock"], [14, 2, 1, "", "increase_indent"], [15, 2, 1, "", "indent_str"], [16, 2, 1, "", "lap_time"], [17, 2, 1, "", "log_frequency"], [18, 2, 1, "", "logfile_path"], [19, 2, 1, "", "paragraph"], [20, 2, 1, "", "paragraph_justification"], [21, 2, 1, "", "paragraph_width"], [22, 2, 1, "", "print"], [23, 2, 1, "", "reset"], [24, 2, 1, "", "reset_to_stdout"], [25, 2, 1, "", "restart_clock"], [26, 2, 1, "", "section"], [27, 2, 1, "", "set_debug"], [28, 2, 1, "", "set_indent_space"], [29, 2, 1, "", "set_initial_indent_space"], [30, 2, 1, "", "set_paragraph_justification"], [31, 2, 1, "", "set_paragraph_width"], [32, 2, 1, "", "set_quiet"], [33, 2, 1, "", "set_standard"], [34, 2, 1, "", "set_verbose"], [35, 2, 1, "", "show_clock"], [36, 2, 1, "", "time_s"], [37, 2, 1, "", "verbatim"]], "libcasm.monte.RandomNumberEngine": [[39, 2, 1, "", "dump"], [40, 2, 1, "", "load"], [41, 2, 1, "", "seed"], [42, 2, 1, "", "seed_seq"]], "libcasm.monte.RandomNumberGenerator": [[44, 2, 1, "", "engine"], [45, 2, 1, "", "random_int"], [46, 2, 1, "", "random_real"]], "libcasm.monte.ValueMap": [[48, 3, 1, "", "boolean_values"], [49, 2, 1, "", "from_dict"], [50, 2, 1, "", "is_mismatched"], [51, 2, 1, "", "make_incremented_values"], [52, 3, 1, "", "matrix_values"], [53, 3, 1, "", "scalar_values"], [54, 2, 1, "", "to_dict"], [55, 3, 1, "", "vector_values"]], "libcasm.monte.events": [[57, 1, 1, "", "Atom"], [60, 1, 1, "", "AtomLocation"], [64, 1, 1, "", "AtomTraj"], [68, 1, 1, "", "AtomTrajVector"], [74, 1, 1, "", "AtomVector"], [80, 1, 1, "", "Conversions"], [118, 1, 1, "", "IntVector"], [126, 1, 1, "", "LongVector"], [134, 1, 1, "", "Mol"], [141, 1, 1, "", "MolVector"], [147, 1, 1, "", "MultiOccSwap"], [155, 1, 1, "", "OccCandidate"], [161, 1, 1, "", "OccCandidateList"], [166, 1, 1, "", "OccEvent"], [171, 1, 1, "", "OccLocation"], [199, 1, 1, "", "OccSwap"], [208, 1, 1, "", "OccSwapCountMap"], [212, 1, 1, "", "OccTransform"], [218, 1, 1, "", "OccTransformVector"], [224, 4, 1, "", "choose_canonical_swap"], [225, 4, 1, "", "choose_semigrand_canonical_multiswap"], [226, 4, 1, "", "choose_semigrand_canonical_swap"], [227, 4, 1, "", "is_allowed_canonical_swap"], [228, 4, 1, "", "make_canonical_swaps"], [229, 4, 1, "", "make_multiswaps"], [230, 4, 1, "", "make_semigrand_canonical_swaps"], [231, 4, 1, "", "propose_canonical_event"], [232, 4, 1, "", "propose_canonical_event_from_swap"], [233, 4, 1, "", "propose_semigrand_canonical_event"], [234, 4, 1, "", "propose_semigrand_canonical_event_from_multiswap"], [235, 4, 1, "", "propose_semigrand_canonical_event_from_swap"], [236, 4, 1, "", "propose_semigrand_canonical_multiswap_event"], [237, 4, 1, "", "swaps_allowed_per_unitcell"]], "libcasm.monte.events.Atom": [[58, 3, 1, "", "n_jumps"], [59, 3, 1, "", "translation"]], "libcasm.monte.events.AtomLocation": [[61, 3, 1, "", "linear_site_index"], [62, 3, 1, "", "mol_comp"], [63, 3, 1, "", "mol_id"]], "libcasm.monte.events.AtomTraj": [[65, 3, 1, "", "delta_ijk"], [66, 3, 1, "", "from"], [67, 3, 1, "", "to"]], "libcasm.monte.events.AtomTrajVector": [[69, 2, 1, "", "append"], [70, 2, 1, "", "clear"], [71, 2, 1, "", "extend"], [72, 2, 1, "", "insert"], [73, 2, 1, "", "pop"]], "libcasm.monte.events.AtomVector": [[75, 2, 1, "", "append"], [76, 2, 1, "", "clear"], [77, 2, 1, "", "extend"], [78, 2, 1, "", "insert"], [79, 2, 1, "", "pop"]], "libcasm.monte.events.Conversions": [[81, 2, 1, "", "asym_size"], [82, 2, 1, "", "asym_to_b"], [83, 2, 1, "", "asym_to_unitl"], [84, 2, 1, "", "bijk_to_asym"], [85, 2, 1, "", "bijk_to_l"], [86, 2, 1, "", "bijk_to_unitl"], [87, 2, 1, "", "l_size"], [88, 2, 1, "", "l_to_asym"], [89, 2, 1, "", "l_to_b"], [90, 2, 1, "", "l_to_basis_cart"], [91, 2, 1, "", "l_to_basis_frac"], [92, 2, 1, "", "l_to_bijk"], [93, 2, 1, "", "l_to_cart"], [94, 2, 1, "", "l_to_frac"], [95, 2, 1, "", "l_to_ijk"], [96, 2, 1, "", "l_to_unitl"], [97, 2, 1, "", "lat_column_mat"], [98, 2, 1, "", "make_with_custom_asym"], [99, 2, 1, "", "make_with_custom_unitcell"], [100, 2, 1, "", "occ_size"], [101, 2, 1, "", "occ_to_species_index"], [102, 2, 1, "", "site_index_converter"], [103, 2, 1, "", "species_allowed"], [104, 2, 1, "", "species_index_to_atoms_size"], [105, 2, 1, "", "species_index_to_name"], [106, 2, 1, "", "species_index_to_occupant"], [107, 2, 1, "", "species_name_to_index"], [108, 2, 1, "", "species_size"], [109, 2, 1, "", "species_to_occ_index"], [110, 2, 1, "", "transformation_matrix_to_super"], [111, 2, 1, "", "unit_site_index_converter"], [112, 2, 1, "", "unit_transformation_matrix_to_super"], [113, 2, 1, "", "unitcell_index_converter"], [114, 2, 1, "", "unitl_size"], [115, 2, 1, "", "unitl_to_asym"], [116, 2, 1, "", "unitl_to_b"], [117, 2, 1, "", "unitl_to_bijk"]], "libcasm.monte.events.IntVector": [[119, 2, 1, "", "append"], [120, 2, 1, "", "clear"], [121, 2, 1, "", "count"], [122, 2, 1, "", "extend"], [123, 2, 1, "", "insert"], [124, 2, 1, "", "pop"], [125, 2, 1, "", "remove"]], "libcasm.monte.events.LongVector": [[127, 2, 1, "", "append"], [128, 2, 1, "", "clear"], [129, 2, 1, "", "count"], [130, 2, 1, "", "extend"], [131, 2, 1, "", "insert"], [132, 2, 1, "", "pop"], [133, 2, 1, "", "remove"]], "libcasm.monte.events.Mol": [[135, 3, 1, "", "asymmetric_unit_index"], [136, 3, 1, "", "component_id"], [137, 3, 1, "", "id"], [138, 3, 1, "", "linear_site_index"], [139, 3, 1, "", "mol_location_index"], [140, 3, 1, "", "species_index"]], "libcasm.monte.events.MolVector": [[142, 2, 1, "", "append"], [143, 2, 1, "", "clear"], [144, 2, 1, "", "extend"], [145, 2, 1, "", "insert"], [146, 2, 1, "", "pop"]], "libcasm.monte.events.MultiOccSwap": [[148, 2, 1, "", "from_dict"], [149, 2, 1, "", "reverse"], [150, 2, 1, "", "sort"], [151, 2, 1, "", "sorted"], [152, 3, 1, "", "swaps"], [153, 2, 1, "", "to_dict"], [154, 3, 1, "", "total_count"]], "libcasm.monte.events.OccCandidate": [[156, 3, 1, "", "asymmetric_unit_index"], [157, 2, 1, "", "from_dict"], [158, 2, 1, "", "is_valid"], [159, 3, 1, "", "species_index"], [160, 2, 1, "", "to_dict"]], "libcasm.monte.events.OccCandidateList": [[162, 2, 1, "", "from_dict"], [163, 2, 1, "", "index"], [164, 2, 1, "", "matching_index"], [165, 2, 1, "", "to_dict"]], "libcasm.monte.events.OccEvent": [[167, 3, 1, "", "atom_traj"], [168, 3, 1, "", "linear_site_index"], [169, 3, 1, "", "new_occ"], [170, 3, 1, "", "occ_transform"]], "libcasm.monte.events.OccLocation": [[172, 2, 1, "", "apply"], [173, 2, 1, "", "atom"], [174, 2, 1, "", "atom_info_final"], [175, 2, 1, "", "atom_info_initial"], [176, 2, 1, "", "atom_positions_cart"], [177, 2, 1, "", "atom_positions_cart_within"], [178, 2, 1, "", "atom_size"], [179, 2, 1, "", "cand_size"], [180, 2, 1, "", "cand_size_by_candidate_index"], [181, 2, 1, "", "candidate_list"], [182, 2, 1, "", "choose_mol"], [183, 2, 1, "", "choose_mol_by_candidate_index"], [184, 2, 1, "", "clear_atom_info_final"], [185, 2, 1, "", "convert"], [186, 2, 1, "", "current_atom_n_jumps"], [187, 2, 1, "", "current_atom_names"], [188, 2, 1, "", "current_atom_position_index"], [189, 2, 1, "", "current_atom_species_index"], [190, 2, 1, "", "initial_atom_position_index"], [191, 2, 1, "", "initial_atom_species_index"], [192, 2, 1, "", "initialize"], [193, 2, 1, "", "linear_site_index_to_mol_id"], [194, 2, 1, "", "mol"], [195, 2, 1, "", "mol_id"], [196, 2, 1, "", "mol_id_by_candidate_index"], [197, 2, 1, "", "mol_size"], [198, 2, 1, "", "unique_atom_id"]], "libcasm.monte.events.OccSwap": [[200, 3, 1, "", "first"], [201, 2, 1, "", "from_dict"], [202, 2, 1, "", "is_valid"], [203, 2, 1, "", "reverse"], [204, 3, 1, "", "second"], [205, 2, 1, "", "sort"], [206, 2, 1, "", "sorted"], [207, 2, 1, "", "to_dict"]], "libcasm.monte.events.OccSwapCountMap": [[209, 2, 1, "", "items"], [210, 2, 1, "", "keys"], [211, 2, 1, "", "values"]], "libcasm.monte.events.OccTransform": [[213, 3, 1, "", "asym"], [214, 3, 1, "", "from_species"], [215, 3, 1, "", "linear_site_index"], [216, 3, 1, "", "mol_id"], [217, 3, 1, "", "to_species"]], "libcasm.monte.events.OccTransformVector": [[219, 2, 1, "", "append"], [220, 2, 1, "", "clear"], [221, 2, 1, "", "extend"], [222, 2, 1, "", "insert"], [223, 2, 1, "", "pop"]], "libcasm.monte.ising_cpp": [[239, 1, 1, "", "IsingConfiguration"], [253, 1, 1, "", "IsingFormationEnergy"], [258, 1, 1, "", "IsingParamComposition"], [264, 1, 1, "", "IsingState"], [270, 1, 1, "", "IsingSystem"], [273, 0, 0, "-", "semigrand_canonical"]], "libcasm.monte.ising_cpp.IsingConfiguration": [[240, 2, 1, "", "from_dict"], [241, 2, 1, "", "from_linear_site_index"], [242, 3, 1, "", "n_sites"], [243, 3, 1, "", "n_unitcells"], [244, 3, 1, "", "n_variable_sites"], [245, 2, 1, "", "occ"], [246, 2, 1, "", "occupation"], [247, 2, 1, "", "set_occ"], [248, 2, 1, "", "set_occupation"], [249, 3, 1, "", "shape"], [250, 2, 1, "", "to_dict"], [251, 2, 1, "", "to_linear_site_index"], [252, 2, 1, "", "within"]], "libcasm.monte.ising_cpp.IsingFormationEnergy": [[254, 2, 1, "", "occ_delta_per_supercell"], [255, 2, 1, "", "per_supercell"], [256, 2, 1, "", "per_unitcell"], [257, 2, 1, "", "set_state"]], "libcasm.monte.ising_cpp.IsingParamComposition": [[259, 2, 1, "", "n_independent_compositions"], [260, 2, 1, "", "occ_delta_per_supercell"], [261, 2, 1, "", "per_supercell"], [262, 2, 1, "", "per_unitcell"], [263, 2, 1, "", "set_state"]], "libcasm.monte.ising_cpp.IsingState": [[265, 3, 1, "", "conditions"], [266, 3, 1, "", "configuration"], [267, 2, 1, "", "from_dict"], [268, 3, 1, "", "properties"], [269, 2, 1, "", "to_dict"]], "libcasm.monte.ising_cpp.IsingSystem": [[271, 3, 1, "", "formation_energy_calculator"], [272, 3, 1, "", "param_composition_calculator"]], "libcasm.monte.ising_cpp.semigrand_canonical": [[274, 1, 1, "", "SemiGrandCanonicalCalculator"], [285, 1, 1, "", "SemiGrandCanonicalConditions"], [292, 1, 1, "", "SemiGrandCanonicalData"], [307, 1, 1, "", "SemiGrandCanonicalEventGenerator"], [311, 1, 1, "", "SemiGrandCanonicalPotential"], [317, 4, 1, "", "default_write_status"]], "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator": [[275, 3, 1, "", "conditions"], [276, 3, 1, "", "data"], [277, 2, 1, "", "default_json_sampling_functions"], [278, 2, 1, "", "default_sampling_functions"], [279, 3, 1, "", "formation_energy_calculator"], [280, 3, 1, "", "param_composition_calculator"], [281, 3, 1, "", "potential"], [282, 2, 1, "", "run"], [283, 3, 1, "", "state"], [284, 3, 1, "", "system"]], "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions": [[286, 3, 1, "", "exchange_potential"], [287, 2, 1, "", "from_dict"], [288, 2, 1, "", "from_values"], [289, 3, 1, "", "temperature"], [290, 2, 1, "", "to_dict"], [291, 2, 1, "", "to_values"]], "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData": [[293, 2, 1, "", "acceptance_rate"], [294, 3, 1, "", "completion_check"], [295, 3, 1, "", "json_samplers"], [296, 3, 1, "", "json_sampling_functions"], [297, 3, 1, "", "n_accept"], [298, 3, 1, "", "n_pass"], [299, 3, 1, "", "n_reject"], [300, 3, 1, "", "n_steps_per_pass"], [301, 2, 1, "", "rejection_rate"], [302, 2, 1, "", "reset"], [303, 3, 1, "", "sample_weight"], [304, 3, 1, "", "samplers"], [305, 3, 1, "", "sampling_functions"], [306, 2, 1, "", "to_dict"]], "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator": [[308, 2, 1, "", "apply"], [309, 2, 1, "", "propose"], [310, 2, 1, "", "set_state"]], "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential": [[312, 2, 1, "", "occ_delta_per_supercell"], [313, 2, 1, "", "occ_event_delta_per_supercell"], [314, 2, 1, "", "per_supercell"], [315, 2, 1, "", "per_unitcell"], [316, 2, 1, "", "set_state"]], "libcasm.monte.ising_py": [[319, 1, 1, "", "IsingConfiguration"], [333, 1, 1, "", "IsingFormationEnergy"], [341, 1, 1, "", "IsingParamComposition"], [347, 1, 1, "", "IsingState"], [348, 1, 1, "", "IsingSystem"], [349, 0, 0, "-", "semigrand_canonical"]], "libcasm.monte.ising_py.IsingConfiguration": [[320, 2, 1, "", "from_dict"], [321, 2, 1, "", "from_linear_site_index"], [322, 5, 1, "", "n_sites"], [323, 5, 1, "", "n_unitcells"], [324, 5, 1, "", "n_variable_sites"], [325, 2, 1, "", "occ"], [326, 2, 1, "", "occupation"], [327, 2, 1, "", "set_occ"], [328, 2, 1, "", "set_occupation"], [329, 5, 1, "", "shape"], [330, 2, 1, "", "to_dict"], [331, 2, 1, "", "to_linear_site_index"], [332, 2, 1, "", "within"]], "libcasm.monte.ising_py.IsingFormationEnergy": [[334, 5, 1, "", "J"], [335, 5, 1, "", "lattice_type"], [336, 2, 1, "", "occ_delta_per_supercell"], [337, 2, 1, "", "per_supercell"], [338, 2, 1, "", "per_unitcell"], [339, 2, 1, "", "set_state"], [340, 5, 1, "", "state"]], "libcasm.monte.ising_py.IsingParamComposition": [[342, 2, 1, "", "n_independent_compositions"], [343, 2, 1, "", "occ_delta_per_supercell"], [344, 2, 1, "", "per_supercell"], [345, 2, 1, "", "per_unitcell"], [346, 2, 1, "", "set_state"]], "libcasm.monte.ising_py.IsingState": [[347, 5, 1, "", "conditions"], [347, 5, 1, "", "configuration"], [347, 5, 1, "", "properties"]], "libcasm.monte.ising_py.semigrand_canonical": [[350, 1, 1, "", "SemiGrandCanonicalCalculator"], [359, 1, 1, "", "SemiGrandCanonicalConditions"], [366, 1, 1, "", "SemiGrandCanonicalData"], [379, 1, 1, "", "SemiGrandCanonicalEventGenerator"], [385, 1, 1, "", "SemiGrandCanonicalPotential"], [395, 4, 1, "", "default_write_status"], [396, 4, 1, "", "make_formation_energy_f"], [397, 4, 1, "", "make_param_composition_f"], [398, 4, 1, "", "make_potential_energy_f"]], "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator": [[351, 5, 1, "", "conditions"], [352, 5, 1, "", "data"], [353, 5, 1, "", "formation_energy_calculator"], [354, 5, 1, "", "param_composition_calculator"], [355, 5, 1, "", "potential"], [356, 2, 1, "", "run"], [357, 5, 1, "", "state"], [358, 5, 1, "", "system"]], "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions": [[360, 5, 1, "", "exchange_potential"], [361, 2, 1, "", "from_dict"], [362, 2, 1, "", "from_values"], [363, 5, 1, "", "temperature"], [364, 2, 1, "", "to_dict"], [365, 2, 1, "", "to_values"]], "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData": [[367, 2, 1, "", "acceptance_rate"], [368, 5, 1, "", "completion_check"], [369, 5, 1, "", "n_accept"], [370, 5, 1, "", "n_pass"], [371, 5, 1, "", "n_reject"], [372, 5, 1, "", "n_steps_per_pass"], [373, 2, 1, "", "rejection_rate"], [374, 2, 1, "", "reset"], [375, 5, 1, "", "sample_weight"], [376, 5, 1, "", "samplers"], [377, 5, 1, "", "sampling_functions"], [378, 2, 1, "", "to_dict"]], "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator": [[380, 2, 1, "", "apply"], [381, 5, 1, "", "occ_event"], [382, 2, 1, "", "propose"], [383, 2, 1, "", "set_state"], [384, 5, 1, "", "state"]], "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential": [[386, 5, 1, "", "conditions"], [387, 5, 1, "", "formation_energy_calculator"], [388, 2, 1, "", "occ_delta_per_supercell"], [389, 5, 1, "", "param_composition_calculator"], [390, 2, 1, "", "per_supercell"], [391, 2, 1, "", "per_unitcell"], [392, 2, 1, "", "set_state"], [393, 5, 1, "", "state"], [394, 5, 1, "", "system"]], "libcasm.monte.methods": [[400, 1, 1, "", "BasicOccupationMetropolisData"], [414, 4, 1, "", "basic_occupation_metropolis"], [415, 4, 1, "", "metropolis_acceptance"]], "libcasm.monte.methods.BasicOccupationMetropolisData": [[401, 2, 1, "", "acceptance_rate"], [402, 3, 1, "", "completion_check"], [403, 3, 1, "", "json_samplers"], [404, 3, 1, "", "json_sampling_functions"], [405, 3, 1, "", "n_accept"], [406, 3, 1, "", "n_pass"], [407, 3, 1, "", "n_reject"], [408, 3, 1, "", "n_steps_per_pass"], [409, 2, 1, "", "rejection_rate"], [410, 3, 1, "", "sample_weight"], [411, 3, 1, "", "samplers"], [412, 3, 1, "", "sampling_functions"], [413, 2, 1, "", "to_dict"]], "libcasm.monte.sampling": [[417, 1, 1, "", "BasicStatistics"], [422, 1, 1, "", "BasicStatisticsCalculator"], [429, 1, 1, "", "CompletionCheck"], [437, 1, 1, "", "CompletionCheckParams"], [449, 1, 1, "", "CompletionCheckResults"], [464, 1, 1, "", "ConvergenceCheckResults"], [469, 1, 1, "", "ConvergenceResultMap"], [473, 1, 1, "", "CorrelationsData"], [489, 1, 1, "", "CorrelationsDataParams"], [497, 1, 1, "", "CutoffCheckParams"], [508, 1, 1, "", "DiscreteVectorFloatHistogram"], [522, 1, 1, "", "DiscreteVectorIntHistogram"], [535, 1, 1, "", "EquilibrationCheckResults"], [540, 1, 1, "", "EquilibrationResultMap"], [544, 1, 1, "", "GenericSelectedEventFunction"], [551, 1, 1, "", "Histogram1D"], [566, 1, 1, "", "IndividualConvergenceResult"], [571, 1, 1, "", "IndividualEquilibrationResult"], [575, 1, 1, "", "PartitionedHistogram1D"], [581, 1, 1, "", "PartitionedHistogramFunction"], [593, 1, 1, "", "PartitionedHistogramFunctionMap"], [597, 1, 1, "", "RequestedPrecision"], [604, 1, 1, "", "RequestedPrecisionConstructor"], [606, 1, 1, "", "RequestedPrecisionMap"], [610, 1, 1, "", "SAMPLE_METHOD"], [616, 1, 1, "", "SAMPLE_MODE"], [622, 1, 1, "", "Sampler"], [636, 1, 1, "", "SamplerComponent"], [640, 1, 1, "", "SamplerMap"], [644, 1, 1, "", "SamplingParams"], [662, 1, 1, "", "SelectedEventData"], [669, 1, 1, "", "SelectedEventFunctionParams"], [682, 1, 1, "", "SelectedEventFunctions"], [687, 1, 1, "", "StateSamplingFunction"], [693, 1, 1, "", "StateSamplingFunctionMap"], [697, 1, 1, "", "VectorFloatHistogramFunction"], [709, 1, 1, "", "VectorFloatHistogramFunctionMap"], [713, 1, 1, "", "VectorIntHistogramFunction"], [724, 1, 1, "", "VectorIntHistogramFunctionMap"], [728, 4, 1, "", "all_minimums_met"], [729, 4, 1, "", "any_maximum_met"], [730, 4, 1, "", "colmajor_component_names"], [731, 4, 1, "", "component_convergence_check"], [732, 4, 1, "", "converge"], [733, 4, 1, "", "convergence_check"], [734, 4, 1, "", "default_component_names"], [735, 4, 1, "", "default_equilibration_check"], [736, 4, 1, "", "get_n_samples"], [737, 1, 1, "", "jsonSampler"], [747, 1, 1, "", "jsonSamplerMap"], [751, 1, 1, "", "jsonStateSamplingFunction"], [755, 1, 1, "", "jsonStateSamplingFunctionMap"], [759, 4, 1, "", "matrix_as_vector"], [760, 4, 1, "", "scalar_as_vector"]], "libcasm.monte.sampling.BasicStatistics": [[418, 3, 1, "", "calculated_precision"], [419, 3, 1, "", "mean"], [420, 2, 1, "", "relative_precision"], [421, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.BasicStatisticsCalculator": [[423, 2, 1, "", "calculate"], [424, 3, 1, "", "confidence"], [425, 2, 1, "", "from_dict"], [426, 3, 1, "", "n_resamples"], [427, 2, 1, "", "to_dict"], [428, 3, 1, "", "weighted_observations_method"]], "libcasm.monte.sampling.CompletionCheck": [[430, 2, 1, "", "check"], [431, 2, 1, "", "count_and_time_check"], [432, 2, 1, "", "count_check"], [433, 2, 1, "", "params"], [434, 2, 1, "", "reset"], [435, 2, 1, "", "results"], [436, 2, 1, "", "time_check"]], "libcasm.monte.sampling.CompletionCheckParams": [[438, 3, 1, "", "calc_statistics_f"], [439, 3, 1, "", "check_base"], [440, 3, 1, "", "check_begin"], [441, 3, 1, "", "check_period"], [442, 3, 1, "", "check_period_max"], [443, 3, 1, "", "check_shift"], [444, 3, 1, "", "cutoff_params"], [445, 3, 1, "", "equilibration_check_f"], [446, 2, 1, "", "from_dict"], [447, 3, 1, "", "log_spacing"], [448, 3, 1, "", "requested_precision"]], "libcasm.monte.sampling.CompletionCheckResults": [[450, 3, 1, "", "clocktime"], [451, 3, 1, "", "convergence_check_results"], [452, 3, 1, "", "count"], [453, 3, 1, "", "equilibration_check_results"], [454, 2, 1, "", "full_reset"], [455, 3, 1, "", "has_all_minimums_met"], [456, 3, 1, "", "has_any_maximum_met"], [457, 3, 1, "", "is_complete"], [458, 3, 1, "", "n_samples"], [459, 3, 1, "", "n_samples_at_convergence_check"], [460, 3, 1, "", "params"], [461, 2, 1, "", "partial_reset"], [462, 3, 1, "", "time"], [463, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.ConvergenceCheckResults": [[465, 3, 1, "", "N_samples_for_statistics"], [466, 3, 1, "", "all_converged"], [467, 3, 1, "", "individual_results"], [468, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.ConvergenceResultMap": [[470, 2, 1, "", "items"], [471, 2, 1, "", "keys"], [472, 2, 1, "", "values"]], "libcasm.monte.sampling.CorrelationsData": [[474, 3, 1, "", "atom_positions_cart"], [475, 2, 1, "", "indices_after_pass"], [476, 2, 1, "", "indices_after_time"], [477, 2, 1, "", "initialize"], [478, 2, 1, "", "insert"], [479, 3, 1, "", "jumps_per_position_sample"], [480, 3, 1, "", "max_n_position_samples"], [481, 3, 1, "", "n_complete_samples"], [482, 3, 1, "", "n_position_samples"], [483, 3, 1, "", "output_incomplete_samples"], [484, 3, 1, "", "pass"], [485, 3, 1, "", "step"], [486, 3, 1, "", "stop_run_when_complete"], [487, 3, 1, "", "time"], [488, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.CorrelationsDataParams": [[490, 2, 1, "", "copy"], [491, 2, 1, "", "from_dict"], [492, 3, 1, "", "jumps_per_position_sample"], [493, 3, 1, "", "max_n_position_samples"], [494, 3, 1, "", "output_incomplete_samples"], [495, 3, 1, "", "stop_run_when_complete"], [496, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.CutoffCheckParams": [[498, 2, 1, "", "from_dict"], [499, 3, 1, "", "max_clocktime"], [500, 3, 1, "", "max_count"], [501, 3, 1, "", "max_sample"], [502, 3, 1, "", "max_time"], [503, 3, 1, "", "min_clocktime"], [504, 3, 1, "", "min_count"], [505, 3, 1, "", "min_sample"], [506, 3, 1, "", "min_time"], [507, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.DiscreteVectorFloatHistogram": [[509, 2, 1, "", "component_names"], [510, 2, 1, "", "count"], [511, 2, 1, "", "fraction"], [512, 2, 1, "", "insert"], [513, 2, 1, "", "max_size"], [514, 2, 1, "", "max_size_exceeded"], [515, 2, 1, "", "out_of_range_count"], [516, 2, 1, "", "shape"], [517, 2, 1, "", "size"], [518, 2, 1, "", "sum"], [519, 2, 1, "", "to_dict"], [520, 2, 1, "", "tol"], [521, 2, 1, "", "values"]], "libcasm.monte.sampling.DiscreteVectorIntHistogram": [[523, 2, 1, "", "component_names"], [524, 2, 1, "", "count"], [525, 2, 1, "", "fraction"], [526, 2, 1, "", "insert"], [527, 2, 1, "", "max_size"], [528, 2, 1, "", "max_size_exceeded"], [529, 2, 1, "", "out_of_range_count"], [530, 2, 1, "", "shape"], [531, 2, 1, "", "size"], [532, 2, 1, "", "sum"], [533, 2, 1, "", "to_dict"], [534, 2, 1, "", "values"]], "libcasm.monte.sampling.EquilibrationCheckResults": [[536, 3, 1, "", "N_samples_for_all_to_equilibrate"], [537, 3, 1, "", "all_equilibrated"], [538, 3, 1, "", "individual_results"], [539, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.EquilibrationResultMap": [[541, 2, 1, "", "items"], [542, 2, 1, "", "keys"], [543, 2, 1, "", "values"]], "libcasm.monte.sampling.GenericSelectedEventFunction": [[545, 3, 1, "", "description"], [546, 3, 1, "", "function"], [547, 3, 1, "", "has_value_function"], [548, 3, 1, "", "name"], [549, 3, 1, "", "order"], [550, 3, 1, "", "requires_event_state"]], "libcasm.monte.sampling.Histogram1D": [[552, 2, 1, "", "begin"], [553, 2, 1, "", "bin_coords"], [554, 2, 1, "", "bin_width"], [555, 2, 1, "", "count"], [556, 2, 1, "", "density"], [557, 2, 1, "", "insert"], [558, 2, 1, "", "is_log"], [559, 2, 1, "", "max_size"], [560, 2, 1, "", "max_size_exceeded"], [561, 2, 1, "", "merge"], [562, 2, 1, "", "out_of_range_count"], [563, 2, 1, "", "size"], [564, 2, 1, "", "sum"], [565, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.IndividualConvergenceResult": [[567, 3, 1, "", "is_converged"], [568, 3, 1, "", "requested_precision"], [569, 3, 1, "", "stats"], [570, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.IndividualEquilibrationResult": [[572, 3, 1, "", "N_samples_for_equilibration"], [573, 3, 1, "", "is_equilibrated"], [574, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.PartitionedHistogram1D": [[576, 2, 1, "", "combined_histogram"], [577, 2, 1, "", "histograms"], [578, 2, 1, "", "insert"], [579, 2, 1, "", "partition_names"], [580, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.PartitionedHistogramFunction": [[582, 3, 1, "", "bin_width"], [583, 3, 1, "", "description"], [584, 3, 1, "", "function"], [585, 3, 1, "", "get_partition_function"], [586, 3, 1, "", "initial_begin"], [587, 3, 1, "", "is_log"], [588, 3, 1, "", "max_size"], [589, 3, 1, "", "name"], [590, 2, 1, "", "partition"], [591, 3, 1, "", "partition_names"], [592, 3, 1, "", "requires_event_state"]], "libcasm.monte.sampling.PartitionedHistogramFunctionMap": [[594, 2, 1, "", "items"], [595, 2, 1, "", "keys"], [596, 2, 1, "", "values"]], "libcasm.monte.sampling.RequestedPrecision": [[598, 3, 1, "", "abs_convergence_is_required"], [599, 3, 1, "", "abs_precision"], [600, 2, 1, "", "from_dict"], [601, 3, 1, "", "rel_convergence_is_required"], [602, 3, 1, "", "rel_precision"], [603, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.RequestedPrecisionConstructor": [[605, 2, 1, "", "set_precision"]], "libcasm.monte.sampling.RequestedPrecisionMap": [[607, 2, 1, "", "items"], [608, 2, 1, "", "keys"], [609, 2, 1, "", "values"]], "libcasm.monte.sampling.SAMPLE_METHOD": [[611, 5, 1, "", "CUSTOM"], [612, 5, 1, "", "LINEAR"], [613, 5, 1, "", "LOG"], [614, 3, 1, "", "name"], [615, 3, 1, "", "value"]], "libcasm.monte.sampling.SAMPLE_MODE": [[617, 5, 1, "", "BY_PASS"], [618, 5, 1, "", "BY_STEP"], [619, 5, 1, "", "BY_TIME"], [620, 3, 1, "", "name"], [621, 3, 1, "", "value"]], "libcasm.monte.sampling.Sampler": [[623, 2, 1, "", "append"], [624, 2, 1, "", "clear"], [625, 2, 1, "", "component"], [626, 2, 1, "", "component_names"], [627, 2, 1, "", "n_components"], [628, 2, 1, "", "n_samples"], [629, 2, 1, "", "sample"], [630, 2, 1, "", "sample_capacity"], [631, 2, 1, "", "set_capacity_increment"], [632, 2, 1, "", "set_sample_capacity"], [633, 2, 1, "", "set_values"], [634, 2, 1, "", "shape"], [635, 2, 1, "", "values"]], "libcasm.monte.sampling.SamplerComponent": [[637, 3, 1, "", "component_index"], [638, 3, 1, "", "component_name"], [639, 3, 1, "", "sampler_name"]], "libcasm.monte.sampling.SamplerMap": [[641, 2, 1, "", "items"], [642, 2, 1, "", "keys"], [643, 2, 1, "", "values"]], "libcasm.monte.sampling.SamplingParams": [[645, 2, 1, "", "append_to_json_sampler_names"], [646, 2, 1, "", "append_to_sampler_names"], [647, 3, 1, "", "base"], [648, 3, 1, "", "begin"], [649, 3, 1, "", "do_sample_time"], [650, 3, 1, "", "do_sample_trajectory"], [651, 2, 1, "", "extend_json_sampler_names"], [652, 2, 1, "", "extend_sampler_names"], [653, 3, 1, "", "json_sampler_names"], [654, 3, 1, "", "period"], [655, 2, 1, "", "remove_from_json_sampler_names"], [656, 2, 1, "", "remove_from_sampler_names"], [657, 3, 1, "", "sample_method"], [658, 3, 1, "", "sample_mode"], [659, 3, 1, "", "sampler_names"], [660, 3, 1, "", "shift"], [661, 3, 1, "", "stochastic_sample_period"]], "libcasm.monte.sampling.SelectedEventData": [[663, 3, 1, "", "continuous_1d_histograms"], [664, 3, 1, "", "correlations_data"], [665, 3, 1, "", "discrete_vector_float_histograms"], [666, 3, 1, "", "discrete_vector_int_histograms"], [667, 2, 1, "", "reset"], [668, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.SelectedEventFunctionParams": [[670, 2, 1, "", "collect"], [671, 2, 1, "", "collect_hop_correlations"], [672, 2, 1, "", "copy"], [673, 3, 1, "", "correlations_data_params"], [674, 2, 1, "", "do_not_collect"], [675, 2, 1, "", "do_not_collect_hop_correlations"], [676, 2, 1, "", "evaluate"], [677, 2, 1, "", "from_dict"], [678, 3, 1, "", "function_names"], [679, 2, 1, "", "get_parameters"], [680, 2, 1, "", "reset"], [681, 2, 1, "", "to_dict"]], "libcasm.monte.sampling.SelectedEventFunctions": [[683, 3, 1, "", "continuous_1d_functions"], [684, 3, 1, "", "discrete_vector_float_functions"], [685, 3, 1, "", "discrete_vector_int_functions"], [686, 3, 1, "", "generic_functions"]], "libcasm.monte.sampling.StateSamplingFunction": [[688, 3, 1, "", "component_names"], [689, 3, 1, "", "description"], [690, 3, 1, "", "function"], [691, 3, 1, "", "name"], [692, 3, 1, "", "shape"]], "libcasm.monte.sampling.StateSamplingFunctionMap": [[694, 2, 1, "", "items"], [695, 2, 1, "", "keys"], [696, 2, 1, "", "values"]], "libcasm.monte.sampling.VectorFloatHistogramFunction": [[698, 3, 1, "", "component_names"], [699, 3, 1, "", "description"], [700, 3, 1, "", "function"], [701, 3, 1, "", "has_value_function"], [702, 3, 1, "", "max_size"], [703, 3, 1, "", "name"], [704, 3, 1, "", "requires_event_state"], [705, 2, 1, "", "set_value_labels"], [706, 3, 1, "", "shape"], [707, 3, 1, "", "tol"], [708, 2, 1, "", "value_labels"]], "libcasm.monte.sampling.VectorFloatHistogramFunctionMap": [[710, 2, 1, "", "items"], [711, 2, 1, "", "keys"], [712, 2, 1, "", "values"]], "libcasm.monte.sampling.VectorIntHistogramFunction": [[714, 3, 1, "", "component_names"], [715, 3, 1, "", "description"], [716, 3, 1, "", "function"], [717, 3, 1, "", "has_value_function"], [718, 3, 1, "", "max_size"], [719, 3, 1, "", "name"], [720, 3, 1, "", "requires_event_state"], [721, 2, 1, "", "set_value_labels"], [722, 3, 1, "", "shape"], [723, 2, 1, "", "value_labels"]], "libcasm.monte.sampling.VectorIntHistogramFunctionMap": [[725, 2, 1, "", "items"], [726, 2, 1, "", "keys"], [727, 2, 1, "", "values"]], "libcasm.monte.sampling.jsonSampler": [[738, 2, 1, "", "append"], [739, 2, 1, "", "clear"], [740, 2, 1, "", "n_samples"], [741, 2, 1, "", "sample"], [742, 2, 1, "", "sample_capacity"], [743, 2, 1, "", "set_sample_capacity"], [744, 2, 1, "", "set_values"], [745, 2, 1, "", "to_list"], [746, 2, 1, "", "values"]], "libcasm.monte.sampling.jsonSamplerMap": [[748, 2, 1, "", "items"], [749, 2, 1, "", "keys"], [750, 2, 1, "", "values"]], "libcasm.monte.sampling.jsonStateSamplingFunction": [[752, 3, 1, "", "description"], [753, 3, 1, "", "function"], [754, 3, 1, "", "name"]], "libcasm.monte.sampling.jsonStateSamplingFunctionMap": [[756, 2, 1, "", "items"], [757, 2, 1, "", "keys"], [758, 2, 1, "", "values"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"bibliographi": 0, "libcasm": [1, 3, 56, 238, 273, 318, 349, 399, 416, 761], "mont": [1, 3, 56, 238, 273, 318, 349, 399, 416, 764], "about": 1, "casm": 1, "licens": 1, "document": 1, "instal": 2, "from": [2, 66], "pypi": 2, "sourc": 2, "For": 2, "contributor": 2, "methodlog": 4, "begin_lap": 5, "begin_section_print_alwai": 6, "begin_section_print_if_debug": 7, "begin_section_print_if_quiet": 8, "begin_section_print_if_standard": 9, "begin_section_print_if_verbos": 10, "decrease_ind": 11, "end_sect": 12, "hide_clock": 13, "increase_ind": 14, "indent_str": 15, "lap_tim": 16, "log_frequ": 17, "logfile_path": 18, "paragraph": 19, "paragraph_justif": 20, "paragraph_width": 21, "print": 22, "reset": [23, 302, 374, 434, 667, 680], "restart_clock": 25, "section": 26, "set_debug": 27, "set_indent_spac": 28, "set_initial_indent_spac": 29, "set_paragraph_justif": 30, "set_paragraph_width": 31, "set_quiet": 32, "set_standard": 33, "set_verbos": 34, "show_clock": 35, "time_": 36, "verbatim": 37, "randomnumberengin": 38, "dump": 39, "load": 40, "seed": 41, "seed_seq": 42, "randomnumbergener": 43, "engin": 44, "random_int": 45, "random_r": 46, "valuemap": 47, "boolean_valu": 48, "from_dict": [49, 148, 157, 162, 201, 240, 267, 287, 320, 361, 425, 446, 491, 498, 600, 677], "is_mismatch": 50, "make_incremented_valu": 51, "matrix_valu": 52, "scalar_valu": 53, "to_dict": [54, 153, 160, 165, 207, 250, 269, 290, 306, 330, 364, 378, 413, 421, 427, 463, 468, 488, 496, 507, 519, 533, 539, 565, 570, 574, 580, 603, 668, 681], "vector_valu": 55, "event": 56, "atom": [57, 173], "n_jump": 58, "translat": 59, "atomloc": 60, "linear_site_index": [61, 138, 168, 215], "mol_comp": 62, "mol_id": [63, 195, 216], "atomtraj": 64, "delta_ijk": 65, "atomtrajvector": 68, "append": [69, 75, 119, 127, 142, 219, 623, 738], "clear": [70, 76, 120, 128, 143, 220, 624, 739], "extend": [71, 77, 122, 130, 144, 221], "insert": [72, 78, 123, 131, 145, 222, 478, 512, 526, 557, 578], "pop": [73, 79, 124, 132, 146, 223], "atomvector": 74, "convers": 80, "asym_s": 81, "asym_to_b": 82, "asym_to_unitl": 83, "bijk_to_asym": 84, "bijk_to_l": 85, "bijk_to_unitl": 86, "l_size": 87, "l_to_asym": 88, "l_to_b": 89, "l_to_basis_cart": 90, "l_to_basis_frac": 91, "l_to_bijk": 92, "l_to_cart": 93, "l_to_frac": 94, "l_to_ijk": 95, "l_to_unitl": 96, "lat_column_mat": 97, "make_with_custom_asym": 98, "make_with_custom_unitcel": 99, "occ_siz": 100, "occ_to_species_index": 101, "site_index_convert": 102, "species_allow": 103, "species_index_to_atoms_s": 104, "species_index_to_nam": 105, "species_index_to_occup": 106, "species_name_to_index": 107, "species_s": 108, "species_to_occ_index": 109, "transformation_matrix_to_sup": 110, "unit_site_index_convert": 111, "unit_transformation_matrix_to_sup": 112, "unitcell_index_convert": 113, "unitl_s": 114, "unitl_to_asym": 115, "unitl_to_b": 116, "unitl_to_bijk": 117, "intvector": 118, "count": [121, 129, 452, 510, 524, 555], "remov": [125, 133], "longvector": 126, "mol": [134, 194], "asymmetric_unit_index": [135, 156], "component_id": 136, "id": 137, "mol_location_index": 139, "molvector": 141, "multioccswap": 147, "revers": [149, 203], "sort": [150, 151, 205, 206], "swap": 152, "total_count": 154, "occcandid": 155, "is_valid": [158, 202], "species_index": [140, 159], "occcandidatelist": 161, "index": 163, "matching_index": 164, "occev": 166, "atom_traj": 167, "new_occ": 169, "occ_transform": 170, "occloc": 171, "appli": [172, 308, 380], "atom_positions_cart": [176, 474], "atom_positions_cart_within": 177, "atom_s": 178, "cand_siz": 179, "cand_size_by_candidate_index": 180, "candidate_list": 181, "choose_mol": 182, "choose_mol_by_candidate_index": 183, "convert": 185, "current_atom_n_jump": 186, "current_atom_nam": 187, "current_atom_position_index": 188, "current_atom_species_index": 189, "initial_atom_position_index": 190, "initial_atom_species_index": 191, "initi": [192, 477], "linear_site_index_to_mol_id": 193, "mol_id_by_candidate_index": 196, "mol_siz": 197, "occswap": 199, "first": 200, "second": 204, "occswapcountmap": 208, "item": [209, 470, 541, 594, 607, 641, 694, 710, 725, 748, 756], "kei": [210, 471, 542, 595, 608, 642, 695, 711, 726, 749, 757], "valu": [211, 472, 521, 534, 543, 596, 609, 615, 621, 635, 643, 696, 712, 727, 746, 750, 758], "occtransform": 212, "asym": 213, "from_speci": 214, "to_speci": 217, "occtransformvector": 218, "choose_canonical_swap": 224, "choose_semigrand_canonical_multiswap": 225, "choose_semigrand_canonical_swap": 226, "is_allowed_canonical_swap": 227, "make_canonical_swap": 228, "make_multiswap": 229, "make_semigrand_canonical_swap": 230, "propose_canonical_ev": 231, "propose_canonical_event_from_swap": 232, "propose_semigrand_canonical_ev": 233, "propose_semigrand_canonical_event_from_multiswap": 234, "propose_semigrand_canonical_event_from_swap": 235, "propose_semigrand_canonical_multiswap_ev": 236, "swaps_allowed_per_unitcel": 237, "ising_cpp": [238, 273], "isingconfigur": [239, 319], "from_linear_site_index": [241, 321], "n_site": [242, 322], "n_unitcel": [243, 323], "n_variable_sit": [244, 324], "occ": [245, 325], "occup": [246, 326], "set_occ": [247, 327], "set_occup": [248, 328], "shape": [249, 329, 516, 530, 634, 692, 706, 722], "to_linear_site_index": [251, 331], "within": [252, 332], "isingformationenergi": [253, 333], "occ_delta_per_supercel": [254, 260, 312, 336, 343, 388], "per_supercel": [255, 261, 314, 337, 344, 390], "per_unitcel": [256, 262, 315, 338, 345, 391], "set_stat": [257, 263, 310, 316, 339, 346, 383, 392], "isingparamcomposit": [258, 341], "n_independent_composit": [259, 342], "isingst": [264, 347], "condit": [265, 275, 351, 386], "configur": 266, "properti": 268, "isingsystem": [270, 348], "formation_energy_calcul": [271, 279, 353, 387], "param_composition_calcul": [272, 280, 354, 389], "semigrand_canon": [273, 349], "semigrandcanonicalcalcul": [274, 350], "data": [276, 352], "default_json_sampling_funct": 277, "default_sampling_funct": 278, "potenti": [281, 355], "run": [282, 356], "state": [283, 340, 357, 384, 393], "system": [284, 358, 394], "semigrandcanonicalcondit": [285, 359], "exchange_potenti": [286, 360], "from_valu": [288, 362], "temperatur": [289, 363], "to_valu": [291, 365], "semigrandcanonicaldata": [292, 366], "acceptance_r": [293, 367, 401], "completion_check": [294, 368, 402], "json_sampl": [295, 403], "json_sampling_funct": [296, 404], "n_accept": [297, 369, 405], "n_pass": [298, 370, 406], "n_reject": [299, 371, 407], "n_steps_per_pass": [300, 372, 408], "rejection_r": [301, 373, 409], "sample_weight": [303, 375, 410], "sampler": [304, 376, 411, 622], "sampling_funct": [305, 377, 412], "semigrandcanonicaleventgener": [307, 379], "propos": [309, 382], "semigrandcanonicalpotenti": [311, 385], "occ_event_delta_per_supercel": 313, "default_write_statu": [317, 395], "ising_pi": [318, 349], "j": 334, "lattice_typ": 335, "occ_ev": 381, "make_formation_energy_f": 396, "make_param_composition_f": 397, "make_potential_energy_f": 398, "method": 399, "basicoccupationmetropolisdata": 400, "basic_occupation_metropoli": 414, "metropolis_accept": 415, "sampl": [416, 629, 741], "basicstatist": 417, "calculated_precis": 418, "mean": 419, "relative_precis": 420, "basicstatisticscalcul": 422, "calcul": [423, 763, 764], "confid": 424, "n_resampl": 426, "weighted_observations_method": 428, "completioncheck": 429, "check": [430, 763], "count_and_time_check": 431, "count_check": 432, "param": [433, 460], "result": 435, "time_check": 436, "completioncheckparam": 437, "calc_statistics_f": 438, "check_bas": 439, "check_begin": 440, "check_period": 441, "check_period_max": 442, "check_shift": 443, "cutoff_param": 444, "equilibration_check_f": 445, "log_spac": 447, "requested_precis": [448, 568], "completioncheckresult": 449, "clocktim": 450, "convergence_check_result": 451, "equilibration_check_result": 453, "full_reset": 454, "has_all_minimums_met": 455, "has_any_maximum_met": 456, "is_complet": 457, "n_sampl": [458, 628, 740], "n_samples_at_convergence_check": 459, "partial_reset": 461, "time": [462, 487], "convergencecheckresult": 464, "n_samples_for_statist": 465, "all_converg": 466, "individual_result": [467, 538], "convergenceresultmap": 469, "cutoffcheckparam": 497, "max_clocktim": 499, "max_count": 500, "max_sampl": 501, "max_tim": 502, "min_clocktim": 503, "min_count": 504, "min_sampl": 505, "min_tim": 506, "equilibrationcheckresult": 535, "n_samples_for_all_to_equilibr": 536, "all_equilibr": 537, "equilibrationresultmap": 540, "individualconvergenceresult": 566, "is_converg": 567, "stat": 569, "individualequilibrationresult": 571, "n_samples_for_equilibr": 572, "is_equilibr": 573, "requestedprecis": 597, "abs_convergence_is_requir": 598, "abs_precis": 599, "rel_convergence_is_requir": 601, "rel_precis": 602, "requestedprecisionconstructor": 604, "set_precis": 605, "requestedprecisionmap": 606, "sample_method": [610, 657], "custom": 611, "linear": 612, "log": 613, "name": [548, 589, 614, 620, 691, 703, 719, 754], "sample_mod": [616, 658], "by_pass": 617, "by_step": 618, "by_tim": 619, "compon": 625, "component_nam": [509, 523, 626, 638, 688, 698, 714], "n_compon": 627, "sample_capac": [630, 742], "set_capacity_incr": 631, "set_sample_capac": [632, 743], "set_valu": [633, 744], "samplercompon": 636, "component_index": 637, "sampler_nam": [639, 659], "samplermap": 640, "samplingparam": 644, "base": 647, "begin": [552, 648], "do_sample_tim": 649, "do_sample_trajectori": 650, "period": 654, "shift": 660, "stochastic_sample_period": 661, "statesamplingfunct": 687, "descript": [545, 583, 689, 699, 715, 752], "function": [546, 584, 690, 700, 716, 753], "statesamplingfunctionmap": 693, "all_minimums_met": 728, "any_maximum_met": 729, "colmajor_component_nam": 730, "component_convergence_check": 731, "converg": 732, "convergence_check": 733, "default_component_nam": 734, "default_equilibration_check": 735, "get_n_sampl": 736, "jsonstatesamplingfunct": 751, "jsonstatesamplingfunctionmap": 755, "matrix_as_vector": 759, "scalar_as_vector": 760, "refer": 761, "usag": 762, "complet": 763, "perform": 763, "exampl": 763, "equilibr": 763, "precis": 763, "overview": 764, "carlo": 764, "model": 764, "reset_to_stdout": 24, "atom_info_fin": 174, "atom_info_initi": 175, "clear_atom_info_fin": 184, "unique_atom_id": 198, "correlationsdata": 473, "indices_after_pass": 475, "indices_after_tim": 476, "jumps_per_position_sampl": [479, 492], "max_n_position_sampl": [480, 493], "n_complete_sampl": 481, "n_position_sampl": 482, "output_incomplete_sampl": [483, 494], "pass": 484, "step": 485, "stop_run_when_complet": [486, 495], "correlationsdataparam": 489, "copi": [490, 672], "discretevectorfloathistogram": 508, "fraction": [511, 525], "max_siz": [513, 527, 559, 588, 702, 718], "max_size_exceed": [514, 528, 560], "out_of_range_count": [515, 529, 562], "size": [517, 531, 563], "sum": [518, 532, 564], "tol": [520, 707], "discretevectorinthistogram": 522, "genericselectedeventfunct": 544, "has_value_funct": [547, 701, 717], "order": 549, "requires_event_st": [550, 592, 704, 720], "histogram1d": 551, "bin_coord": 553, "bin_width": [554, 582], "densiti": 556, "is_log": [558, 587], "merg": 561, "partitionedhistogram1d": 575, "combined_histogram": 576, "histogram": 577, "partition_nam": [579, 591], "partitionedhistogramfunct": 581, "get_partition_funct": 585, "initial_begin": 586, "partit": 590, "partitionedhistogramfunctionmap": 593, "append_to_json_sampler_nam": 645, "append_to_sampler_nam": 646, "extend_json_sampler_nam": 651, "extend_sampler_nam": 652, "json_sampler_nam": 653, "remove_from_json_sampler_nam": 655, "remove_from_sampler_nam": 656, "selectedeventdata": 662, "continuous_1d_histogram": 663, "correlations_data": 664, "discrete_vector_float_histogram": 665, "discrete_vector_int_histogram": 666, "selectedeventfunctionparam": 669, "collect": 670, "collect_hop_correl": 671, "correlations_data_param": 673, "do_not_collect": 674, "do_not_collect_hop_correl": 675, "evalu": 676, "function_nam": 678, "get_paramet": 679, "selectedeventfunct": 682, "continuous_1d_funct": 683, "discrete_vector_float_funct": 684, "discrete_vector_int_funct": 685, "generic_funct": 686, "vectorfloathistogramfunct": 697, "set_value_label": [705, 721], "value_label": [708, 723], "vectorfloathistogramfunctionmap": 709, "vectorinthistogramfunct": 713, "vectorinthistogramfunctionmap": 724, "jsonsampl": 737, "to_list": 745, "jsonsamplermap": 747}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Bibliography": [[0, "bibliography"]], "libcasm-monte": [[1, "libcasm-monte"]], "About CASM": [[1, "about-casm"]], "License": [[1, "license"]], "Documentation": [[1, "documentation"]], "Installation": [[2, "installation"]], "Install from PyPI": [[2, "install-from-pypi"]], "Install from source": [[2, "install-from-source"]], "For contributors": [[2, "for-contributors"]], "libcasm.monte": [[3, "module-libcasm.monte"]], "MethodLog": [[4, "methodlog"]], "begin_lap": [[5, "begin-lap"]], "begin_section_print_always": [[6, "begin-section-print-always"]], "begin_section_print_if_debug": [[7, "begin-section-print-if-debug"]], "begin_section_print_if_quiet": [[8, "begin-section-print-if-quiet"]], "begin_section_print_if_standard": [[9, "begin-section-print-if-standard"]], "begin_section_print_if_verbose": [[10, "begin-section-print-if-verbose"]], "decrease_indent": [[11, "decrease-indent"]], "end_section": [[12, "end-section"]], "hide_clock": [[13, "hide-clock"]], "increase_indent": [[14, "increase-indent"]], "indent_str": [[15, "indent-str"]], "lap_time": [[16, "lap-time"]], "log_frequency": [[17, "log-frequency"]], "logfile_path": [[18, "logfile-path"]], "paragraph": [[19, "paragraph"]], "paragraph_justification": [[20, "paragraph-justification"]], "paragraph_width": [[21, "paragraph-width"]], "print": [[22, "print"]], "reset": [[23, "reset"], [302, "reset"], [374, "reset"], [434, "reset"], [667, "reset"], [680, "reset"]], "reset_to_stdout": [[24, "reset-to-stdout"]], "restart_clock": [[25, "restart-clock"]], "section": [[26, "section"]], "set_debug": [[27, "set-debug"]], "set_indent_space": [[28, "set-indent-space"]], "set_initial_indent_space": [[29, "set-initial-indent-space"]], "set_paragraph_justification": [[30, "set-paragraph-justification"]], "set_paragraph_width": [[31, "set-paragraph-width"]], "set_quiet": [[32, "set-quiet"]], "set_standard": [[33, "set-standard"]], "set_verbose": [[34, "set-verbose"]], "show_clock": [[35, "show-clock"]], "time_s": [[36, "time-s"]], "verbatim": [[37, "verbatim"]], "RandomNumberEngine": [[38, "randomnumberengine"]], "dump": [[39, "dump"]], "load": [[40, "load"]], "seed": [[41, "seed"]], "seed_seq": [[42, "seed-seq"]], "RandomNumberGenerator": [[43, "randomnumbergenerator"]], "engine": [[44, "engine"]], "random_int": [[45, "random-int"]], "random_real": [[46, "random-real"]], "ValueMap": [[47, "valuemap"]], "boolean_values": [[48, "boolean-values"]], "from_dict": [[49, "from-dict"], [148, "from-dict"], [157, "from-dict"], [162, "from-dict"], [201, "from-dict"], [240, "from-dict"], [267, "from-dict"], [287, "from-dict"], [320, "from-dict"], [361, "from-dict"], [425, "from-dict"], [446, "from-dict"], [491, "from-dict"], [498, "from-dict"], [600, "from-dict"], [677, "from-dict"]], "is_mismatched": [[50, "is-mismatched"]], "make_incremented_values": [[51, "make-incremented-values"]], "matrix_values": [[52, "matrix-values"]], "scalar_values": [[53, "scalar-values"]], "to_dict": [[54, "to-dict"], [153, "to-dict"], [160, "to-dict"], [165, "to-dict"], [207, "to-dict"], [250, "to-dict"], [269, "to-dict"], [290, "to-dict"], [306, "to-dict"], [330, "to-dict"], [364, "to-dict"], [378, "to-dict"], [413, "to-dict"], [421, "to-dict"], [427, "to-dict"], [463, "to-dict"], [468, "to-dict"], [488, "to-dict"], [496, "to-dict"], [507, "to-dict"], [519, "to-dict"], [533, "to-dict"], [539, "to-dict"], [565, "to-dict"], [570, "to-dict"], [574, "to-dict"], [580, "to-dict"], [603, "to-dict"], [668, "to-dict"], [681, "to-dict"]], "vector_values": [[55, "vector-values"]], "libcasm.monte.events": [[56, "module-libcasm.monte.events"]], "Atom": [[57, "atom"]], "n_jumps": [[58, "n-jumps"]], "translation": [[59, "translation"]], "AtomLocation": [[60, "atomlocation"]], "linear_site_index": [[61, "linear-site-index"], [138, "linear-site-index"], [168, "linear-site-index"], [215, "linear-site-index"]], "mol_comp": [[62, "mol-comp"]], "mol_id": [[63, "mol-id"], [195, "mol-id"], [216, "mol-id"]], "AtomTraj": [[64, "atomtraj"]], "delta_ijk": [[65, "delta-ijk"]], "from": [[66, "from"]], "to": [[67, "to"]], "AtomTrajVector": [[68, "atomtrajvector"]], "append": [[69, "append"], [75, "append"], [119, "append"], [127, "append"], [142, "append"], [219, "append"], [623, "append"], [738, "append"]], "clear": [[70, "clear"], [76, "clear"], [120, "clear"], [128, "clear"], [143, "clear"], [220, "clear"], [624, "clear"], [739, "clear"]], "extend": [[71, "extend"], [77, "extend"], [122, "extend"], [130, "extend"], [144, "extend"], [221, "extend"]], "insert": [[72, "insert"], [78, "insert"], [123, "insert"], [131, "insert"], [145, "insert"], [222, "insert"], [478, "insert"], [512, "insert"], [526, "insert"], [557, "insert"], [578, "insert"]], "pop": [[73, "pop"], [79, "pop"], [124, "pop"], [132, "pop"], [146, "pop"], [223, "pop"]], "AtomVector": [[74, "atomvector"]], "Conversions": [[80, "conversions"]], "asym_size": [[81, "asym-size"]], "asym_to_b": [[82, "asym-to-b"]], "asym_to_unitl": [[83, "asym-to-unitl"]], "bijk_to_asym": [[84, "bijk-to-asym"]], "bijk_to_l": [[85, "bijk-to-l"]], "bijk_to_unitl": [[86, "bijk-to-unitl"]], "l_size": [[87, "l-size"]], "l_to_asym": [[88, "l-to-asym"]], "l_to_b": [[89, "l-to-b"]], "l_to_basis_cart": [[90, "l-to-basis-cart"]], "l_to_basis_frac": [[91, "l-to-basis-frac"]], "l_to_bijk": [[92, "l-to-bijk"]], "l_to_cart": [[93, "l-to-cart"]], "l_to_frac": [[94, "l-to-frac"]], "l_to_ijk": [[95, "l-to-ijk"]], "l_to_unitl": [[96, "l-to-unitl"]], "lat_column_mat": [[97, "lat-column-mat"]], "make_with_custom_asym": [[98, "make-with-custom-asym"]], "make_with_custom_unitcell": [[99, "make-with-custom-unitcell"]], "occ_size": [[100, "occ-size"]], "occ_to_species_index": [[101, "occ-to-species-index"]], "site_index_converter": [[102, "site-index-converter"]], "species_allowed": [[103, "species-allowed"]], "species_index_to_atoms_size": [[104, "species-index-to-atoms-size"]], "species_index_to_name": [[105, "species-index-to-name"]], "species_index_to_occupant": [[106, "species-index-to-occupant"]], "species_name_to_index": [[107, "species-name-to-index"]], "species_size": [[108, "species-size"]], "species_to_occ_index": [[109, "species-to-occ-index"]], "transformation_matrix_to_super": [[110, "transformation-matrix-to-super"]], "unit_site_index_converter": [[111, "unit-site-index-converter"]], "unit_transformation_matrix_to_super": [[112, "unit-transformation-matrix-to-super"]], "unitcell_index_converter": [[113, "unitcell-index-converter"]], "unitl_size": [[114, "unitl-size"]], "unitl_to_asym": [[115, "unitl-to-asym"]], "unitl_to_b": [[116, "unitl-to-b"]], "unitl_to_bijk": [[117, "unitl-to-bijk"]], "IntVector": [[118, "intvector"]], "count": [[121, "count"], [129, "count"], [452, "count"], [510, "count"], [524, "count"], [555, "count"]], "remove": [[125, "remove"], [133, "remove"]], "LongVector": [[126, "longvector"]], "Mol": [[134, "mol"]], "asymmetric_unit_index": [[135, "asymmetric-unit-index"], [156, "asymmetric-unit-index"]], "component_id": [[136, "component-id"]], "id": [[137, "id"]], "mol_location_index": [[139, "mol-location-index"]], "species_index": [[140, "species-index"], [159, "species-index"]], "MolVector": [[141, "molvector"]], "MultiOccSwap": [[147, "multioccswap"]], "reverse": [[149, "reverse"], [203, "reverse"]], "sort": [[150, "sort"], [205, "sort"]], "sorted": [[151, "sorted"], [206, "sorted"]], "swaps": [[152, "swaps"]], "total_count": [[154, "total-count"]], "OccCandidate": [[155, "occcandidate"]], "is_valid": [[158, "is-valid"], [202, "is-valid"]], "OccCandidateList": [[161, "occcandidatelist"]], "index": [[163, "index"]], "matching_index": [[164, "matching-index"]], "OccEvent": [[166, "occevent"]], "atom_traj": [[167, "atom-traj"]], "new_occ": [[169, "new-occ"]], "occ_transform": [[170, "occ-transform"]], "OccLocation": [[171, "occlocation"]], "apply": [[172, "apply"], [308, "apply"], [380, "apply"]], "atom": [[173, "atom"]], "atom_info_final": [[174, "atom-info-final"]], "atom_info_initial": [[175, "atom-info-initial"]], "atom_positions_cart": [[176, "atom-positions-cart"], [474, "atom-positions-cart"]], "atom_positions_cart_within": [[177, "atom-positions-cart-within"]], "atom_size": [[178, "atom-size"]], "cand_size": [[179, "cand-size"]], "cand_size_by_candidate_index": [[180, "cand-size-by-candidate-index"]], "candidate_list": [[181, "candidate-list"]], "choose_mol": [[182, "choose-mol"]], "choose_mol_by_candidate_index": [[183, "choose-mol-by-candidate-index"]], "clear_atom_info_final": [[184, "clear-atom-info-final"]], "convert": [[185, "convert"]], "current_atom_n_jumps": [[186, "current-atom-n-jumps"]], "current_atom_names": [[187, "current-atom-names"]], "current_atom_position_index": [[188, "current-atom-position-index"]], "current_atom_species_index": [[189, "current-atom-species-index"]], "initial_atom_position_index": [[190, "initial-atom-position-index"]], "initial_atom_species_index": [[191, "initial-atom-species-index"]], "initialize": [[192, "initialize"], [477, "initialize"]], "linear_site_index_to_mol_id": [[193, "linear-site-index-to-mol-id"]], "mol": [[194, "mol"]], "mol_id_by_candidate_index": [[196, "mol-id-by-candidate-index"]], "mol_size": [[197, "mol-size"]], "unique_atom_id": [[198, "unique-atom-id"]], "OccSwap": [[199, "occswap"]], "first": [[200, "first"]], "second": [[204, "second"]], "OccSwapCountMap": [[208, "occswapcountmap"]], "items": [[209, "items"], [470, "items"], [541, "items"], [594, "items"], [607, "items"], [641, "items"], [694, "items"], [710, "items"], [725, "items"], [748, "items"], [756, "items"]], "keys": [[210, "keys"], [471, "keys"], [542, "keys"], [595, "keys"], [608, "keys"], [642, "keys"], [695, "keys"], [711, "keys"], [726, "keys"], [749, "keys"], [757, "keys"]], "values": [[211, "values"], [472, "values"], [521, "values"], [534, "values"], [543, "values"], [596, "values"], [609, "values"], [635, "values"], [643, "values"], [696, "values"], [712, "values"], [727, "values"], [746, "values"], [750, "values"], [758, "values"]], "OccTransform": [[212, "occtransform"]], "asym": [[213, "asym"]], "from_species": [[214, "from-species"]], "to_species": [[217, "to-species"]], "OccTransformVector": [[218, "occtransformvector"]], "choose_canonical_swap": [[224, "choose-canonical-swap"]], "choose_semigrand_canonical_multiswap": [[225, "choose-semigrand-canonical-multiswap"]], "choose_semigrand_canonical_swap": [[226, "choose-semigrand-canonical-swap"]], "is_allowed_canonical_swap": [[227, "is-allowed-canonical-swap"]], "make_canonical_swaps": [[228, "make-canonical-swaps"]], "make_multiswaps": [[229, "make-multiswaps"]], "make_semigrand_canonical_swaps": [[230, "make-semigrand-canonical-swaps"]], "propose_canonical_event": [[231, "propose-canonical-event"]], "propose_canonical_event_from_swap": [[232, "propose-canonical-event-from-swap"]], "propose_semigrand_canonical_event": [[233, "propose-semigrand-canonical-event"]], "propose_semigrand_canonical_event_from_multiswap": [[234, "propose-semigrand-canonical-event-from-multiswap"]], "propose_semigrand_canonical_event_from_swap": [[235, "propose-semigrand-canonical-event-from-swap"]], "propose_semigrand_canonical_multiswap_event": [[236, "propose-semigrand-canonical-multiswap-event"]], "swaps_allowed_per_unitcell": [[237, "swaps-allowed-per-unitcell"]], "libcasm.monte.ising_cpp": [[238, "module-libcasm.monte.ising_cpp"]], "IsingConfiguration": [[239, "isingconfiguration"], [319, "isingconfiguration"]], "from_linear_site_index": [[241, "from-linear-site-index"], [321, "from-linear-site-index"]], "n_sites": [[242, "n-sites"], [322, "n-sites"]], "n_unitcells": [[243, "n-unitcells"], [323, "n-unitcells"]], "n_variable_sites": [[244, "n-variable-sites"], [324, "n-variable-sites"]], "occ": [[245, "occ"], [325, "occ"]], "occupation": [[246, "occupation"], [326, "occupation"]], "set_occ": [[247, "set-occ"], [327, "set-occ"]], "set_occupation": [[248, "set-occupation"], [328, "set-occupation"]], "shape": [[249, "shape"], [329, "shape"], [516, "shape"], [530, "shape"], [634, "shape"], [692, "shape"], [706, "shape"], [722, "shape"]], "to_linear_site_index": [[251, "to-linear-site-index"], [331, "to-linear-site-index"]], "within": [[252, "within"], [332, "within"]], "IsingFormationEnergy": [[253, "isingformationenergy"], [333, "isingformationenergy"]], "occ_delta_per_supercell": [[254, "occ-delta-per-supercell"], [260, "occ-delta-per-supercell"], [312, "occ-delta-per-supercell"], [336, "occ-delta-per-supercell"], [343, "occ-delta-per-supercell"], [388, "occ-delta-per-supercell"]], "per_supercell": [[255, "per-supercell"], [261, "per-supercell"], [314, "per-supercell"], [337, "per-supercell"], [344, "per-supercell"], [390, "per-supercell"]], "per_unitcell": [[256, "per-unitcell"], [262, "per-unitcell"], [315, "per-unitcell"], [338, "per-unitcell"], [345, "per-unitcell"], [391, "per-unitcell"]], "set_state": [[257, "set-state"], [263, "set-state"], [310, "set-state"], [316, "set-state"], [339, "set-state"], [346, "set-state"], [383, "set-state"], [392, "set-state"]], "IsingParamComposition": [[258, "isingparamcomposition"], [341, "isingparamcomposition"]], "n_independent_compositions": [[259, "n-independent-compositions"], [342, "n-independent-compositions"]], "IsingState": [[264, "isingstate"], [347, "isingstate"]], "conditions": [[265, "conditions"], [275, "conditions"], [351, "conditions"], [386, "conditions"]], "configuration": [[266, "configuration"]], "properties": [[268, "properties"]], "IsingSystem": [[270, "isingsystem"], [348, "isingsystem"]], "formation_energy_calculator": [[271, "formation-energy-calculator"], [279, "formation-energy-calculator"], [353, "formation-energy-calculator"], [387, "formation-energy-calculator"]], "param_composition_calculator": [[272, "param-composition-calculator"], [280, "param-composition-calculator"], [354, "param-composition-calculator"], [389, "param-composition-calculator"]], "libcasm.monte.ising_cpp.semigrand_canonical": [[273, "module-libcasm.monte.ising_cpp.semigrand_canonical"]], "SemiGrandCanonicalCalculator": [[274, "semigrandcanonicalcalculator"], [350, "semigrandcanonicalcalculator"]], "data": [[276, "data"], [352, "data"]], "default_json_sampling_functions": [[277, "default-json-sampling-functions"]], "default_sampling_functions": [[278, "default-sampling-functions"]], "potential": [[281, "potential"], [355, "potential"]], "run": [[282, "run"], [356, "run"]], "state": [[283, "state"], [340, "state"], [357, "state"], [384, "state"], [393, "state"]], "system": [[284, "system"], [358, "system"], [394, "system"]], "SemiGrandCanonicalConditions": [[285, "semigrandcanonicalconditions"], [359, "semigrandcanonicalconditions"]], "exchange_potential": [[286, "exchange-potential"], [360, "exchange-potential"]], "from_values": [[288, "from-values"], [362, "from-values"]], "temperature": [[289, "temperature"], [363, "temperature"]], "to_values": [[291, "to-values"], [365, "to-values"]], "SemiGrandCanonicalData": [[292, "semigrandcanonicaldata"], [366, "semigrandcanonicaldata"]], "acceptance_rate": [[293, "acceptance-rate"], [367, "acceptance-rate"], [401, "acceptance-rate"]], "completion_check": [[294, "completion-check"], [368, "completion-check"], [402, "completion-check"]], "json_samplers": [[295, "json-samplers"], [403, "json-samplers"]], "json_sampling_functions": [[296, "json-sampling-functions"], [404, "json-sampling-functions"]], "n_accept": [[297, "n-accept"], [369, "n-accept"], [405, "n-accept"]], "n_pass": [[298, "n-pass"], [370, "n-pass"], [406, "n-pass"]], "n_reject": [[299, "n-reject"], [371, "n-reject"], [407, "n-reject"]], "n_steps_per_pass": [[300, "n-steps-per-pass"], [372, "n-steps-per-pass"], [408, "n-steps-per-pass"]], "rejection_rate": [[301, "rejection-rate"], [373, "rejection-rate"], [409, "rejection-rate"]], "sample_weight": [[303, "sample-weight"], [375, "sample-weight"], [410, "sample-weight"]], "samplers": [[304, "samplers"], [376, "samplers"], [411, "samplers"]], "sampling_functions": [[305, "sampling-functions"], [377, "sampling-functions"], [412, "sampling-functions"]], "SemiGrandCanonicalEventGenerator": [[307, "semigrandcanonicaleventgenerator"], [379, "semigrandcanonicaleventgenerator"]], "propose": [[309, "propose"], [382, "propose"]], "SemiGrandCanonicalPotential": [[311, "semigrandcanonicalpotential"], [385, "semigrandcanonicalpotential"]], "occ_event_delta_per_supercell": [[313, "occ-event-delta-per-supercell"]], "default_write_status": [[317, "default-write-status"], [395, "default-write-status"]], "libcasm.monte.ising_py": [[318, "module-libcasm.monte.ising_py"]], "J": [[334, "j"]], "lattice_type": [[335, "lattice-type"]], "libcasm.monte.ising_py.semigrand_canonical": [[349, "module-libcasm.monte.ising_py.semigrand_canonical"]], "occ_event": [[381, "occ-event"]], "make_formation_energy_f": [[396, "make-formation-energy-f"]], "make_param_composition_f": [[397, "make-param-composition-f"]], "make_potential_energy_f": [[398, "make-potential-energy-f"]], "libcasm.monte.methods": [[399, "module-libcasm.monte.methods"]], "BasicOccupationMetropolisData": [[400, "basicoccupationmetropolisdata"]], "basic_occupation_metropolis": [[414, "basic-occupation-metropolis"]], "metropolis_acceptance": [[415, "metropolis-acceptance"]], "libcasm.monte.sampling": [[416, "module-libcasm.monte.sampling"]], "BasicStatistics": [[417, "basicstatistics"]], "calculated_precision": [[418, "calculated-precision"]], "mean": [[419, "mean"]], "relative_precision": [[420, "relative-precision"]], "BasicStatisticsCalculator": [[422, "basicstatisticscalculator"]], "calculate": [[423, "calculate"]], "confidence": [[424, "confidence"]], "n_resamples": [[426, "n-resamples"]], "weighted_observations_method": [[428, "weighted-observations-method"]], "CompletionCheck": [[429, "completioncheck"]], "check": [[430, "check"]], "count_and_time_check": [[431, "count-and-time-check"]], "count_check": [[432, "count-check"]], "params": [[433, "params"], [460, "params"]], "results": [[435, "results"]], "time_check": [[436, "time-check"]], "CompletionCheckParams": [[437, "completioncheckparams"]], "calc_statistics_f": [[438, "calc-statistics-f"]], "check_base": [[439, "check-base"]], "check_begin": [[440, "check-begin"]], "check_period": [[441, "check-period"]], "check_period_max": [[442, "check-period-max"]], "check_shift": [[443, "check-shift"]], "cutoff_params": [[444, "cutoff-params"]], "equilibration_check_f": [[445, "equilibration-check-f"]], "log_spacing": [[447, "log-spacing"]], "requested_precision": [[448, "requested-precision"], [568, "requested-precision"]], "CompletionCheckResults": [[449, "completioncheckresults"]], "clocktime": [[450, "clocktime"]], "convergence_check_results": [[451, "convergence-check-results"]], "equilibration_check_results": [[453, "equilibration-check-results"]], "full_reset": [[454, "full-reset"]], "has_all_minimums_met": [[455, "has-all-minimums-met"]], "has_any_maximum_met": [[456, "has-any-maximum-met"]], "is_complete": [[457, "is-complete"]], "n_samples": [[458, "n-samples"], [628, "n-samples"], [740, "n-samples"]], "n_samples_at_convergence_check": [[459, "n-samples-at-convergence-check"]], "partial_reset": [[461, "partial-reset"]], "time": [[462, "time"], [487, "time"]], "ConvergenceCheckResults": [[464, "convergencecheckresults"]], "N_samples_for_statistics": [[465, "n-samples-for-statistics"]], "all_converged": [[466, "all-converged"]], "individual_results": [[467, "individual-results"], [538, "individual-results"]], "ConvergenceResultMap": [[469, "convergenceresultmap"]], "CorrelationsData": [[473, "correlationsdata"]], "indices_after_pass": [[475, "indices-after-pass"]], "indices_after_time": [[476, "indices-after-time"]], "jumps_per_position_sample": [[479, "jumps-per-position-sample"], [492, "jumps-per-position-sample"]], "max_n_position_samples": [[480, "max-n-position-samples"], [493, "max-n-position-samples"]], "n_complete_samples": [[481, "n-complete-samples"]], "n_position_samples": [[482, "n-position-samples"]], "output_incomplete_samples": [[483, "output-incomplete-samples"], [494, "output-incomplete-samples"]], "pass": [[484, "pass"]], "step": [[485, "step"]], "stop_run_when_complete": [[486, "stop-run-when-complete"], [495, "stop-run-when-complete"]], "CorrelationsDataParams": [[489, "correlationsdataparams"]], "copy": [[490, "copy"], [672, "copy"]], "CutoffCheckParams": [[497, "cutoffcheckparams"]], "max_clocktime": [[499, "max-clocktime"]], "max_count": [[500, "max-count"]], "max_sample": [[501, "max-sample"]], "max_time": [[502, "max-time"]], "min_clocktime": [[503, "min-clocktime"]], "min_count": [[504, "min-count"]], "min_sample": [[505, "min-sample"]], "min_time": [[506, "min-time"]], "DiscreteVectorFloatHistogram": [[508, "discretevectorfloathistogram"]], "component_names": [[509, "component-names"], [523, "component-names"], [626, "component-names"], [688, "component-names"], [698, "component-names"], [714, "component-names"]], "fraction": [[511, "fraction"], [525, "fraction"]], "max_size": [[513, "max-size"], [527, "max-size"], [559, "max-size"], [588, "max-size"], [702, "max-size"], [718, "max-size"]], "max_size_exceeded": [[514, "max-size-exceeded"], [528, "max-size-exceeded"], [560, "max-size-exceeded"]], "out_of_range_count": [[515, "out-of-range-count"], [529, "out-of-range-count"], [562, "out-of-range-count"]], "size": [[517, "size"], [531, "size"], [563, "size"]], "sum": [[518, "sum"], [532, "sum"], [564, "sum"]], "tol": [[520, "tol"], [707, "tol"]], "DiscreteVectorIntHistogram": [[522, "discretevectorinthistogram"]], "EquilibrationCheckResults": [[535, "equilibrationcheckresults"]], "N_samples_for_all_to_equilibrate": [[536, "n-samples-for-all-to-equilibrate"]], "all_equilibrated": [[537, "all-equilibrated"]], "EquilibrationResultMap": [[540, "equilibrationresultmap"]], "GenericSelectedEventFunction": [[544, "genericselectedeventfunction"]], "description": [[545, "description"], [583, "description"], [689, "description"], [699, "description"], [715, "description"], [752, "description"]], "function": [[546, "function"], [584, "function"], [690, "function"], [700, "function"], [716, "function"], [753, "function"]], "has_value_function": [[547, "has-value-function"], [701, "has-value-function"], [717, "has-value-function"]], "name": [[548, "name"], [589, "name"], [614, "name"], [620, "name"], [691, "name"], [703, "name"], [719, "name"], [754, "name"]], "order": [[549, "order"]], "requires_event_state": [[550, "requires-event-state"], [592, "requires-event-state"], [704, "requires-event-state"], [720, "requires-event-state"]], "Histogram1D": [[551, "histogram1d"]], "begin": [[552, "begin"], [648, "begin"]], "bin_coords": [[553, "bin-coords"]], "bin_width": [[554, "bin-width"], [582, "bin-width"]], "density": [[556, "density"]], "is_log": [[558, "is-log"], [587, "is-log"]], "merge": [[561, "merge"]], "IndividualConvergenceResult": [[566, "individualconvergenceresult"]], "is_converged": [[567, "is-converged"]], "stats": [[569, "stats"]], "IndividualEquilibrationResult": [[571, "individualequilibrationresult"]], "N_samples_for_equilibration": [[572, "n-samples-for-equilibration"]], "is_equilibrated": [[573, "is-equilibrated"]], "PartitionedHistogram1D": [[575, "partitionedhistogram1d"]], "combined_histogram": [[576, "combined-histogram"]], "histograms": [[577, "histograms"]], "partition_names": [[579, "partition-names"], [591, "partition-names"]], "PartitionedHistogramFunction": [[581, "partitionedhistogramfunction"]], "get_partition_function": [[585, "get-partition-function"]], "initial_begin": [[586, "initial-begin"]], "partition": [[590, "partition"]], "PartitionedHistogramFunctionMap": [[593, "partitionedhistogramfunctionmap"]], "RequestedPrecision": [[597, "requestedprecision"]], "abs_convergence_is_required": [[598, "abs-convergence-is-required"]], "abs_precision": [[599, "abs-precision"]], "rel_convergence_is_required": [[601, "rel-convergence-is-required"]], "rel_precision": [[602, "rel-precision"]], "RequestedPrecisionConstructor": [[604, "requestedprecisionconstructor"]], "set_precision": [[605, "set-precision"]], "RequestedPrecisionMap": [[606, "requestedprecisionmap"]], "SAMPLE_METHOD": [[610, "sample-method"]], "CUSTOM": [[611, "custom"]], "LINEAR": [[612, "linear"]], "LOG": [[613, "log"]], "value": [[615, "value"], [621, "value"]], "SAMPLE_MODE": [[616, "sample-mode"]], "BY_PASS": [[617, "by-pass"]], "BY_STEP": [[618, "by-step"]], "BY_TIME": [[619, "by-time"]], "Sampler": [[622, "sampler"]], "component": [[625, "component"]], "n_components": [[627, "n-components"]], "sample": [[629, "sample"], [741, "sample"]], "sample_capacity": [[630, "sample-capacity"], [742, "sample-capacity"]], "set_capacity_increment": [[631, "set-capacity-increment"]], "set_sample_capacity": [[632, "set-sample-capacity"], [743, "set-sample-capacity"]], "set_values": [[633, "set-values"], [744, "set-values"]], "SamplerComponent": [[636, "samplercomponent"]], "component_index": [[637, "component-index"]], "component_name": [[638, "component-name"]], "sampler_name": [[639, "sampler-name"]], "SamplerMap": [[640, "samplermap"]], "SamplingParams": [[644, "samplingparams"]], "append_to_json_sampler_names": [[645, "append-to-json-sampler-names"]], "append_to_sampler_names": [[646, "append-to-sampler-names"]], "base": [[647, "base"]], "do_sample_time": [[649, "do-sample-time"]], "do_sample_trajectory": [[650, "do-sample-trajectory"]], "extend_json_sampler_names": [[651, "extend-json-sampler-names"]], "extend_sampler_names": [[652, "extend-sampler-names"]], "json_sampler_names": [[653, "json-sampler-names"]], "period": [[654, "period"]], "remove_from_json_sampler_names": [[655, "remove-from-json-sampler-names"]], "remove_from_sampler_names": [[656, "remove-from-sampler-names"]], "sample_method": [[657, "sample-method"]], "sample_mode": [[658, "sample-mode"]], "sampler_names": [[659, "sampler-names"]], "shift": [[660, "shift"]], "stochastic_sample_period": [[661, "stochastic-sample-period"]], "SelectedEventData": [[662, "selectedeventdata"]], "continuous_1d_histograms": [[663, "continuous-1d-histograms"]], "correlations_data": [[664, "correlations-data"]], "discrete_vector_float_histograms": [[665, "discrete-vector-float-histograms"]], "discrete_vector_int_histograms": [[666, "discrete-vector-int-histograms"]], "SelectedEventFunctionParams": [[669, "selectedeventfunctionparams"]], "collect": [[670, "collect"]], "collect_hop_correlations": [[671, "collect-hop-correlations"]], "correlations_data_params": [[673, "correlations-data-params"]], "do_not_collect": [[674, "do-not-collect"]], "do_not_collect_hop_correlations": [[675, "do-not-collect-hop-correlations"]], "evaluate": [[676, "evaluate"]], "function_names": [[678, "function-names"]], "get_parameters": [[679, "get-parameters"]], "SelectedEventFunctions": [[682, "selectedeventfunctions"]], "continuous_1d_functions": [[683, "continuous-1d-functions"]], "discrete_vector_float_functions": [[684, "discrete-vector-float-functions"]], "discrete_vector_int_functions": [[685, "discrete-vector-int-functions"]], "generic_functions": [[686, "generic-functions"]], "StateSamplingFunction": [[687, "statesamplingfunction"]], "StateSamplingFunctionMap": [[693, "statesamplingfunctionmap"]], "VectorFloatHistogramFunction": [[697, "vectorfloathistogramfunction"]], "set_value_labels": [[705, "set-value-labels"], [721, "set-value-labels"]], "value_labels": [[708, "value-labels"], [723, "value-labels"]], "VectorFloatHistogramFunctionMap": [[709, "vectorfloathistogramfunctionmap"]], "VectorIntHistogramFunction": [[713, "vectorinthistogramfunction"]], "VectorIntHistogramFunctionMap": [[724, "vectorinthistogramfunctionmap"]], "all_minimums_met": [[728, "all-minimums-met"]], "any_maximum_met": [[729, "any-maximum-met"]], "colmajor_component_names": [[730, "colmajor-component-names"]], "component_convergence_check": [[731, "component-convergence-check"]], "converge": [[732, "converge"]], "convergence_check": [[733, "convergence-check"]], "default_component_names": [[734, "default-component-names"]], "default_equilibration_check": [[735, "default-equilibration-check"]], "get_n_samples": [[736, "get-n-samples"]], "jsonSampler": [[737, "jsonsampler"]], "to_list": [[745, "to-list"]], "jsonSamplerMap": [[747, "jsonsamplermap"]], "jsonStateSamplingFunction": [[751, "jsonstatesamplingfunction"]], "jsonStateSamplingFunctionMap": [[755, "jsonstatesamplingfunctionmap"]], "matrix_as_vector": [[759, "matrix-as-vector"]], "scalar_as_vector": [[760, "scalar-as-vector"]], "Reference (libcasm)": [[761, "reference-libcasm"]], "Usage": [[762, "usage"]], "Completion Checks": [[763, "completion-checks"]], "Performing completion checks": [[763, "performing-completion-checks"]], "Examples": [[763, "examples"]], "Equilibration check": [[763, "equilibration-check"]], "Calculated precision": [[763, "calculated-precision"]], "Overview": [[764, "overview"]], "Monte Carlo models": [[764, "monte-carlo-models"]], "Monte Carlo calculators": [[764, "monte-carlo-calculators"]]}, "indexentries": {"libcasm.monte": [[3, "module-libcasm.monte"]], "module": [[3, "module-libcasm.monte"], [56, "module-libcasm.monte.events"], [238, "module-libcasm.monte.ising_cpp"], [273, "module-libcasm.monte.ising_cpp.semigrand_canonical"], [318, "module-libcasm.monte.ising_py"], [349, "module-libcasm.monte.ising_py.semigrand_canonical"], [399, "module-libcasm.monte.methods"], [416, "module-libcasm.monte.sampling"]], "methodlog (class in libcasm.monte)": [[4, "libcasm.monte.MethodLog"]], "begin_lap() (libcasm.monte.methodlog method)": [[5, "libcasm.monte.MethodLog.begin_lap"]], "begin_section_print_always() (libcasm.monte.methodlog method)": [[6, "libcasm.monte.MethodLog.begin_section_print_always"]], "begin_section_print_if_debug() (libcasm.monte.methodlog method)": [[7, "libcasm.monte.MethodLog.begin_section_print_if_debug"]], "begin_section_print_if_quiet() (libcasm.monte.methodlog method)": [[8, "libcasm.monte.MethodLog.begin_section_print_if_quiet"]], "begin_section_print_if_standard() (libcasm.monte.methodlog method)": [[9, "libcasm.monte.MethodLog.begin_section_print_if_standard"]], "begin_section_print_if_verbose() (libcasm.monte.methodlog method)": [[10, "libcasm.monte.MethodLog.begin_section_print_if_verbose"]], "decrease_indent() (libcasm.monte.methodlog method)": [[11, "libcasm.monte.MethodLog.decrease_indent"]], "end_section() (libcasm.monte.methodlog method)": [[12, "libcasm.monte.MethodLog.end_section"]], "hide_clock() (libcasm.monte.methodlog method)": [[13, "libcasm.monte.MethodLog.hide_clock"]], "increase_indent() (libcasm.monte.methodlog method)": [[14, "libcasm.monte.MethodLog.increase_indent"]], "indent_str() (libcasm.monte.methodlog method)": [[15, "libcasm.monte.MethodLog.indent_str"]], "lap_time() (libcasm.monte.methodlog method)": [[16, "libcasm.monte.MethodLog.lap_time"]], "log_frequency() (libcasm.monte.methodlog method)": [[17, "libcasm.monte.MethodLog.log_frequency"]], "logfile_path() (libcasm.monte.methodlog method)": [[18, "libcasm.monte.MethodLog.logfile_path"]], "paragraph() (libcasm.monte.methodlog method)": [[19, "libcasm.monte.MethodLog.paragraph"]], "paragraph_justification() (libcasm.monte.methodlog method)": [[20, "libcasm.monte.MethodLog.paragraph_justification"]], "paragraph_width() (libcasm.monte.methodlog method)": [[21, "libcasm.monte.MethodLog.paragraph_width"]], "print() (libcasm.monte.methodlog method)": [[22, "libcasm.monte.MethodLog.print"]], "reset() (libcasm.monte.methodlog method)": [[23, "libcasm.monte.MethodLog.reset"]], "reset_to_stdout() (libcasm.monte.methodlog method)": [[24, "libcasm.monte.MethodLog.reset_to_stdout"]], "restart_clock() (libcasm.monte.methodlog method)": [[25, "libcasm.monte.MethodLog.restart_clock"]], "section() (libcasm.monte.methodlog method)": [[26, "libcasm.monte.MethodLog.section"]], "set_debug() (libcasm.monte.methodlog method)": [[27, "libcasm.monte.MethodLog.set_debug"]], "set_indent_space() (libcasm.monte.methodlog method)": [[28, "libcasm.monte.MethodLog.set_indent_space"]], "set_initial_indent_space() (libcasm.monte.methodlog method)": [[29, "libcasm.monte.MethodLog.set_initial_indent_space"]], "set_paragraph_justification() (libcasm.monte.methodlog method)": [[30, "libcasm.monte.MethodLog.set_paragraph_justification"]], "set_paragraph_width() (libcasm.monte.methodlog method)": [[31, "libcasm.monte.MethodLog.set_paragraph_width"]], "set_quiet() (libcasm.monte.methodlog method)": [[32, "libcasm.monte.MethodLog.set_quiet"]], "set_standard() (libcasm.monte.methodlog method)": [[33, "libcasm.monte.MethodLog.set_standard"]], "set_verbose() (libcasm.monte.methodlog method)": [[34, "libcasm.monte.MethodLog.set_verbose"]], "show_clock() (libcasm.monte.methodlog method)": [[35, "libcasm.monte.MethodLog.show_clock"]], "time_s() (libcasm.monte.methodlog method)": [[36, "libcasm.monte.MethodLog.time_s"]], "verbatim() (libcasm.monte.methodlog method)": [[37, "libcasm.monte.MethodLog.verbatim"]], "randomnumberengine (class in libcasm.monte)": [[38, "libcasm.monte.RandomNumberEngine"]], "dump() (libcasm.monte.randomnumberengine method)": [[39, "libcasm.monte.RandomNumberEngine.dump"]], "load() (libcasm.monte.randomnumberengine method)": [[40, "libcasm.monte.RandomNumberEngine.load"]], "seed() (libcasm.monte.randomnumberengine method)": [[41, "libcasm.monte.RandomNumberEngine.seed"]], "seed_seq() (libcasm.monte.randomnumberengine method)": [[42, "libcasm.monte.RandomNumberEngine.seed_seq"]], "randomnumbergenerator (class in libcasm.monte)": [[43, "libcasm.monte.RandomNumberGenerator"]], "engine() (libcasm.monte.randomnumbergenerator method)": [[44, "libcasm.monte.RandomNumberGenerator.engine"]], "random_int() (libcasm.monte.randomnumbergenerator method)": [[45, "libcasm.monte.RandomNumberGenerator.random_int"]], "random_real() (libcasm.monte.randomnumbergenerator method)": [[46, "libcasm.monte.RandomNumberGenerator.random_real"]], "valuemap (class in libcasm.monte)": [[47, "libcasm.monte.ValueMap"]], "boolean_values (libcasm.monte.valuemap property)": [[48, "libcasm.monte.ValueMap.boolean_values"]], "from_dict() (libcasm.monte.valuemap static method)": [[49, "libcasm.monte.ValueMap.from_dict"]], "is_mismatched() (libcasm.monte.valuemap method)": [[50, "libcasm.monte.ValueMap.is_mismatched"]], "make_incremented_values() (libcasm.monte.valuemap method)": [[51, "libcasm.monte.ValueMap.make_incremented_values"]], "matrix_values (libcasm.monte.valuemap property)": [[52, "libcasm.monte.ValueMap.matrix_values"]], "scalar_values (libcasm.monte.valuemap property)": [[53, "libcasm.monte.ValueMap.scalar_values"]], "to_dict() (libcasm.monte.valuemap method)": [[54, "libcasm.monte.ValueMap.to_dict"]], "vector_values (libcasm.monte.valuemap property)": [[55, "libcasm.monte.ValueMap.vector_values"]], "libcasm.monte.events": [[56, "module-libcasm.monte.events"]], "atom (class in libcasm.monte.events)": [[57, "libcasm.monte.events.Atom"]], "n_jumps (libcasm.monte.events.atom property)": [[58, "libcasm.monte.events.Atom.n_jumps"]], "translation (libcasm.monte.events.atom property)": [[59, "libcasm.monte.events.Atom.translation"]], "atomlocation (class in libcasm.monte.events)": [[60, "libcasm.monte.events.AtomLocation"]], "linear_site_index (libcasm.monte.events.atomlocation property)": [[61, "libcasm.monte.events.AtomLocation.linear_site_index"]], "mol_comp (libcasm.monte.events.atomlocation property)": [[62, "libcasm.monte.events.AtomLocation.mol_comp"]], "mol_id (libcasm.monte.events.atomlocation property)": [[63, "libcasm.monte.events.AtomLocation.mol_id"]], "atomtraj (class in libcasm.monte.events)": [[64, "libcasm.monte.events.AtomTraj"]], "delta_ijk (libcasm.monte.events.atomtraj property)": [[65, "libcasm.monte.events.AtomTraj.delta_ijk"]], "from (libcasm.monte.events.atomtraj property)": [[66, "libcasm.monte.events.AtomTraj.from"]], "to (libcasm.monte.events.atomtraj property)": [[67, "libcasm.monte.events.AtomTraj.to"]], "atomtrajvector (class in libcasm.monte.events)": [[68, "libcasm.monte.events.AtomTrajVector"]], "append() (libcasm.monte.events.atomtrajvector method)": [[69, "libcasm.monte.events.AtomTrajVector.append"]], "clear() (libcasm.monte.events.atomtrajvector method)": [[70, "libcasm.monte.events.AtomTrajVector.clear"]], "extend() (libcasm.monte.events.atomtrajvector method)": [[71, "libcasm.monte.events.AtomTrajVector.extend"]], "insert() (libcasm.monte.events.atomtrajvector method)": [[72, "libcasm.monte.events.AtomTrajVector.insert"]], "pop() (libcasm.monte.events.atomtrajvector method)": [[73, "libcasm.monte.events.AtomTrajVector.pop"]], "atomvector (class in libcasm.monte.events)": [[74, "libcasm.monte.events.AtomVector"]], "append() (libcasm.monte.events.atomvector method)": [[75, "libcasm.monte.events.AtomVector.append"]], "clear() (libcasm.monte.events.atomvector method)": [[76, "libcasm.monte.events.AtomVector.clear"]], "extend() (libcasm.monte.events.atomvector method)": [[77, "libcasm.monte.events.AtomVector.extend"]], "insert() (libcasm.monte.events.atomvector method)": [[78, "libcasm.monte.events.AtomVector.insert"]], "pop() (libcasm.monte.events.atomvector method)": [[79, "libcasm.monte.events.AtomVector.pop"]], "conversions (class in libcasm.monte.events)": [[80, "libcasm.monte.events.Conversions"]], "asym_size() (libcasm.monte.events.conversions method)": [[81, "libcasm.monte.events.Conversions.asym_size"]], "asym_to_b() (libcasm.monte.events.conversions method)": [[82, "libcasm.monte.events.Conversions.asym_to_b"]], "asym_to_unitl() (libcasm.monte.events.conversions method)": [[83, "libcasm.monte.events.Conversions.asym_to_unitl"]], "bijk_to_asym() (libcasm.monte.events.conversions method)": [[84, "libcasm.monte.events.Conversions.bijk_to_asym"]], "bijk_to_l() (libcasm.monte.events.conversions method)": [[85, "libcasm.monte.events.Conversions.bijk_to_l"]], "bijk_to_unitl() (libcasm.monte.events.conversions method)": [[86, "libcasm.monte.events.Conversions.bijk_to_unitl"]], "l_size() (libcasm.monte.events.conversions method)": [[87, "libcasm.monte.events.Conversions.l_size"]], "l_to_asym() (libcasm.monte.events.conversions method)": [[88, "libcasm.monte.events.Conversions.l_to_asym"]], "l_to_b() (libcasm.monte.events.conversions method)": [[89, "libcasm.monte.events.Conversions.l_to_b"]], "l_to_basis_cart() (libcasm.monte.events.conversions method)": [[90, "libcasm.monte.events.Conversions.l_to_basis_cart"]], "l_to_basis_frac() (libcasm.monte.events.conversions method)": [[91, "libcasm.monte.events.Conversions.l_to_basis_frac"]], "l_to_bijk() (libcasm.monte.events.conversions method)": [[92, "libcasm.monte.events.Conversions.l_to_bijk"]], "l_to_cart() (libcasm.monte.events.conversions method)": [[93, "libcasm.monte.events.Conversions.l_to_cart"]], "l_to_frac() (libcasm.monte.events.conversions method)": [[94, "libcasm.monte.events.Conversions.l_to_frac"]], "l_to_ijk() (libcasm.monte.events.conversions method)": [[95, "libcasm.monte.events.Conversions.l_to_ijk"]], "l_to_unitl() (libcasm.monte.events.conversions method)": [[96, "libcasm.monte.events.Conversions.l_to_unitl"]], "lat_column_mat() (libcasm.monte.events.conversions method)": [[97, "libcasm.monte.events.Conversions.lat_column_mat"]], "make_with_custom_asym() (libcasm.monte.events.conversions static method)": [[98, "libcasm.monte.events.Conversions.make_with_custom_asym"]], "make_with_custom_unitcell() (libcasm.monte.events.conversions static method)": [[99, "libcasm.monte.events.Conversions.make_with_custom_unitcell"]], "occ_size() (libcasm.monte.events.conversions method)": [[100, "libcasm.monte.events.Conversions.occ_size"]], "occ_to_species_index() (libcasm.monte.events.conversions method)": [[101, "libcasm.monte.events.Conversions.occ_to_species_index"]], "site_index_converter() (libcasm.monte.events.conversions method)": [[102, "libcasm.monte.events.Conversions.site_index_converter"]], "species_allowed() (libcasm.monte.events.conversions method)": [[103, "libcasm.monte.events.Conversions.species_allowed"]], "species_index_to_atoms_size() (libcasm.monte.events.conversions method)": [[104, "libcasm.monte.events.Conversions.species_index_to_atoms_size"]], "species_index_to_name() (libcasm.monte.events.conversions method)": [[105, "libcasm.monte.events.Conversions.species_index_to_name"]], "species_index_to_occupant() (libcasm.monte.events.conversions method)": [[106, "libcasm.monte.events.Conversions.species_index_to_occupant"]], "species_name_to_index() (libcasm.monte.events.conversions method)": [[107, "libcasm.monte.events.Conversions.species_name_to_index"]], "species_size() (libcasm.monte.events.conversions method)": [[108, "libcasm.monte.events.Conversions.species_size"]], "species_to_occ_index() (libcasm.monte.events.conversions method)": [[109, "libcasm.monte.events.Conversions.species_to_occ_index"]], "transformation_matrix_to_super() (libcasm.monte.events.conversions method)": [[110, "libcasm.monte.events.Conversions.transformation_matrix_to_super"]], "unit_site_index_converter() (libcasm.monte.events.conversions method)": [[111, "libcasm.monte.events.Conversions.unit_site_index_converter"]], "unit_transformation_matrix_to_super() (libcasm.monte.events.conversions method)": [[112, "libcasm.monte.events.Conversions.unit_transformation_matrix_to_super"]], "unitcell_index_converter() (libcasm.monte.events.conversions method)": [[113, "libcasm.monte.events.Conversions.unitcell_index_converter"]], "unitl_size() (libcasm.monte.events.conversions method)": [[114, "libcasm.monte.events.Conversions.unitl_size"]], "unitl_to_asym() (libcasm.monte.events.conversions method)": [[115, "libcasm.monte.events.Conversions.unitl_to_asym"]], "unitl_to_b() (libcasm.monte.events.conversions method)": [[116, "libcasm.monte.events.Conversions.unitl_to_b"]], "unitl_to_bijk() (libcasm.monte.events.conversions method)": [[117, "libcasm.monte.events.Conversions.unitl_to_bijk"]], "intvector (class in libcasm.monte.events)": [[118, "libcasm.monte.events.IntVector"]], "append() (libcasm.monte.events.intvector method)": [[119, "libcasm.monte.events.IntVector.append"]], "clear() (libcasm.monte.events.intvector method)": [[120, "libcasm.monte.events.IntVector.clear"]], "count() (libcasm.monte.events.intvector method)": [[121, "libcasm.monte.events.IntVector.count"]], "extend() (libcasm.monte.events.intvector method)": [[122, "libcasm.monte.events.IntVector.extend"]], "insert() (libcasm.monte.events.intvector method)": [[123, "libcasm.monte.events.IntVector.insert"]], "pop() (libcasm.monte.events.intvector method)": [[124, "libcasm.monte.events.IntVector.pop"]], "remove() (libcasm.monte.events.intvector method)": [[125, "libcasm.monte.events.IntVector.remove"]], "longvector (class in libcasm.monte.events)": [[126, "libcasm.monte.events.LongVector"]], "append() (libcasm.monte.events.longvector method)": [[127, "libcasm.monte.events.LongVector.append"]], "clear() (libcasm.monte.events.longvector method)": [[128, "libcasm.monte.events.LongVector.clear"]], "count() (libcasm.monte.events.longvector method)": [[129, "libcasm.monte.events.LongVector.count"]], "extend() (libcasm.monte.events.longvector method)": [[130, "libcasm.monte.events.LongVector.extend"]], "insert() (libcasm.monte.events.longvector method)": [[131, "libcasm.monte.events.LongVector.insert"]], "pop() (libcasm.monte.events.longvector method)": [[132, "libcasm.monte.events.LongVector.pop"]], "remove() (libcasm.monte.events.longvector method)": [[133, "libcasm.monte.events.LongVector.remove"]], "mol (class in libcasm.monte.events)": [[134, "libcasm.monte.events.Mol"]], "asymmetric_unit_index (libcasm.monte.events.mol property)": [[135, "libcasm.monte.events.Mol.asymmetric_unit_index"]], "component_id (libcasm.monte.events.mol property)": [[136, "libcasm.monte.events.Mol.component_id"]], "id (libcasm.monte.events.mol property)": [[137, "libcasm.monte.events.Mol.id"]], "linear_site_index (libcasm.monte.events.mol property)": [[138, "libcasm.monte.events.Mol.linear_site_index"]], "mol_location_index (libcasm.monte.events.mol property)": [[139, "libcasm.monte.events.Mol.mol_location_index"]], "species_index (libcasm.monte.events.mol property)": [[140, "libcasm.monte.events.Mol.species_index"]], "molvector (class in libcasm.monte.events)": [[141, "libcasm.monte.events.MolVector"]], "append() (libcasm.monte.events.molvector method)": [[142, "libcasm.monte.events.MolVector.append"]], "clear() (libcasm.monte.events.molvector method)": [[143, "libcasm.monte.events.MolVector.clear"]], "extend() (libcasm.monte.events.molvector method)": [[144, "libcasm.monte.events.MolVector.extend"]], "insert() (libcasm.monte.events.molvector method)": [[145, "libcasm.monte.events.MolVector.insert"]], "pop() (libcasm.monte.events.molvector method)": [[146, "libcasm.monte.events.MolVector.pop"]], "multioccswap (class in libcasm.monte.events)": [[147, "libcasm.monte.events.MultiOccSwap"]], "from_dict() (libcasm.monte.events.multioccswap static method)": [[148, "libcasm.monte.events.MultiOccSwap.from_dict"]], "reverse() (libcasm.monte.events.multioccswap method)": [[149, "libcasm.monte.events.MultiOccSwap.reverse"]], "sort() (libcasm.monte.events.multioccswap method)": [[150, "libcasm.monte.events.MultiOccSwap.sort"]], "sorted() (libcasm.monte.events.multioccswap method)": [[151, "libcasm.monte.events.MultiOccSwap.sorted"]], "swaps (libcasm.monte.events.multioccswap property)": [[152, "libcasm.monte.events.MultiOccSwap.swaps"]], "to_dict() (libcasm.monte.events.multioccswap method)": [[153, "libcasm.monte.events.MultiOccSwap.to_dict"]], "total_count (libcasm.monte.events.multioccswap property)": [[154, "libcasm.monte.events.MultiOccSwap.total_count"]], "occcandidate (class in libcasm.monte.events)": [[155, "libcasm.monte.events.OccCandidate"]], "asymmetric_unit_index (libcasm.monte.events.occcandidate property)": [[156, "libcasm.monte.events.OccCandidate.asymmetric_unit_index"]], "from_dict() (libcasm.monte.events.occcandidate static method)": [[157, "libcasm.monte.events.OccCandidate.from_dict"]], "is_valid() (libcasm.monte.events.occcandidate method)": [[158, "libcasm.monte.events.OccCandidate.is_valid"]], "species_index (libcasm.monte.events.occcandidate property)": [[159, "libcasm.monte.events.OccCandidate.species_index"]], "to_dict() (libcasm.monte.events.occcandidate method)": [[160, "libcasm.monte.events.OccCandidate.to_dict"]], "occcandidatelist (class in libcasm.monte.events)": [[161, "libcasm.monte.events.OccCandidateList"]], "from_dict() (libcasm.monte.events.occcandidatelist static method)": [[162, "libcasm.monte.events.OccCandidateList.from_dict"]], "index() (libcasm.monte.events.occcandidatelist method)": [[163, "libcasm.monte.events.OccCandidateList.index"]], "matching_index() (libcasm.monte.events.occcandidatelist method)": [[164, "libcasm.monte.events.OccCandidateList.matching_index"]], "to_dict() (libcasm.monte.events.occcandidatelist method)": [[165, "libcasm.monte.events.OccCandidateList.to_dict"]], "occevent (class in libcasm.monte.events)": [[166, "libcasm.monte.events.OccEvent"]], "atom_traj (libcasm.monte.events.occevent property)": [[167, "libcasm.monte.events.OccEvent.atom_traj"]], "linear_site_index (libcasm.monte.events.occevent property)": [[168, "libcasm.monte.events.OccEvent.linear_site_index"]], "new_occ (libcasm.monte.events.occevent property)": [[169, "libcasm.monte.events.OccEvent.new_occ"]], "occ_transform (libcasm.monte.events.occevent property)": [[170, "libcasm.monte.events.OccEvent.occ_transform"]], "occlocation (class in libcasm.monte.events)": [[171, "libcasm.monte.events.OccLocation"]], "apply() (libcasm.monte.events.occlocation method)": [[172, "libcasm.monte.events.OccLocation.apply"]], "atom() (libcasm.monte.events.occlocation method)": [[173, "libcasm.monte.events.OccLocation.atom"]], "atom_info_final() (libcasm.monte.events.occlocation method)": [[174, "libcasm.monte.events.OccLocation.atom_info_final"]], "atom_info_initial() (libcasm.monte.events.occlocation method)": [[175, "libcasm.monte.events.OccLocation.atom_info_initial"]], "atom_positions_cart() (libcasm.monte.events.occlocation method)": [[176, "libcasm.monte.events.OccLocation.atom_positions_cart"]], "atom_positions_cart_within() (libcasm.monte.events.occlocation method)": [[177, "libcasm.monte.events.OccLocation.atom_positions_cart_within"]], "atom_size() (libcasm.monte.events.occlocation method)": [[178, "libcasm.monte.events.OccLocation.atom_size"]], "cand_size() (libcasm.monte.events.occlocation method)": [[179, "libcasm.monte.events.OccLocation.cand_size"]], "cand_size_by_candidate_index() (libcasm.monte.events.occlocation method)": [[180, "libcasm.monte.events.OccLocation.cand_size_by_candidate_index"]], "candidate_list() (libcasm.monte.events.occlocation method)": [[181, "libcasm.monte.events.OccLocation.candidate_list"]], "choose_mol() (libcasm.monte.events.occlocation method)": [[182, "libcasm.monte.events.OccLocation.choose_mol"]], "choose_mol_by_candidate_index() (libcasm.monte.events.occlocation method)": [[183, "libcasm.monte.events.OccLocation.choose_mol_by_candidate_index"]], "clear_atom_info_final() (libcasm.monte.events.occlocation method)": [[184, "libcasm.monte.events.OccLocation.clear_atom_info_final"]], "convert() (libcasm.monte.events.occlocation method)": [[185, "libcasm.monte.events.OccLocation.convert"]], "current_atom_n_jumps() (libcasm.monte.events.occlocation method)": [[186, "libcasm.monte.events.OccLocation.current_atom_n_jumps"]], "current_atom_names() (libcasm.monte.events.occlocation method)": [[187, "libcasm.monte.events.OccLocation.current_atom_names"]], "current_atom_position_index() (libcasm.monte.events.occlocation method)": [[188, "libcasm.monte.events.OccLocation.current_atom_position_index"]], "current_atom_species_index() (libcasm.monte.events.occlocation method)": [[189, "libcasm.monte.events.OccLocation.current_atom_species_index"]], "initial_atom_position_index() (libcasm.monte.events.occlocation method)": [[190, "libcasm.monte.events.OccLocation.initial_atom_position_index"]], "initial_atom_species_index() (libcasm.monte.events.occlocation method)": [[191, "libcasm.monte.events.OccLocation.initial_atom_species_index"]], "initialize() (libcasm.monte.events.occlocation method)": [[192, "libcasm.monte.events.OccLocation.initialize"]], "linear_site_index_to_mol_id() (libcasm.monte.events.occlocation method)": [[193, "libcasm.monte.events.OccLocation.linear_site_index_to_mol_id"]], "mol() (libcasm.monte.events.occlocation method)": [[194, "libcasm.monte.events.OccLocation.mol"]], "mol_id() (libcasm.monte.events.occlocation method)": [[195, "libcasm.monte.events.OccLocation.mol_id"]], "mol_id_by_candidate_index() (libcasm.monte.events.occlocation method)": [[196, "libcasm.monte.events.OccLocation.mol_id_by_candidate_index"]], "mol_size() (libcasm.monte.events.occlocation method)": [[197, "libcasm.monte.events.OccLocation.mol_size"]], "unique_atom_id() (libcasm.monte.events.occlocation method)": [[198, "libcasm.monte.events.OccLocation.unique_atom_id"]], "occswap (class in libcasm.monte.events)": [[199, "libcasm.monte.events.OccSwap"]], "first (libcasm.monte.events.occswap property)": [[200, "libcasm.monte.events.OccSwap.first"]], "from_dict() (libcasm.monte.events.occswap static method)": [[201, "libcasm.monte.events.OccSwap.from_dict"]], "is_valid() (libcasm.monte.events.occswap method)": [[202, "libcasm.monte.events.OccSwap.is_valid"]], "reverse() (libcasm.monte.events.occswap method)": [[203, "libcasm.monte.events.OccSwap.reverse"]], "second (libcasm.monte.events.occswap property)": [[204, "libcasm.monte.events.OccSwap.second"]], "sort() (libcasm.monte.events.occswap method)": [[205, "libcasm.monte.events.OccSwap.sort"]], "sorted() (libcasm.monte.events.occswap method)": [[206, "libcasm.monte.events.OccSwap.sorted"]], "to_dict() (libcasm.monte.events.occswap method)": [[207, "libcasm.monte.events.OccSwap.to_dict"]], "occswapcountmap (class in libcasm.monte.events)": [[208, "libcasm.monte.events.OccSwapCountMap"]], "items() (libcasm.monte.events.occswapcountmap method)": [[209, "libcasm.monte.events.OccSwapCountMap.items"]], "keys() (libcasm.monte.events.occswapcountmap method)": [[210, "libcasm.monte.events.OccSwapCountMap.keys"]], "values() (libcasm.monte.events.occswapcountmap method)": [[211, "libcasm.monte.events.OccSwapCountMap.values"]], "occtransform (class in libcasm.monte.events)": [[212, "libcasm.monte.events.OccTransform"]], "asym (libcasm.monte.events.occtransform property)": [[213, "libcasm.monte.events.OccTransform.asym"]], "from_species (libcasm.monte.events.occtransform property)": [[214, "libcasm.monte.events.OccTransform.from_species"]], "linear_site_index (libcasm.monte.events.occtransform property)": [[215, "libcasm.monte.events.OccTransform.linear_site_index"]], "mol_id (libcasm.monte.events.occtransform property)": [[216, "libcasm.monte.events.OccTransform.mol_id"]], "to_species (libcasm.monte.events.occtransform property)": [[217, "libcasm.monte.events.OccTransform.to_species"]], "occtransformvector (class in libcasm.monte.events)": [[218, "libcasm.monte.events.OccTransformVector"]], "append() (libcasm.monte.events.occtransformvector method)": [[219, "libcasm.monte.events.OccTransformVector.append"]], "clear() (libcasm.monte.events.occtransformvector method)": [[220, "libcasm.monte.events.OccTransformVector.clear"]], "extend() (libcasm.monte.events.occtransformvector method)": [[221, "libcasm.monte.events.OccTransformVector.extend"]], "insert() (libcasm.monte.events.occtransformvector method)": [[222, "libcasm.monte.events.OccTransformVector.insert"]], "pop() (libcasm.monte.events.occtransformvector method)": [[223, "libcasm.monte.events.OccTransformVector.pop"]], "choose_canonical_swap() (in module libcasm.monte.events)": [[224, "libcasm.monte.events.choose_canonical_swap"]], "choose_semigrand_canonical_multiswap() (in module libcasm.monte.events)": [[225, "libcasm.monte.events.choose_semigrand_canonical_multiswap"]], "choose_semigrand_canonical_swap() (in module libcasm.monte.events)": [[226, "libcasm.monte.events.choose_semigrand_canonical_swap"]], "is_allowed_canonical_swap() (in module libcasm.monte.events)": [[227, "libcasm.monte.events.is_allowed_canonical_swap"]], "make_canonical_swaps() (in module libcasm.monte.events)": [[228, "libcasm.monte.events.make_canonical_swaps"]], "make_multiswaps() (in module libcasm.monte.events)": [[229, "libcasm.monte.events.make_multiswaps"]], "make_semigrand_canonical_swaps() (in module libcasm.monte.events)": [[230, "libcasm.monte.events.make_semigrand_canonical_swaps"]], "propose_canonical_event() (in module libcasm.monte.events)": [[231, "libcasm.monte.events.propose_canonical_event"]], "propose_canonical_event_from_swap() (in module libcasm.monte.events)": [[232, "libcasm.monte.events.propose_canonical_event_from_swap"]], "propose_semigrand_canonical_event() (in module libcasm.monte.events)": [[233, "libcasm.monte.events.propose_semigrand_canonical_event"]], "propose_semigrand_canonical_event_from_multiswap() (in module libcasm.monte.events)": [[234, "libcasm.monte.events.propose_semigrand_canonical_event_from_multiswap"]], "propose_semigrand_canonical_event_from_swap() (in module libcasm.monte.events)": [[235, "libcasm.monte.events.propose_semigrand_canonical_event_from_swap"]], "propose_semigrand_canonical_multiswap_event() (in module libcasm.monte.events)": [[236, "libcasm.monte.events.propose_semigrand_canonical_multiswap_event"]], "swaps_allowed_per_unitcell() (in module libcasm.monte.events)": [[237, "libcasm.monte.events.swaps_allowed_per_unitcell"]], "libcasm.monte.ising_cpp": [[238, "module-libcasm.monte.ising_cpp"]], "isingconfiguration (class in libcasm.monte.ising_cpp)": [[239, "libcasm.monte.ising_cpp.IsingConfiguration"]], "from_dict() (libcasm.monte.ising_cpp.isingconfiguration static method)": [[240, "libcasm.monte.ising_cpp.IsingConfiguration.from_dict"]], "from_linear_site_index() (libcasm.monte.ising_cpp.isingconfiguration method)": [[241, "libcasm.monte.ising_cpp.IsingConfiguration.from_linear_site_index"]], "n_sites (libcasm.monte.ising_cpp.isingconfiguration property)": [[242, "libcasm.monte.ising_cpp.IsingConfiguration.n_sites"]], "n_unitcells (libcasm.monte.ising_cpp.isingconfiguration property)": [[243, "libcasm.monte.ising_cpp.IsingConfiguration.n_unitcells"]], "n_variable_sites (libcasm.monte.ising_cpp.isingconfiguration property)": [[244, "libcasm.monte.ising_cpp.IsingConfiguration.n_variable_sites"]], "occ() (libcasm.monte.ising_cpp.isingconfiguration method)": [[245, "libcasm.monte.ising_cpp.IsingConfiguration.occ"]], "occupation() (libcasm.monte.ising_cpp.isingconfiguration method)": [[246, "libcasm.monte.ising_cpp.IsingConfiguration.occupation"]], "set_occ() (libcasm.monte.ising_cpp.isingconfiguration method)": [[247, "libcasm.monte.ising_cpp.IsingConfiguration.set_occ"]], "set_occupation() (libcasm.monte.ising_cpp.isingconfiguration method)": [[248, "libcasm.monte.ising_cpp.IsingConfiguration.set_occupation"]], "shape (libcasm.monte.ising_cpp.isingconfiguration property)": [[249, "libcasm.monte.ising_cpp.IsingConfiguration.shape"]], "to_dict() (libcasm.monte.ising_cpp.isingconfiguration method)": [[250, "libcasm.monte.ising_cpp.IsingConfiguration.to_dict"]], "to_linear_site_index() (libcasm.monte.ising_cpp.isingconfiguration method)": [[251, "libcasm.monte.ising_cpp.IsingConfiguration.to_linear_site_index"]], "within() (libcasm.monte.ising_cpp.isingconfiguration method)": [[252, "libcasm.monte.ising_cpp.IsingConfiguration.within"]], "isingformationenergy (class in libcasm.monte.ising_cpp)": [[253, "libcasm.monte.ising_cpp.IsingFormationEnergy"]], "occ_delta_per_supercell() (libcasm.monte.ising_cpp.isingformationenergy method)": [[254, "libcasm.monte.ising_cpp.IsingFormationEnergy.occ_delta_per_supercell"]], "per_supercell() (libcasm.monte.ising_cpp.isingformationenergy method)": [[255, "libcasm.monte.ising_cpp.IsingFormationEnergy.per_supercell"]], "per_unitcell() (libcasm.monte.ising_cpp.isingformationenergy method)": [[256, "libcasm.monte.ising_cpp.IsingFormationEnergy.per_unitcell"]], "set_state() (libcasm.monte.ising_cpp.isingformationenergy method)": [[257, "libcasm.monte.ising_cpp.IsingFormationEnergy.set_state"]], "isingparamcomposition (class in libcasm.monte.ising_cpp)": [[258, "libcasm.monte.ising_cpp.IsingParamComposition"]], "n_independent_compositions() (libcasm.monte.ising_cpp.isingparamcomposition method)": [[259, "libcasm.monte.ising_cpp.IsingParamComposition.n_independent_compositions"]], "occ_delta_per_supercell() (libcasm.monte.ising_cpp.isingparamcomposition method)": [[260, "libcasm.monte.ising_cpp.IsingParamComposition.occ_delta_per_supercell"]], "per_supercell() (libcasm.monte.ising_cpp.isingparamcomposition method)": [[261, "libcasm.monte.ising_cpp.IsingParamComposition.per_supercell"]], "per_unitcell() (libcasm.monte.ising_cpp.isingparamcomposition method)": [[262, "libcasm.monte.ising_cpp.IsingParamComposition.per_unitcell"]], "set_state() (libcasm.monte.ising_cpp.isingparamcomposition method)": [[263, "libcasm.monte.ising_cpp.IsingParamComposition.set_state"]], "isingstate (class in libcasm.monte.ising_cpp)": [[264, "libcasm.monte.ising_cpp.IsingState"]], "conditions (libcasm.monte.ising_cpp.isingstate property)": [[265, "libcasm.monte.ising_cpp.IsingState.conditions"]], "configuration (libcasm.monte.ising_cpp.isingstate property)": [[266, "libcasm.monte.ising_cpp.IsingState.configuration"]], "from_dict() (libcasm.monte.ising_cpp.isingstate static method)": [[267, "libcasm.monte.ising_cpp.IsingState.from_dict"]], "properties (libcasm.monte.ising_cpp.isingstate property)": [[268, "libcasm.monte.ising_cpp.IsingState.properties"]], "to_dict() (libcasm.monte.ising_cpp.isingstate method)": [[269, "libcasm.monte.ising_cpp.IsingState.to_dict"]], "isingsystem (class in libcasm.monte.ising_cpp)": [[270, "libcasm.monte.ising_cpp.IsingSystem"]], "formation_energy_calculator (libcasm.monte.ising_cpp.isingsystem property)": [[271, "libcasm.monte.ising_cpp.IsingSystem.formation_energy_calculator"]], "param_composition_calculator (libcasm.monte.ising_cpp.isingsystem property)": [[272, "libcasm.monte.ising_cpp.IsingSystem.param_composition_calculator"]], "libcasm.monte.ising_cpp.semigrand_canonical": [[273, "module-libcasm.monte.ising_cpp.semigrand_canonical"]], "semigrandcanonicalcalculator (class in libcasm.monte.ising_cpp.semigrand_canonical)": [[274, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator"]], "conditions (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator property)": [[275, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.conditions"]], "data (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator property)": [[276, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.data"]], "default_json_sampling_functions() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator method)": [[277, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.default_json_sampling_functions"]], "default_sampling_functions() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator method)": [[278, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.default_sampling_functions"]], "formation_energy_calculator (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator property)": [[279, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.formation_energy_calculator"]], "param_composition_calculator (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator property)": [[280, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.param_composition_calculator"]], "potential (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator property)": [[281, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.potential"]], "run() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator method)": [[282, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.run"]], "state (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator property)": [[283, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.state"]], "system (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalcalculator property)": [[284, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalCalculator.system"]], "semigrandcanonicalconditions (class in libcasm.monte.ising_cpp.semigrand_canonical)": [[285, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions"]], "exchange_potential (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalconditions property)": [[286, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.exchange_potential"]], "from_dict() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalconditions static method)": [[287, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.from_dict"]], "from_values() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalconditions static method)": [[288, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.from_values"]], "temperature (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalconditions property)": [[289, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.temperature"]], "to_dict() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalconditions method)": [[290, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.to_dict"]], "to_values() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalconditions method)": [[291, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalConditions.to_values"]], "semigrandcanonicaldata (class in libcasm.monte.ising_cpp.semigrand_canonical)": [[292, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData"]], "acceptance_rate() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata method)": [[293, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.acceptance_rate"]], "completion_check (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[294, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.completion_check"]], "json_samplers (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[295, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.json_samplers"]], "json_sampling_functions (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[296, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.json_sampling_functions"]], "n_accept (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[297, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_accept"]], "n_pass (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[298, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_pass"]], "n_reject (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[299, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_reject"]], "n_steps_per_pass (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[300, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.n_steps_per_pass"]], "rejection_rate() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata method)": [[301, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.rejection_rate"]], "reset() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata method)": [[302, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.reset"]], "sample_weight (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[303, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.sample_weight"]], "samplers (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[304, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.samplers"]], "sampling_functions (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata property)": [[305, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.sampling_functions"]], "to_dict() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaldata method)": [[306, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalData.to_dict"]], "semigrandcanonicaleventgenerator (class in libcasm.monte.ising_cpp.semigrand_canonical)": [[307, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator"]], "apply() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaleventgenerator method)": [[308, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.apply"]], "propose() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaleventgenerator method)": [[309, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.propose"]], "set_state() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicaleventgenerator method)": [[310, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalEventGenerator.set_state"]], "semigrandcanonicalpotential (class in libcasm.monte.ising_cpp.semigrand_canonical)": [[311, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential"]], "occ_delta_per_supercell() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalpotential method)": [[312, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.occ_delta_per_supercell"]], "occ_event_delta_per_supercell() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalpotential method)": [[313, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.occ_event_delta_per_supercell"]], "per_supercell() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalpotential method)": [[314, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.per_supercell"]], "per_unitcell() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalpotential method)": [[315, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.per_unitcell"]], "set_state() (libcasm.monte.ising_cpp.semigrand_canonical.semigrandcanonicalpotential method)": [[316, "libcasm.monte.ising_cpp.semigrand_canonical.SemiGrandCanonicalPotential.set_state"]], "default_write_status() (in module libcasm.monte.ising_cpp.semigrand_canonical)": [[317, "libcasm.monte.ising_cpp.semigrand_canonical.default_write_status"]], "libcasm.monte.ising_py": [[318, "module-libcasm.monte.ising_py"]], "isingconfiguration (class in libcasm.monte.ising_py)": [[319, "libcasm.monte.ising_py.IsingConfiguration"]], "from_dict() (libcasm.monte.ising_py.isingconfiguration static method)": [[320, "libcasm.monte.ising_py.IsingConfiguration.from_dict"]], "from_linear_site_index() (libcasm.monte.ising_py.isingconfiguration method)": [[321, "libcasm.monte.ising_py.IsingConfiguration.from_linear_site_index"]], "n_sites (libcasm.monte.ising_py.isingconfiguration attribute)": [[322, "libcasm.monte.ising_py.IsingConfiguration.n_sites"]], "n_unitcells (libcasm.monte.ising_py.isingconfiguration attribute)": [[323, "libcasm.monte.ising_py.IsingConfiguration.n_unitcells"]], "n_variable_sites (libcasm.monte.ising_py.isingconfiguration attribute)": [[324, "libcasm.monte.ising_py.IsingConfiguration.n_variable_sites"]], "occ() (libcasm.monte.ising_py.isingconfiguration method)": [[325, "libcasm.monte.ising_py.IsingConfiguration.occ"]], "occupation() (libcasm.monte.ising_py.isingconfiguration method)": [[326, "libcasm.monte.ising_py.IsingConfiguration.occupation"]], "set_occ() (libcasm.monte.ising_py.isingconfiguration method)": [[327, "libcasm.monte.ising_py.IsingConfiguration.set_occ"]], "set_occupation() (libcasm.monte.ising_py.isingconfiguration method)": [[328, "libcasm.monte.ising_py.IsingConfiguration.set_occupation"]], "shape (libcasm.monte.ising_py.isingconfiguration attribute)": [[329, "libcasm.monte.ising_py.IsingConfiguration.shape"]], "to_dict() (libcasm.monte.ising_py.isingconfiguration method)": [[330, "libcasm.monte.ising_py.IsingConfiguration.to_dict"]], "to_linear_site_index() (libcasm.monte.ising_py.isingconfiguration method)": [[331, "libcasm.monte.ising_py.IsingConfiguration.to_linear_site_index"]], "within() (libcasm.monte.ising_py.isingconfiguration method)": [[332, "libcasm.monte.ising_py.IsingConfiguration.within"]], "isingformationenergy (class in libcasm.monte.ising_py)": [[333, "libcasm.monte.ising_py.IsingFormationEnergy"]], "j (libcasm.monte.ising_py.isingformationenergy attribute)": [[334, "libcasm.monte.ising_py.IsingFormationEnergy.J"]], "lattice_type (libcasm.monte.ising_py.isingformationenergy attribute)": [[335, "libcasm.monte.ising_py.IsingFormationEnergy.lattice_type"]], "occ_delta_per_supercell() (libcasm.monte.ising_py.isingformationenergy method)": [[336, "libcasm.monte.ising_py.IsingFormationEnergy.occ_delta_per_supercell"]], "per_supercell() (libcasm.monte.ising_py.isingformationenergy method)": [[337, "libcasm.monte.ising_py.IsingFormationEnergy.per_supercell"]], "per_unitcell() (libcasm.monte.ising_py.isingformationenergy method)": [[338, "libcasm.monte.ising_py.IsingFormationEnergy.per_unitcell"]], "set_state() (libcasm.monte.ising_py.isingformationenergy method)": [[339, "libcasm.monte.ising_py.IsingFormationEnergy.set_state"]], "state (libcasm.monte.ising_py.isingformationenergy attribute)": [[340, "libcasm.monte.ising_py.IsingFormationEnergy.state"]], "isingparamcomposition (class in libcasm.monte.ising_py)": [[341, "libcasm.monte.ising_py.IsingParamComposition"]], "n_independent_compositions() (libcasm.monte.ising_py.isingparamcomposition method)": [[342, "libcasm.monte.ising_py.IsingParamComposition.n_independent_compositions"]], "occ_delta_per_supercell() (libcasm.monte.ising_py.isingparamcomposition method)": [[343, "libcasm.monte.ising_py.IsingParamComposition.occ_delta_per_supercell"]], "per_supercell() (libcasm.monte.ising_py.isingparamcomposition method)": [[344, "libcasm.monte.ising_py.IsingParamComposition.per_supercell"]], "per_unitcell() (libcasm.monte.ising_py.isingparamcomposition method)": [[345, "libcasm.monte.ising_py.IsingParamComposition.per_unitcell"]], "set_state() (libcasm.monte.ising_py.isingparamcomposition method)": [[346, "libcasm.monte.ising_py.IsingParamComposition.set_state"]], "isingstate (class in libcasm.monte.ising_py)": [[347, "libcasm.monte.ising_py.IsingState"]], "conditions (libcasm.monte.ising_py.isingstate attribute)": [[347, "libcasm.monte.ising_py.IsingState.conditions"]], "configuration (libcasm.monte.ising_py.isingstate attribute)": [[347, "libcasm.monte.ising_py.IsingState.configuration"]], "properties (libcasm.monte.ising_py.isingstate attribute)": [[347, "libcasm.monte.ising_py.IsingState.properties"]], "isingsystem (class in libcasm.monte.ising_py)": [[348, "libcasm.monte.ising_py.IsingSystem"]], "libcasm.monte.ising_py.semigrand_canonical": [[349, "module-libcasm.monte.ising_py.semigrand_canonical"]], "semigrandcanonicalcalculator (class in libcasm.monte.ising_py.semigrand_canonical)": [[350, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator"]], "conditions (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator attribute)": [[351, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.conditions"]], "data (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator attribute)": [[352, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.data"]], "formation_energy_calculator (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator attribute)": [[353, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.formation_energy_calculator"]], "param_composition_calculator (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator attribute)": [[354, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.param_composition_calculator"]], "potential (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator attribute)": [[355, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.potential"]], "run() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator method)": [[356, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.run"]], "state (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator attribute)": [[357, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.state"]], "system (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalcalculator attribute)": [[358, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalCalculator.system"]], "semigrandcanonicalconditions (class in libcasm.monte.ising_py.semigrand_canonical)": [[359, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions"]], "exchange_potential (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalconditions attribute)": [[360, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.exchange_potential"]], "from_dict() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalconditions static method)": [[361, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.from_dict"]], "from_values() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalconditions static method)": [[362, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.from_values"]], "temperature (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalconditions attribute)": [[363, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.temperature"]], "to_dict() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalconditions static method)": [[364, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.to_dict"]], "to_values() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalconditions method)": [[365, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalConditions.to_values"]], "semigrandcanonicaldata (class in libcasm.monte.ising_py.semigrand_canonical)": [[366, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData"]], "acceptance_rate() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata method)": [[367, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.acceptance_rate"]], "completion_check (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[368, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.completion_check"]], "n_accept (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[369, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_accept"]], "n_pass (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[370, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_pass"]], "n_reject (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[371, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_reject"]], "n_steps_per_pass (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[372, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.n_steps_per_pass"]], "rejection_rate() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata method)": [[373, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.rejection_rate"]], "reset() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata method)": [[374, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.reset"]], "sample_weight (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[375, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.sample_weight"]], "samplers (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[376, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.samplers"]], "sampling_functions (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata attribute)": [[377, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.sampling_functions"]], "to_dict() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaldata method)": [[378, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalData.to_dict"]], "semigrandcanonicaleventgenerator (class in libcasm.monte.ising_py.semigrand_canonical)": [[379, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator"]], "apply() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaleventgenerator method)": [[380, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.apply"]], "occ_event (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaleventgenerator attribute)": [[381, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.occ_event"]], "propose() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaleventgenerator method)": [[382, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.propose"]], "set_state() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaleventgenerator method)": [[383, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.set_state"]], "state (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicaleventgenerator attribute)": [[384, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalEventGenerator.state"]], "semigrandcanonicalpotential (class in libcasm.monte.ising_py.semigrand_canonical)": [[385, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential"]], "conditions (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential attribute)": [[386, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.conditions"]], "formation_energy_calculator (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential attribute)": [[387, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.formation_energy_calculator"]], "occ_delta_per_supercell() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential method)": [[388, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.occ_delta_per_supercell"]], "param_composition_calculator (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential attribute)": [[389, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.param_composition_calculator"]], "per_supercell() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential method)": [[390, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.per_supercell"]], "per_unitcell() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential method)": [[391, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.per_unitcell"]], "set_state() (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential method)": [[392, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.set_state"]], "state (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential attribute)": [[393, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.state"]], "system (libcasm.monte.ising_py.semigrand_canonical.semigrandcanonicalpotential attribute)": [[394, "libcasm.monte.ising_py.semigrand_canonical.SemiGrandCanonicalPotential.system"]], "default_write_status() (in module libcasm.monte.ising_py.semigrand_canonical)": [[395, "libcasm.monte.ising_py.semigrand_canonical.default_write_status"]], "make_formation_energy_f() (in module libcasm.monte.ising_py.semigrand_canonical)": [[396, "libcasm.monte.ising_py.semigrand_canonical.make_formation_energy_f"]], "make_param_composition_f() (in module libcasm.monte.ising_py.semigrand_canonical)": [[397, "libcasm.monte.ising_py.semigrand_canonical.make_param_composition_f"]], "make_potential_energy_f() (in module libcasm.monte.ising_py.semigrand_canonical)": [[398, "libcasm.monte.ising_py.semigrand_canonical.make_potential_energy_f"]], "libcasm.monte.methods": [[399, "module-libcasm.monte.methods"]], "basicoccupationmetropolisdata (class in libcasm.monte.methods)": [[400, "libcasm.monte.methods.BasicOccupationMetropolisData"]], "acceptance_rate() (libcasm.monte.methods.basicoccupationmetropolisdata method)": [[401, "libcasm.monte.methods.BasicOccupationMetropolisData.acceptance_rate"]], "completion_check (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[402, "libcasm.monte.methods.BasicOccupationMetropolisData.completion_check"]], "json_samplers (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[403, "libcasm.monte.methods.BasicOccupationMetropolisData.json_samplers"]], "json_sampling_functions (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[404, "libcasm.monte.methods.BasicOccupationMetropolisData.json_sampling_functions"]], "n_accept (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[405, "libcasm.monte.methods.BasicOccupationMetropolisData.n_accept"]], "n_pass (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[406, "libcasm.monte.methods.BasicOccupationMetropolisData.n_pass"]], "n_reject (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[407, "libcasm.monte.methods.BasicOccupationMetropolisData.n_reject"]], "n_steps_per_pass (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[408, "libcasm.monte.methods.BasicOccupationMetropolisData.n_steps_per_pass"]], "rejection_rate() (libcasm.monte.methods.basicoccupationmetropolisdata method)": [[409, "libcasm.monte.methods.BasicOccupationMetropolisData.rejection_rate"]], "sample_weight (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[410, "libcasm.monte.methods.BasicOccupationMetropolisData.sample_weight"]], "samplers (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[411, "libcasm.monte.methods.BasicOccupationMetropolisData.samplers"]], "sampling_functions (libcasm.monte.methods.basicoccupationmetropolisdata property)": [[412, "libcasm.monte.methods.BasicOccupationMetropolisData.sampling_functions"]], "to_dict() (libcasm.monte.methods.basicoccupationmetropolisdata method)": [[413, "libcasm.monte.methods.BasicOccupationMetropolisData.to_dict"]], "basic_occupation_metropolis() (in module libcasm.monte.methods)": [[414, "libcasm.monte.methods.basic_occupation_metropolis"]], "metropolis_acceptance() (in module libcasm.monte.methods)": [[415, "libcasm.monte.methods.metropolis_acceptance"]], "libcasm.monte.sampling": [[416, "module-libcasm.monte.sampling"]], "basicstatistics (class in libcasm.monte.sampling)": [[417, "libcasm.monte.sampling.BasicStatistics"]], "calculated_precision (libcasm.monte.sampling.basicstatistics property)": [[418, "libcasm.monte.sampling.BasicStatistics.calculated_precision"]], "mean (libcasm.monte.sampling.basicstatistics property)": [[419, "libcasm.monte.sampling.BasicStatistics.mean"]], "relative_precision() (libcasm.monte.sampling.basicstatistics method)": [[420, "libcasm.monte.sampling.BasicStatistics.relative_precision"]], "to_dict() (libcasm.monte.sampling.basicstatistics method)": [[421, "libcasm.monte.sampling.BasicStatistics.to_dict"]], "basicstatisticscalculator (class in libcasm.monte.sampling)": [[422, "libcasm.monte.sampling.BasicStatisticsCalculator"]], "calculate() (libcasm.monte.sampling.basicstatisticscalculator method)": [[423, "libcasm.monte.sampling.BasicStatisticsCalculator.calculate"]], "confidence (libcasm.monte.sampling.basicstatisticscalculator property)": [[424, "libcasm.monte.sampling.BasicStatisticsCalculator.confidence"]], "from_dict() (libcasm.monte.sampling.basicstatisticscalculator static method)": [[425, "libcasm.monte.sampling.BasicStatisticsCalculator.from_dict"]], "n_resamples (libcasm.monte.sampling.basicstatisticscalculator property)": [[426, "libcasm.monte.sampling.BasicStatisticsCalculator.n_resamples"]], "to_dict() (libcasm.monte.sampling.basicstatisticscalculator method)": [[427, "libcasm.monte.sampling.BasicStatisticsCalculator.to_dict"]], "weighted_observations_method (libcasm.monte.sampling.basicstatisticscalculator property)": [[428, "libcasm.monte.sampling.BasicStatisticsCalculator.weighted_observations_method"]], "completioncheck (class in libcasm.monte.sampling)": [[429, "libcasm.monte.sampling.CompletionCheck"]], "check() (libcasm.monte.sampling.completioncheck method)": [[430, "libcasm.monte.sampling.CompletionCheck.check"]], "count_and_time_check() (libcasm.monte.sampling.completioncheck method)": [[431, "libcasm.monte.sampling.CompletionCheck.count_and_time_check"]], "count_check() (libcasm.monte.sampling.completioncheck method)": [[432, "libcasm.monte.sampling.CompletionCheck.count_check"]], "params() (libcasm.monte.sampling.completioncheck method)": [[433, "libcasm.monte.sampling.CompletionCheck.params"]], "reset() (libcasm.monte.sampling.completioncheck method)": [[434, "libcasm.monte.sampling.CompletionCheck.reset"]], "results() (libcasm.monte.sampling.completioncheck method)": [[435, "libcasm.monte.sampling.CompletionCheck.results"]], "time_check() (libcasm.monte.sampling.completioncheck method)": [[436, "libcasm.monte.sampling.CompletionCheck.time_check"]], "completioncheckparams (class in libcasm.monte.sampling)": [[437, "libcasm.monte.sampling.CompletionCheckParams"]], "calc_statistics_f (libcasm.monte.sampling.completioncheckparams property)": [[438, "libcasm.monte.sampling.CompletionCheckParams.calc_statistics_f"]], "check_base (libcasm.monte.sampling.completioncheckparams property)": [[439, "libcasm.monte.sampling.CompletionCheckParams.check_base"]], "check_begin (libcasm.monte.sampling.completioncheckparams property)": [[440, "libcasm.monte.sampling.CompletionCheckParams.check_begin"]], "check_period (libcasm.monte.sampling.completioncheckparams property)": [[441, "libcasm.monte.sampling.CompletionCheckParams.check_period"]], "check_period_max (libcasm.monte.sampling.completioncheckparams property)": [[442, "libcasm.monte.sampling.CompletionCheckParams.check_period_max"]], "check_shift (libcasm.monte.sampling.completioncheckparams property)": [[443, "libcasm.monte.sampling.CompletionCheckParams.check_shift"]], "cutoff_params (libcasm.monte.sampling.completioncheckparams property)": [[444, "libcasm.monte.sampling.CompletionCheckParams.cutoff_params"]], "equilibration_check_f (libcasm.monte.sampling.completioncheckparams property)": [[445, "libcasm.monte.sampling.CompletionCheckParams.equilibration_check_f"]], "from_dict() (libcasm.monte.sampling.completioncheckparams static method)": [[446, "libcasm.monte.sampling.CompletionCheckParams.from_dict"]], "log_spacing (libcasm.monte.sampling.completioncheckparams property)": [[447, "libcasm.monte.sampling.CompletionCheckParams.log_spacing"]], "requested_precision (libcasm.monte.sampling.completioncheckparams property)": [[448, "libcasm.monte.sampling.CompletionCheckParams.requested_precision"]], "completioncheckresults (class in libcasm.monte.sampling)": [[449, "libcasm.monte.sampling.CompletionCheckResults"]], "clocktime (libcasm.monte.sampling.completioncheckresults property)": [[450, "libcasm.monte.sampling.CompletionCheckResults.clocktime"]], "convergence_check_results (libcasm.monte.sampling.completioncheckresults property)": [[451, "libcasm.monte.sampling.CompletionCheckResults.convergence_check_results"]], "count (libcasm.monte.sampling.completioncheckresults property)": [[452, "libcasm.monte.sampling.CompletionCheckResults.count"]], "equilibration_check_results (libcasm.monte.sampling.completioncheckresults property)": [[453, "libcasm.monte.sampling.CompletionCheckResults.equilibration_check_results"]], "full_reset() (libcasm.monte.sampling.completioncheckresults method)": [[454, "libcasm.monte.sampling.CompletionCheckResults.full_reset"]], "has_all_minimums_met (libcasm.monte.sampling.completioncheckresults property)": [[455, "libcasm.monte.sampling.CompletionCheckResults.has_all_minimums_met"]], "has_any_maximum_met (libcasm.monte.sampling.completioncheckresults property)": [[456, "libcasm.monte.sampling.CompletionCheckResults.has_any_maximum_met"]], "is_complete (libcasm.monte.sampling.completioncheckresults property)": [[457, "libcasm.monte.sampling.CompletionCheckResults.is_complete"]], "n_samples (libcasm.monte.sampling.completioncheckresults property)": [[458, "libcasm.monte.sampling.CompletionCheckResults.n_samples"]], "n_samples_at_convergence_check (libcasm.monte.sampling.completioncheckresults property)": [[459, "libcasm.monte.sampling.CompletionCheckResults.n_samples_at_convergence_check"]], "params (libcasm.monte.sampling.completioncheckresults property)": [[460, "libcasm.monte.sampling.CompletionCheckResults.params"]], "partial_reset() (libcasm.monte.sampling.completioncheckresults method)": [[461, "libcasm.monte.sampling.CompletionCheckResults.partial_reset"]], "time (libcasm.monte.sampling.completioncheckresults property)": [[462, "libcasm.monte.sampling.CompletionCheckResults.time"]], "to_dict() (libcasm.monte.sampling.completioncheckresults method)": [[463, "libcasm.monte.sampling.CompletionCheckResults.to_dict"]], "convergencecheckresults (class in libcasm.monte.sampling)": [[464, "libcasm.monte.sampling.ConvergenceCheckResults"]], "n_samples_for_statistics (libcasm.monte.sampling.convergencecheckresults property)": [[465, "libcasm.monte.sampling.ConvergenceCheckResults.N_samples_for_statistics"]], "all_converged (libcasm.monte.sampling.convergencecheckresults property)": [[466, "libcasm.monte.sampling.ConvergenceCheckResults.all_converged"]], "individual_results (libcasm.monte.sampling.convergencecheckresults property)": [[467, "libcasm.monte.sampling.ConvergenceCheckResults.individual_results"]], "to_dict() (libcasm.monte.sampling.convergencecheckresults method)": [[468, "libcasm.monte.sampling.ConvergenceCheckResults.to_dict"]], "convergenceresultmap (class in libcasm.monte.sampling)": [[469, "libcasm.monte.sampling.ConvergenceResultMap"]], "items() (libcasm.monte.sampling.convergenceresultmap method)": [[470, "libcasm.monte.sampling.ConvergenceResultMap.items"]], "keys() (libcasm.monte.sampling.convergenceresultmap method)": [[471, "libcasm.monte.sampling.ConvergenceResultMap.keys"]], "values() (libcasm.monte.sampling.convergenceresultmap method)": [[472, "libcasm.monte.sampling.ConvergenceResultMap.values"]], "correlationsdata (class in libcasm.monte.sampling)": [[473, "libcasm.monte.sampling.CorrelationsData"]], "atom_positions_cart (libcasm.monte.sampling.correlationsdata property)": [[474, "libcasm.monte.sampling.CorrelationsData.atom_positions_cart"]], "indices_after_pass() (libcasm.monte.sampling.correlationsdata method)": [[475, "libcasm.monte.sampling.CorrelationsData.indices_after_pass"]], "indices_after_time() (libcasm.monte.sampling.correlationsdata method)": [[476, "libcasm.monte.sampling.CorrelationsData.indices_after_time"]], "initialize() (libcasm.monte.sampling.correlationsdata method)": [[477, "libcasm.monte.sampling.CorrelationsData.initialize"]], "insert() (libcasm.monte.sampling.correlationsdata method)": [[478, "libcasm.monte.sampling.CorrelationsData.insert"]], "jumps_per_position_sample (libcasm.monte.sampling.correlationsdata property)": [[479, "libcasm.monte.sampling.CorrelationsData.jumps_per_position_sample"]], "max_n_position_samples (libcasm.monte.sampling.correlationsdata property)": [[480, "libcasm.monte.sampling.CorrelationsData.max_n_position_samples"]], "n_complete_samples (libcasm.monte.sampling.correlationsdata property)": [[481, "libcasm.monte.sampling.CorrelationsData.n_complete_samples"]], "n_position_samples (libcasm.monte.sampling.correlationsdata property)": [[482, "libcasm.monte.sampling.CorrelationsData.n_position_samples"]], "output_incomplete_samples (libcasm.monte.sampling.correlationsdata property)": [[483, "libcasm.monte.sampling.CorrelationsData.output_incomplete_samples"]], "pass (libcasm.monte.sampling.correlationsdata property)": [[484, "libcasm.monte.sampling.CorrelationsData.pass"]], "step (libcasm.monte.sampling.correlationsdata property)": [[485, "libcasm.monte.sampling.CorrelationsData.step"]], "stop_run_when_complete (libcasm.monte.sampling.correlationsdata property)": [[486, "libcasm.monte.sampling.CorrelationsData.stop_run_when_complete"]], "time (libcasm.monte.sampling.correlationsdata property)": [[487, "libcasm.monte.sampling.CorrelationsData.time"]], "to_dict() (libcasm.monte.sampling.correlationsdata method)": [[488, "libcasm.monte.sampling.CorrelationsData.to_dict"]], "correlationsdataparams (class in libcasm.monte.sampling)": [[489, "libcasm.monte.sampling.CorrelationsDataParams"]], "copy() (libcasm.monte.sampling.correlationsdataparams method)": [[490, "libcasm.monte.sampling.CorrelationsDataParams.copy"]], "from_dict() (libcasm.monte.sampling.correlationsdataparams static method)": [[491, "libcasm.monte.sampling.CorrelationsDataParams.from_dict"]], "jumps_per_position_sample (libcasm.monte.sampling.correlationsdataparams property)": [[492, "libcasm.monte.sampling.CorrelationsDataParams.jumps_per_position_sample"]], "max_n_position_samples (libcasm.monte.sampling.correlationsdataparams property)": [[493, "libcasm.monte.sampling.CorrelationsDataParams.max_n_position_samples"]], "output_incomplete_samples (libcasm.monte.sampling.correlationsdataparams property)": [[494, "libcasm.monte.sampling.CorrelationsDataParams.output_incomplete_samples"]], "stop_run_when_complete (libcasm.monte.sampling.correlationsdataparams property)": [[495, "libcasm.monte.sampling.CorrelationsDataParams.stop_run_when_complete"]], "to_dict() (libcasm.monte.sampling.correlationsdataparams method)": [[496, "libcasm.monte.sampling.CorrelationsDataParams.to_dict"]], "cutoffcheckparams (class in libcasm.monte.sampling)": [[497, "libcasm.monte.sampling.CutoffCheckParams"]], "from_dict() (libcasm.monte.sampling.cutoffcheckparams static method)": [[498, "libcasm.monte.sampling.CutoffCheckParams.from_dict"]], "max_clocktime (libcasm.monte.sampling.cutoffcheckparams property)": [[499, "libcasm.monte.sampling.CutoffCheckParams.max_clocktime"]], "max_count (libcasm.monte.sampling.cutoffcheckparams property)": [[500, "libcasm.monte.sampling.CutoffCheckParams.max_count"]], "max_sample (libcasm.monte.sampling.cutoffcheckparams property)": [[501, "libcasm.monte.sampling.CutoffCheckParams.max_sample"]], "max_time (libcasm.monte.sampling.cutoffcheckparams property)": [[502, "libcasm.monte.sampling.CutoffCheckParams.max_time"]], "min_clocktime (libcasm.monte.sampling.cutoffcheckparams property)": [[503, "libcasm.monte.sampling.CutoffCheckParams.min_clocktime"]], "min_count (libcasm.monte.sampling.cutoffcheckparams property)": [[504, "libcasm.monte.sampling.CutoffCheckParams.min_count"]], "min_sample (libcasm.monte.sampling.cutoffcheckparams property)": [[505, "libcasm.monte.sampling.CutoffCheckParams.min_sample"]], "min_time (libcasm.monte.sampling.cutoffcheckparams property)": [[506, "libcasm.monte.sampling.CutoffCheckParams.min_time"]], "to_dict() (libcasm.monte.sampling.cutoffcheckparams method)": [[507, "libcasm.monte.sampling.CutoffCheckParams.to_dict"]], "discretevectorfloathistogram (class in libcasm.monte.sampling)": [[508, "libcasm.monte.sampling.DiscreteVectorFloatHistogram"]], "component_names() (libcasm.monte.sampling.discretevectorfloathistogram method)": [[509, "libcasm.monte.sampling.DiscreteVectorFloatHistogram.component_names"]], "count() (libcasm.monte.sampling.discretevectorfloathistogram method)": [[510, "libcasm.monte.sampling.DiscreteVectorFloatHistogram.count"]], "fraction() (libcasm.monte.sampling.discretevectorfloathistogram method)": [[511, "libcasm.monte.sampling.DiscreteVectorFloatHistogram.fraction"]], "insert() (libcasm.monte.sampling.discretevectorfloathistogram method)": [[512, "libcasm.monte.sampling.DiscreteVectorFloatHistogram.insert"]], "max_size() (libcasm.monte.sampling.discretevectorfloathistogram method)": [[513, "libcasm.monte.sampling.DiscreteVectorFloatHistogram.max_size"]], "max_size_exceeded() (libcasm.monte.sampling.discretevectorfloathistogram method)": [[514, "libcasm.monte.sampling.DiscreteVectorFloatHistogram.max_size_exceeded"]], "out_of_range_count() (libcasm.monte.sampling.discretevectorfloathistogram method)": [[515, "libcasm.monte.sampling.DiscreteVectorFloatHistogram.out_of_range_count"]], "shape() (libcasm.monte.sampling.discretevectorfloathistogram method)": [[516, "libcasm.monte.sampling.DiscreteVectorFloatHistogram.shape"]], "size() (libcasm.monte.sampling.discretevectorfloathistogram method)": [[517, "libcasm.monte.sampling.DiscreteVectorFloatHistogram.size"]], "sum() (libcasm.monte.sampling.discretevectorfloathistogram method)": [[518, "libcasm.monte.sampling.DiscreteVectorFloatHistogram.sum"]], "to_dict() (libcasm.monte.sampling.discretevectorfloathistogram method)": [[519, "libcasm.monte.sampling.DiscreteVectorFloatHistogram.to_dict"]], "tol() (libcasm.monte.sampling.discretevectorfloathistogram method)": [[520, "libcasm.monte.sampling.DiscreteVectorFloatHistogram.tol"]], "values() (libcasm.monte.sampling.discretevectorfloathistogram method)": [[521, "libcasm.monte.sampling.DiscreteVectorFloatHistogram.values"]], "discretevectorinthistogram (class in libcasm.monte.sampling)": [[522, "libcasm.monte.sampling.DiscreteVectorIntHistogram"]], "component_names() (libcasm.monte.sampling.discretevectorinthistogram method)": [[523, "libcasm.monte.sampling.DiscreteVectorIntHistogram.component_names"]], "count() (libcasm.monte.sampling.discretevectorinthistogram method)": [[524, "libcasm.monte.sampling.DiscreteVectorIntHistogram.count"]], "fraction() (libcasm.monte.sampling.discretevectorinthistogram method)": [[525, "libcasm.monte.sampling.DiscreteVectorIntHistogram.fraction"]], "insert() (libcasm.monte.sampling.discretevectorinthistogram method)": [[526, "libcasm.monte.sampling.DiscreteVectorIntHistogram.insert"]], "max_size() (libcasm.monte.sampling.discretevectorinthistogram method)": [[527, "libcasm.monte.sampling.DiscreteVectorIntHistogram.max_size"]], "max_size_exceeded() (libcasm.monte.sampling.discretevectorinthistogram method)": [[528, "libcasm.monte.sampling.DiscreteVectorIntHistogram.max_size_exceeded"]], "out_of_range_count() (libcasm.monte.sampling.discretevectorinthistogram method)": [[529, "libcasm.monte.sampling.DiscreteVectorIntHistogram.out_of_range_count"]], "shape() (libcasm.monte.sampling.discretevectorinthistogram method)": [[530, "libcasm.monte.sampling.DiscreteVectorIntHistogram.shape"]], "size() (libcasm.monte.sampling.discretevectorinthistogram method)": [[531, "libcasm.monte.sampling.DiscreteVectorIntHistogram.size"]], "sum() (libcasm.monte.sampling.discretevectorinthistogram method)": [[532, "libcasm.monte.sampling.DiscreteVectorIntHistogram.sum"]], "to_dict() (libcasm.monte.sampling.discretevectorinthistogram method)": [[533, "libcasm.monte.sampling.DiscreteVectorIntHistogram.to_dict"]], "values() (libcasm.monte.sampling.discretevectorinthistogram method)": [[534, "libcasm.monte.sampling.DiscreteVectorIntHistogram.values"]], "equilibrationcheckresults (class in libcasm.monte.sampling)": [[535, "libcasm.monte.sampling.EquilibrationCheckResults"]], "n_samples_for_all_to_equilibrate (libcasm.monte.sampling.equilibrationcheckresults property)": [[536, "libcasm.monte.sampling.EquilibrationCheckResults.N_samples_for_all_to_equilibrate"]], "all_equilibrated (libcasm.monte.sampling.equilibrationcheckresults property)": [[537, "libcasm.monte.sampling.EquilibrationCheckResults.all_equilibrated"]], "individual_results (libcasm.monte.sampling.equilibrationcheckresults property)": [[538, "libcasm.monte.sampling.EquilibrationCheckResults.individual_results"]], "to_dict() (libcasm.monte.sampling.equilibrationcheckresults method)": [[539, "libcasm.monte.sampling.EquilibrationCheckResults.to_dict"]], "equilibrationresultmap (class in libcasm.monte.sampling)": [[540, "libcasm.monte.sampling.EquilibrationResultMap"]], "items() (libcasm.monte.sampling.equilibrationresultmap method)": [[541, "libcasm.monte.sampling.EquilibrationResultMap.items"]], "keys() (libcasm.monte.sampling.equilibrationresultmap method)": [[542, "libcasm.monte.sampling.EquilibrationResultMap.keys"]], "values() (libcasm.monte.sampling.equilibrationresultmap method)": [[543, "libcasm.monte.sampling.EquilibrationResultMap.values"]], "genericselectedeventfunction (class in libcasm.monte.sampling)": [[544, "libcasm.monte.sampling.GenericSelectedEventFunction"]], "description (libcasm.monte.sampling.genericselectedeventfunction property)": [[545, "libcasm.monte.sampling.GenericSelectedEventFunction.description"]], "function (libcasm.monte.sampling.genericselectedeventfunction property)": [[546, "libcasm.monte.sampling.GenericSelectedEventFunction.function"]], "has_value_function (libcasm.monte.sampling.genericselectedeventfunction property)": [[547, "libcasm.monte.sampling.GenericSelectedEventFunction.has_value_function"]], "name (libcasm.monte.sampling.genericselectedeventfunction property)": [[548, "libcasm.monte.sampling.GenericSelectedEventFunction.name"]], "order (libcasm.monte.sampling.genericselectedeventfunction property)": [[549, "libcasm.monte.sampling.GenericSelectedEventFunction.order"]], "requires_event_state (libcasm.monte.sampling.genericselectedeventfunction property)": [[550, "libcasm.monte.sampling.GenericSelectedEventFunction.requires_event_state"]], "histogram1d (class in libcasm.monte.sampling)": [[551, "libcasm.monte.sampling.Histogram1D"]], "begin() (libcasm.monte.sampling.histogram1d method)": [[552, "libcasm.monte.sampling.Histogram1D.begin"]], "bin_coords() (libcasm.monte.sampling.histogram1d method)": [[553, "libcasm.monte.sampling.Histogram1D.bin_coords"]], "bin_width() (libcasm.monte.sampling.histogram1d method)": [[554, "libcasm.monte.sampling.Histogram1D.bin_width"]], "count() (libcasm.monte.sampling.histogram1d method)": [[555, "libcasm.monte.sampling.Histogram1D.count"]], "density() (libcasm.monte.sampling.histogram1d method)": [[556, "libcasm.monte.sampling.Histogram1D.density"]], "insert() (libcasm.monte.sampling.histogram1d method)": [[557, "libcasm.monte.sampling.Histogram1D.insert"]], "is_log() (libcasm.monte.sampling.histogram1d method)": [[558, "libcasm.monte.sampling.Histogram1D.is_log"]], "max_size() (libcasm.monte.sampling.histogram1d method)": [[559, "libcasm.monte.sampling.Histogram1D.max_size"]], "max_size_exceeded() (libcasm.monte.sampling.histogram1d method)": [[560, "libcasm.monte.sampling.Histogram1D.max_size_exceeded"]], "merge() (libcasm.monte.sampling.histogram1d method)": [[561, "libcasm.monte.sampling.Histogram1D.merge"]], "out_of_range_count() (libcasm.monte.sampling.histogram1d method)": [[562, "libcasm.monte.sampling.Histogram1D.out_of_range_count"]], "size() (libcasm.monte.sampling.histogram1d method)": [[563, "libcasm.monte.sampling.Histogram1D.size"]], "sum() (libcasm.monte.sampling.histogram1d method)": [[564, "libcasm.monte.sampling.Histogram1D.sum"]], "to_dict() (libcasm.monte.sampling.histogram1d method)": [[565, "libcasm.monte.sampling.Histogram1D.to_dict"]], "individualconvergenceresult (class in libcasm.monte.sampling)": [[566, "libcasm.monte.sampling.IndividualConvergenceResult"]], "is_converged (libcasm.monte.sampling.individualconvergenceresult property)": [[567, "libcasm.monte.sampling.IndividualConvergenceResult.is_converged"]], "requested_precision (libcasm.monte.sampling.individualconvergenceresult property)": [[568, "libcasm.monte.sampling.IndividualConvergenceResult.requested_precision"]], "stats (libcasm.monte.sampling.individualconvergenceresult property)": [[569, "libcasm.monte.sampling.IndividualConvergenceResult.stats"]], "to_dict() (libcasm.monte.sampling.individualconvergenceresult method)": [[570, "libcasm.monte.sampling.IndividualConvergenceResult.to_dict"]], "individualequilibrationresult (class in libcasm.monte.sampling)": [[571, "libcasm.monte.sampling.IndividualEquilibrationResult"]], "n_samples_for_equilibration (libcasm.monte.sampling.individualequilibrationresult property)": [[572, "libcasm.monte.sampling.IndividualEquilibrationResult.N_samples_for_equilibration"]], "is_equilibrated (libcasm.monte.sampling.individualequilibrationresult property)": [[573, "libcasm.monte.sampling.IndividualEquilibrationResult.is_equilibrated"]], "to_dict() (libcasm.monte.sampling.individualequilibrationresult method)": [[574, "libcasm.monte.sampling.IndividualEquilibrationResult.to_dict"]], "partitionedhistogram1d (class in libcasm.monte.sampling)": [[575, "libcasm.monte.sampling.PartitionedHistogram1D"]], "combined_histogram() (libcasm.monte.sampling.partitionedhistogram1d method)": [[576, "libcasm.monte.sampling.PartitionedHistogram1D.combined_histogram"]], "histograms() (libcasm.monte.sampling.partitionedhistogram1d method)": [[577, "libcasm.monte.sampling.PartitionedHistogram1D.histograms"]], "insert() (libcasm.monte.sampling.partitionedhistogram1d method)": [[578, "libcasm.monte.sampling.PartitionedHistogram1D.insert"]], "partition_names() (libcasm.monte.sampling.partitionedhistogram1d method)": [[579, "libcasm.monte.sampling.PartitionedHistogram1D.partition_names"]], "to_dict() (libcasm.monte.sampling.partitionedhistogram1d method)": [[580, "libcasm.monte.sampling.PartitionedHistogram1D.to_dict"]], "partitionedhistogramfunction (class in libcasm.monte.sampling)": [[581, "libcasm.monte.sampling.PartitionedHistogramFunction"]], "bin_width (libcasm.monte.sampling.partitionedhistogramfunction property)": [[582, "libcasm.monte.sampling.PartitionedHistogramFunction.bin_width"]], "description (libcasm.monte.sampling.partitionedhistogramfunction property)": [[583, "libcasm.monte.sampling.PartitionedHistogramFunction.description"]], "function (libcasm.monte.sampling.partitionedhistogramfunction property)": [[584, "libcasm.monte.sampling.PartitionedHistogramFunction.function"]], "get_partition_function (libcasm.monte.sampling.partitionedhistogramfunction property)": [[585, "libcasm.monte.sampling.PartitionedHistogramFunction.get_partition_function"]], "initial_begin (libcasm.monte.sampling.partitionedhistogramfunction property)": [[586, "libcasm.monte.sampling.PartitionedHistogramFunction.initial_begin"]], "is_log (libcasm.monte.sampling.partitionedhistogramfunction property)": [[587, "libcasm.monte.sampling.PartitionedHistogramFunction.is_log"]], "max_size (libcasm.monte.sampling.partitionedhistogramfunction property)": [[588, "libcasm.monte.sampling.PartitionedHistogramFunction.max_size"]], "name (libcasm.monte.sampling.partitionedhistogramfunction property)": [[589, "libcasm.monte.sampling.PartitionedHistogramFunction.name"]], "partition() (libcasm.monte.sampling.partitionedhistogramfunction method)": [[590, "libcasm.monte.sampling.PartitionedHistogramFunction.partition"]], "partition_names (libcasm.monte.sampling.partitionedhistogramfunction property)": [[591, "libcasm.monte.sampling.PartitionedHistogramFunction.partition_names"]], "requires_event_state (libcasm.monte.sampling.partitionedhistogramfunction property)": [[592, "libcasm.monte.sampling.PartitionedHistogramFunction.requires_event_state"]], "partitionedhistogramfunctionmap (class in libcasm.monte.sampling)": [[593, "libcasm.monte.sampling.PartitionedHistogramFunctionMap"]], "items() (libcasm.monte.sampling.partitionedhistogramfunctionmap method)": [[594, "libcasm.monte.sampling.PartitionedHistogramFunctionMap.items"]], "keys() (libcasm.monte.sampling.partitionedhistogramfunctionmap method)": [[595, "libcasm.monte.sampling.PartitionedHistogramFunctionMap.keys"]], "values() (libcasm.monte.sampling.partitionedhistogramfunctionmap method)": [[596, "libcasm.monte.sampling.PartitionedHistogramFunctionMap.values"]], "requestedprecision (class in libcasm.monte.sampling)": [[597, "libcasm.monte.sampling.RequestedPrecision"]], "abs_convergence_is_required (libcasm.monte.sampling.requestedprecision property)": [[598, "libcasm.monte.sampling.RequestedPrecision.abs_convergence_is_required"]], "abs_precision (libcasm.monte.sampling.requestedprecision property)": [[599, "libcasm.monte.sampling.RequestedPrecision.abs_precision"]], "from_dict() (libcasm.monte.sampling.requestedprecision static method)": [[600, "libcasm.monte.sampling.RequestedPrecision.from_dict"]], "rel_convergence_is_required (libcasm.monte.sampling.requestedprecision property)": [[601, "libcasm.monte.sampling.RequestedPrecision.rel_convergence_is_required"]], "rel_precision (libcasm.monte.sampling.requestedprecision property)": [[602, "libcasm.monte.sampling.RequestedPrecision.rel_precision"]], "to_dict() (libcasm.monte.sampling.requestedprecision method)": [[603, "libcasm.monte.sampling.RequestedPrecision.to_dict"]], "requestedprecisionconstructor (class in libcasm.monte.sampling)": [[604, "libcasm.monte.sampling.RequestedPrecisionConstructor"]], "set_precision() (libcasm.monte.sampling.requestedprecisionconstructor method)": [[605, "libcasm.monte.sampling.RequestedPrecisionConstructor.set_precision"]], "requestedprecisionmap (class in libcasm.monte.sampling)": [[606, "libcasm.monte.sampling.RequestedPrecisionMap"]], "items() (libcasm.monte.sampling.requestedprecisionmap method)": [[607, "libcasm.monte.sampling.RequestedPrecisionMap.items"]], "keys() (libcasm.monte.sampling.requestedprecisionmap method)": [[608, "libcasm.monte.sampling.RequestedPrecisionMap.keys"]], "values() (libcasm.monte.sampling.requestedprecisionmap method)": [[609, "libcasm.monte.sampling.RequestedPrecisionMap.values"]], "sample_method (class in libcasm.monte.sampling)": [[610, "libcasm.monte.sampling.SAMPLE_METHOD"]], "custom (libcasm.monte.sampling.sample_method attribute)": [[611, "libcasm.monte.sampling.SAMPLE_METHOD.CUSTOM"]], "linear (libcasm.monte.sampling.sample_method attribute)": [[612, "libcasm.monte.sampling.SAMPLE_METHOD.LINEAR"]], "log (libcasm.monte.sampling.sample_method attribute)": [[613, "libcasm.monte.sampling.SAMPLE_METHOD.LOG"]], "name (libcasm.monte.sampling.sample_method property)": [[614, "libcasm.monte.sampling.SAMPLE_METHOD.name"]], "value (libcasm.monte.sampling.sample_method property)": [[615, "libcasm.monte.sampling.SAMPLE_METHOD.value"]], "sample_mode (class in libcasm.monte.sampling)": [[616, "libcasm.monte.sampling.SAMPLE_MODE"]], "by_pass (libcasm.monte.sampling.sample_mode attribute)": [[617, "libcasm.monte.sampling.SAMPLE_MODE.BY_PASS"]], "by_step (libcasm.monte.sampling.sample_mode attribute)": [[618, "libcasm.monte.sampling.SAMPLE_MODE.BY_STEP"]], "by_time (libcasm.monte.sampling.sample_mode attribute)": [[619, "libcasm.monte.sampling.SAMPLE_MODE.BY_TIME"]], "name (libcasm.monte.sampling.sample_mode property)": [[620, "libcasm.monte.sampling.SAMPLE_MODE.name"]], "value (libcasm.monte.sampling.sample_mode property)": [[621, "libcasm.monte.sampling.SAMPLE_MODE.value"]], "sampler (class in libcasm.monte.sampling)": [[622, "libcasm.monte.sampling.Sampler"]], "append() (libcasm.monte.sampling.sampler method)": [[623, "libcasm.monte.sampling.Sampler.append"]], "clear() (libcasm.monte.sampling.sampler method)": [[624, "libcasm.monte.sampling.Sampler.clear"]], "component() (libcasm.monte.sampling.sampler method)": [[625, "libcasm.monte.sampling.Sampler.component"]], "component_names() (libcasm.monte.sampling.sampler method)": [[626, "libcasm.monte.sampling.Sampler.component_names"]], "n_components() (libcasm.monte.sampling.sampler method)": [[627, "libcasm.monte.sampling.Sampler.n_components"]], "n_samples() (libcasm.monte.sampling.sampler method)": [[628, "libcasm.monte.sampling.Sampler.n_samples"]], "sample() (libcasm.monte.sampling.sampler method)": [[629, "libcasm.monte.sampling.Sampler.sample"]], "sample_capacity() (libcasm.monte.sampling.sampler method)": [[630, "libcasm.monte.sampling.Sampler.sample_capacity"]], "set_capacity_increment() (libcasm.monte.sampling.sampler method)": [[631, "libcasm.monte.sampling.Sampler.set_capacity_increment"]], "set_sample_capacity() (libcasm.monte.sampling.sampler method)": [[632, "libcasm.monte.sampling.Sampler.set_sample_capacity"]], "set_values() (libcasm.monte.sampling.sampler method)": [[633, "libcasm.monte.sampling.Sampler.set_values"]], "shape() (libcasm.monte.sampling.sampler method)": [[634, "libcasm.monte.sampling.Sampler.shape"]], "values() (libcasm.monte.sampling.sampler method)": [[635, "libcasm.monte.sampling.Sampler.values"]], "samplercomponent (class in libcasm.monte.sampling)": [[636, "libcasm.monte.sampling.SamplerComponent"]], "component_index (libcasm.monte.sampling.samplercomponent property)": [[637, "libcasm.monte.sampling.SamplerComponent.component_index"]], "component_name (libcasm.monte.sampling.samplercomponent property)": [[638, "libcasm.monte.sampling.SamplerComponent.component_name"]], "sampler_name (libcasm.monte.sampling.samplercomponent property)": [[639, "libcasm.monte.sampling.SamplerComponent.sampler_name"]], "samplermap (class in libcasm.monte.sampling)": [[640, "libcasm.monte.sampling.SamplerMap"]], "items() (libcasm.monte.sampling.samplermap method)": [[641, "libcasm.monte.sampling.SamplerMap.items"]], "keys() (libcasm.monte.sampling.samplermap method)": [[642, "libcasm.monte.sampling.SamplerMap.keys"]], "values() (libcasm.monte.sampling.samplermap method)": [[643, "libcasm.monte.sampling.SamplerMap.values"]], "samplingparams (class in libcasm.monte.sampling)": [[644, "libcasm.monte.sampling.SamplingParams"]], "append_to_json_sampler_names() (libcasm.monte.sampling.samplingparams method)": [[645, "libcasm.monte.sampling.SamplingParams.append_to_json_sampler_names"]], "append_to_sampler_names() (libcasm.monte.sampling.samplingparams method)": [[646, "libcasm.monte.sampling.SamplingParams.append_to_sampler_names"]], "base (libcasm.monte.sampling.samplingparams property)": [[647, "libcasm.monte.sampling.SamplingParams.base"]], "begin (libcasm.monte.sampling.samplingparams property)": [[648, "libcasm.monte.sampling.SamplingParams.begin"]], "do_sample_time (libcasm.monte.sampling.samplingparams property)": [[649, "libcasm.monte.sampling.SamplingParams.do_sample_time"]], "do_sample_trajectory (libcasm.monte.sampling.samplingparams property)": [[650, "libcasm.monte.sampling.SamplingParams.do_sample_trajectory"]], "extend_json_sampler_names() (libcasm.monte.sampling.samplingparams method)": [[651, "libcasm.monte.sampling.SamplingParams.extend_json_sampler_names"]], "extend_sampler_names() (libcasm.monte.sampling.samplingparams method)": [[652, "libcasm.monte.sampling.SamplingParams.extend_sampler_names"]], "json_sampler_names (libcasm.monte.sampling.samplingparams property)": [[653, "libcasm.monte.sampling.SamplingParams.json_sampler_names"]], "period (libcasm.monte.sampling.samplingparams property)": [[654, "libcasm.monte.sampling.SamplingParams.period"]], "remove_from_json_sampler_names() (libcasm.monte.sampling.samplingparams method)": [[655, "libcasm.monte.sampling.SamplingParams.remove_from_json_sampler_names"]], "remove_from_sampler_names() (libcasm.monte.sampling.samplingparams method)": [[656, "libcasm.monte.sampling.SamplingParams.remove_from_sampler_names"]], "sample_method (libcasm.monte.sampling.samplingparams property)": [[657, "libcasm.monte.sampling.SamplingParams.sample_method"]], "sample_mode (libcasm.monte.sampling.samplingparams property)": [[658, "libcasm.monte.sampling.SamplingParams.sample_mode"]], "sampler_names (libcasm.monte.sampling.samplingparams property)": [[659, "libcasm.monte.sampling.SamplingParams.sampler_names"]], "shift (libcasm.monte.sampling.samplingparams property)": [[660, "libcasm.monte.sampling.SamplingParams.shift"]], "stochastic_sample_period (libcasm.monte.sampling.samplingparams property)": [[661, "libcasm.monte.sampling.SamplingParams.stochastic_sample_period"]], "selectedeventdata (class in libcasm.monte.sampling)": [[662, "libcasm.monte.sampling.SelectedEventData"]], "continuous_1d_histograms (libcasm.monte.sampling.selectedeventdata property)": [[663, "libcasm.monte.sampling.SelectedEventData.continuous_1d_histograms"]], "correlations_data (libcasm.monte.sampling.selectedeventdata property)": [[664, "libcasm.monte.sampling.SelectedEventData.correlations_data"]], "discrete_vector_float_histograms (libcasm.monte.sampling.selectedeventdata property)": [[665, "libcasm.monte.sampling.SelectedEventData.discrete_vector_float_histograms"]], "discrete_vector_int_histograms (libcasm.monte.sampling.selectedeventdata property)": [[666, "libcasm.monte.sampling.SelectedEventData.discrete_vector_int_histograms"]], "reset() (libcasm.monte.sampling.selectedeventdata method)": [[667, "libcasm.monte.sampling.SelectedEventData.reset"]], "to_dict() (libcasm.monte.sampling.selectedeventdata method)": [[668, "libcasm.monte.sampling.SelectedEventData.to_dict"]], "selectedeventfunctionparams (class in libcasm.monte.sampling)": [[669, "libcasm.monte.sampling.SelectedEventFunctionParams"]], "collect() (libcasm.monte.sampling.selectedeventfunctionparams method)": [[670, "libcasm.monte.sampling.SelectedEventFunctionParams.collect"]], "collect_hop_correlations() (libcasm.monte.sampling.selectedeventfunctionparams method)": [[671, "libcasm.monte.sampling.SelectedEventFunctionParams.collect_hop_correlations"]], "copy() (libcasm.monte.sampling.selectedeventfunctionparams method)": [[672, "libcasm.monte.sampling.SelectedEventFunctionParams.copy"]], "correlations_data_params (libcasm.monte.sampling.selectedeventfunctionparams property)": [[673, "libcasm.monte.sampling.SelectedEventFunctionParams.correlations_data_params"]], "do_not_collect() (libcasm.monte.sampling.selectedeventfunctionparams method)": [[674, "libcasm.monte.sampling.SelectedEventFunctionParams.do_not_collect"]], "do_not_collect_hop_correlations() (libcasm.monte.sampling.selectedeventfunctionparams method)": [[675, "libcasm.monte.sampling.SelectedEventFunctionParams.do_not_collect_hop_correlations"]], "evaluate() (libcasm.monte.sampling.selectedeventfunctionparams method)": [[676, "libcasm.monte.sampling.SelectedEventFunctionParams.evaluate"]], "from_dict() (libcasm.monte.sampling.selectedeventfunctionparams static method)": [[677, "libcasm.monte.sampling.SelectedEventFunctionParams.from_dict"]], "function_names (libcasm.monte.sampling.selectedeventfunctionparams property)": [[678, "libcasm.monte.sampling.SelectedEventFunctionParams.function_names"]], "get_parameters() (libcasm.monte.sampling.selectedeventfunctionparams method)": [[679, "libcasm.monte.sampling.SelectedEventFunctionParams.get_parameters"]], "reset() (libcasm.monte.sampling.selectedeventfunctionparams method)": [[680, "libcasm.monte.sampling.SelectedEventFunctionParams.reset"]], "to_dict() (libcasm.monte.sampling.selectedeventfunctionparams method)": [[681, "libcasm.monte.sampling.SelectedEventFunctionParams.to_dict"]], "selectedeventfunctions (class in libcasm.monte.sampling)": [[682, "libcasm.monte.sampling.SelectedEventFunctions"]], "continuous_1d_functions (libcasm.monte.sampling.selectedeventfunctions property)": [[683, "libcasm.monte.sampling.SelectedEventFunctions.continuous_1d_functions"]], "discrete_vector_float_functions (libcasm.monte.sampling.selectedeventfunctions property)": [[684, "libcasm.monte.sampling.SelectedEventFunctions.discrete_vector_float_functions"]], "discrete_vector_int_functions (libcasm.monte.sampling.selectedeventfunctions property)": [[685, "libcasm.monte.sampling.SelectedEventFunctions.discrete_vector_int_functions"]], "generic_functions (libcasm.monte.sampling.selectedeventfunctions property)": [[686, "libcasm.monte.sampling.SelectedEventFunctions.generic_functions"]], "statesamplingfunction (class in libcasm.monte.sampling)": [[687, "libcasm.monte.sampling.StateSamplingFunction"]], "component_names (libcasm.monte.sampling.statesamplingfunction property)": [[688, "libcasm.monte.sampling.StateSamplingFunction.component_names"]], "description (libcasm.monte.sampling.statesamplingfunction property)": [[689, "libcasm.monte.sampling.StateSamplingFunction.description"]], "function (libcasm.monte.sampling.statesamplingfunction property)": [[690, "libcasm.monte.sampling.StateSamplingFunction.function"]], "name (libcasm.monte.sampling.statesamplingfunction property)": [[691, "libcasm.monte.sampling.StateSamplingFunction.name"]], "shape (libcasm.monte.sampling.statesamplingfunction property)": [[692, "libcasm.monte.sampling.StateSamplingFunction.shape"]], "statesamplingfunctionmap (class in libcasm.monte.sampling)": [[693, "libcasm.monte.sampling.StateSamplingFunctionMap"]], "items() (libcasm.monte.sampling.statesamplingfunctionmap method)": [[694, "libcasm.monte.sampling.StateSamplingFunctionMap.items"]], "keys() (libcasm.monte.sampling.statesamplingfunctionmap method)": [[695, "libcasm.monte.sampling.StateSamplingFunctionMap.keys"]], "values() (libcasm.monte.sampling.statesamplingfunctionmap method)": [[696, "libcasm.monte.sampling.StateSamplingFunctionMap.values"]], "vectorfloathistogramfunction (class in libcasm.monte.sampling)": [[697, "libcasm.monte.sampling.VectorFloatHistogramFunction"]], "component_names (libcasm.monte.sampling.vectorfloathistogramfunction property)": [[698, "libcasm.monte.sampling.VectorFloatHistogramFunction.component_names"]], "description (libcasm.monte.sampling.vectorfloathistogramfunction property)": [[699, "libcasm.monte.sampling.VectorFloatHistogramFunction.description"]], "function (libcasm.monte.sampling.vectorfloathistogramfunction property)": [[700, "libcasm.monte.sampling.VectorFloatHistogramFunction.function"]], "has_value_function (libcasm.monte.sampling.vectorfloathistogramfunction property)": [[701, "libcasm.monte.sampling.VectorFloatHistogramFunction.has_value_function"]], "max_size (libcasm.monte.sampling.vectorfloathistogramfunction property)": [[702, "libcasm.monte.sampling.VectorFloatHistogramFunction.max_size"]], "name (libcasm.monte.sampling.vectorfloathistogramfunction property)": [[703, "libcasm.monte.sampling.VectorFloatHistogramFunction.name"]], "requires_event_state (libcasm.monte.sampling.vectorfloathistogramfunction property)": [[704, "libcasm.monte.sampling.VectorFloatHistogramFunction.requires_event_state"]], "set_value_labels() (libcasm.monte.sampling.vectorfloathistogramfunction method)": [[705, "libcasm.monte.sampling.VectorFloatHistogramFunction.set_value_labels"]], "shape (libcasm.monte.sampling.vectorfloathistogramfunction property)": [[706, "libcasm.monte.sampling.VectorFloatHistogramFunction.shape"]], "tol (libcasm.monte.sampling.vectorfloathistogramfunction property)": [[707, "libcasm.monte.sampling.VectorFloatHistogramFunction.tol"]], "value_labels() (libcasm.monte.sampling.vectorfloathistogramfunction method)": [[708, "libcasm.monte.sampling.VectorFloatHistogramFunction.value_labels"]], "vectorfloathistogramfunctionmap (class in libcasm.monte.sampling)": [[709, "libcasm.monte.sampling.VectorFloatHistogramFunctionMap"]], "items() (libcasm.monte.sampling.vectorfloathistogramfunctionmap method)": [[710, "libcasm.monte.sampling.VectorFloatHistogramFunctionMap.items"]], "keys() (libcasm.monte.sampling.vectorfloathistogramfunctionmap method)": [[711, "libcasm.monte.sampling.VectorFloatHistogramFunctionMap.keys"]], "values() (libcasm.monte.sampling.vectorfloathistogramfunctionmap method)": [[712, "libcasm.monte.sampling.VectorFloatHistogramFunctionMap.values"]], "vectorinthistogramfunction (class in libcasm.monte.sampling)": [[713, "libcasm.monte.sampling.VectorIntHistogramFunction"]], "component_names (libcasm.monte.sampling.vectorinthistogramfunction property)": [[714, "libcasm.monte.sampling.VectorIntHistogramFunction.component_names"]], "description (libcasm.monte.sampling.vectorinthistogramfunction property)": [[715, "libcasm.monte.sampling.VectorIntHistogramFunction.description"]], "function (libcasm.monte.sampling.vectorinthistogramfunction property)": [[716, "libcasm.monte.sampling.VectorIntHistogramFunction.function"]], "has_value_function (libcasm.monte.sampling.vectorinthistogramfunction property)": [[717, "libcasm.monte.sampling.VectorIntHistogramFunction.has_value_function"]], "max_size (libcasm.monte.sampling.vectorinthistogramfunction property)": [[718, "libcasm.monte.sampling.VectorIntHistogramFunction.max_size"]], "name (libcasm.monte.sampling.vectorinthistogramfunction property)": [[719, "libcasm.monte.sampling.VectorIntHistogramFunction.name"]], "requires_event_state (libcasm.monte.sampling.vectorinthistogramfunction property)": [[720, "libcasm.monte.sampling.VectorIntHistogramFunction.requires_event_state"]], "set_value_labels() (libcasm.monte.sampling.vectorinthistogramfunction method)": [[721, "libcasm.monte.sampling.VectorIntHistogramFunction.set_value_labels"]], "shape (libcasm.monte.sampling.vectorinthistogramfunction property)": [[722, "libcasm.monte.sampling.VectorIntHistogramFunction.shape"]], "value_labels() (libcasm.monte.sampling.vectorinthistogramfunction method)": [[723, "libcasm.monte.sampling.VectorIntHistogramFunction.value_labels"]], "vectorinthistogramfunctionmap (class in libcasm.monte.sampling)": [[724, "libcasm.monte.sampling.VectorIntHistogramFunctionMap"]], "items() (libcasm.monte.sampling.vectorinthistogramfunctionmap method)": [[725, "libcasm.monte.sampling.VectorIntHistogramFunctionMap.items"]], "keys() (libcasm.monte.sampling.vectorinthistogramfunctionmap method)": [[726, "libcasm.monte.sampling.VectorIntHistogramFunctionMap.keys"]], "values() (libcasm.monte.sampling.vectorinthistogramfunctionmap method)": [[727, "libcasm.monte.sampling.VectorIntHistogramFunctionMap.values"]], "all_minimums_met() (in module libcasm.monte.sampling)": [[728, "libcasm.monte.sampling.all_minimums_met"]], "any_maximum_met() (in module libcasm.monte.sampling)": [[729, "libcasm.monte.sampling.any_maximum_met"]], "colmajor_component_names() (in module libcasm.monte.sampling)": [[730, "libcasm.monte.sampling.colmajor_component_names"]], "component_convergence_check() (in module libcasm.monte.sampling)": [[731, "libcasm.monte.sampling.component_convergence_check"]], "converge() (in module libcasm.monte.sampling)": [[732, "libcasm.monte.sampling.converge"]], "convergence_check() (in module libcasm.monte.sampling)": [[733, "libcasm.monte.sampling.convergence_check"]], "default_component_names() (in module libcasm.monte.sampling)": [[734, "libcasm.monte.sampling.default_component_names"]], "default_equilibration_check() (in module libcasm.monte.sampling)": [[735, "libcasm.monte.sampling.default_equilibration_check"]], "get_n_samples() (in module libcasm.monte.sampling)": [[736, "libcasm.monte.sampling.get_n_samples"]], "jsonsampler (class in libcasm.monte.sampling)": [[737, "libcasm.monte.sampling.jsonSampler"]], "append() (libcasm.monte.sampling.jsonsampler method)": [[738, "libcasm.monte.sampling.jsonSampler.append"]], "clear() (libcasm.monte.sampling.jsonsampler method)": [[739, "libcasm.monte.sampling.jsonSampler.clear"]], "n_samples() (libcasm.monte.sampling.jsonsampler method)": [[740, "libcasm.monte.sampling.jsonSampler.n_samples"]], "sample() (libcasm.monte.sampling.jsonsampler method)": [[741, "libcasm.monte.sampling.jsonSampler.sample"]], "sample_capacity() (libcasm.monte.sampling.jsonsampler method)": [[742, "libcasm.monte.sampling.jsonSampler.sample_capacity"]], "set_sample_capacity() (libcasm.monte.sampling.jsonsampler method)": [[743, "libcasm.monte.sampling.jsonSampler.set_sample_capacity"]], "set_values() (libcasm.monte.sampling.jsonsampler method)": [[744, "libcasm.monte.sampling.jsonSampler.set_values"]], "to_list() (libcasm.monte.sampling.jsonsampler method)": [[745, "libcasm.monte.sampling.jsonSampler.to_list"]], "values() (libcasm.monte.sampling.jsonsampler method)": [[746, "libcasm.monte.sampling.jsonSampler.values"]], "jsonsamplermap (class in libcasm.monte.sampling)": [[747, "libcasm.monte.sampling.jsonSamplerMap"]], "items() (libcasm.monte.sampling.jsonsamplermap method)": [[748, "libcasm.monte.sampling.jsonSamplerMap.items"]], "keys() (libcasm.monte.sampling.jsonsamplermap method)": [[749, "libcasm.monte.sampling.jsonSamplerMap.keys"]], "values() (libcasm.monte.sampling.jsonsamplermap method)": [[750, "libcasm.monte.sampling.jsonSamplerMap.values"]], "jsonstatesamplingfunction (class in libcasm.monte.sampling)": [[751, "libcasm.monte.sampling.jsonStateSamplingFunction"]], "description (libcasm.monte.sampling.jsonstatesamplingfunction property)": [[752, "libcasm.monte.sampling.jsonStateSamplingFunction.description"]], "function (libcasm.monte.sampling.jsonstatesamplingfunction property)": [[753, "libcasm.monte.sampling.jsonStateSamplingFunction.function"]], "name (libcasm.monte.sampling.jsonstatesamplingfunction property)": [[754, "libcasm.monte.sampling.jsonStateSamplingFunction.name"]], "jsonstatesamplingfunctionmap (class in libcasm.monte.sampling)": [[755, "libcasm.monte.sampling.jsonStateSamplingFunctionMap"]], "items() (libcasm.monte.sampling.jsonstatesamplingfunctionmap method)": [[756, "libcasm.monte.sampling.jsonStateSamplingFunctionMap.items"]], "keys() (libcasm.monte.sampling.jsonstatesamplingfunctionmap method)": [[757, "libcasm.monte.sampling.jsonStateSamplingFunctionMap.keys"]], "values() (libcasm.monte.sampling.jsonstatesamplingfunctionmap method)": [[758, "libcasm.monte.sampling.jsonStateSamplingFunctionMap.values"]], "matrix_as_vector() (in module libcasm.monte.sampling)": [[759, "libcasm.monte.sampling.matrix_as_vector"]], "scalar_as_vector() (in module libcasm.monte.sampling)": [[760, "libcasm.monte.sampling.scalar_as_vector"]]}})